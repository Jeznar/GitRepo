const MACRONAME = "Rod_of_the_Pact_Keeper.js"
/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0
 * Implements the once per long rest ability of the Rod.
 * 
 *   In addition, you can regain 1 warlock spell slot as an action while holding the rod. You can't 
 *   use this property again until you finish a long rest.
 * 
 * Specifically it acts on the Pact spell count.
 * 
 * 11/26/22 0.1 Creation of Macro
 *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/
const MACRO = MACRONAME.split(".")[0]       // Trim off the version number and extension
const TAG = `${MACRO} |`
const TL = 0;                               // Trace Level for this macro
let msg = "";                               // Global message string
//---------------------------------------------------------------------------------------------------
if (TL > 1) jez.trace(`${TAG} === Starting ===`);
if (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);
const LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents
//---------------------------------------------------------------------------------------------------
// Set the value for the Active Token (aToken)
let aToken;
if (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);
else aToken = game.actors.get(LAST_ARG.tokenId);
let aActor = aToken.actor;
//
// Set the value for the Active Item (aItem)
let aItem;
if (args[0]?.item) aItem = args[0]?.item;
else aItem = LAST_ARG.efData?.flags?.dae?.itemData;
//---------------------------------------------------------------------------------------------------
// Set Macro specific globals
//

//---------------------------------------------------------------------------------------------------
// Run the main procedures, choosing based on how the macro was invoked
//
if (args[0]?.tag === "OnUse") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use
if (TL > 1) jez.trace(`${TAG} === Finished ===`);
/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0
 *    END_OF_MAIN_MACRO_BODY
 *                                END_OF_MAIN_MACRO_BODY
 *                                                             END_OF_MAIN_MACRO_BODY
 ****************************************************************************************************
 * Post results to the chat card
 *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/
function postResults(msg) {
    const FUNCNAME = "postResults(msg)";
    const FNAME = FUNCNAME.split("(")[0]
    const TAG = `${MACRO} ${FNAME} |`
    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);
    if (TL > 2) jez.trace("postResults Parameters", "msg", msg)
    //-----------------------------------------------------------------------------------------------
    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);
    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: "saves" });
    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);
}
/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0
 * Perform the code that runs when this macro is invoked as an ItemMacro "OnUse"
 *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/
async function doOnUse(options = {}) {
    const FUNCNAME = "doOnUse(options={})";
    const FNAME = FUNCNAME.split("(")[0]
    const TAG = `${MACRO} ${FNAME} |`
    const TL = options.traceLvl ?? 0
    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);
    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, "options", options);
    await jez.wait(100)
    //-----------------------------------------------------------------------------------------------
    // Obtain our actors current and maxium pact slots.
    //
    let pactSlotsMax = aActor.data.data?.spells?.pact?.max
    let pactSlotsCur = aActor.data.data?.spells?.pact?.value
    if (TL > 1) jez.trace(`${TAG} Initial Pact Slots`,
        `pactSlotsMax`, pactSlotsMax, "pactSlotsCur", pactSlotsCur)
    //-----------------------------------------------------------------------------------------------
    // If we don't have slots, post angry message and return
    //
    if (!pactSlotsMax) {
        let rc = await refundUsage(aItem, { traceLvl: TL })
        if (rc) postResults(`${aToken.name} doesn't have pact spell slots.<br><br>Refunded 
            usage of ${aItem.name}.`)
        else postResults(`${aToken.name} doesn't have pact spell slots.<br><br>Could not refund 
            usage of ${aItem.name}.`)
        return jez.badNews(`${TAG} ${aToken.name} does not have Pact spell slots.`, 'e')
    }
    //-----------------------------------------------------------------------------------------------
    // If we are already full, post appropriate message
    //
    if (pactSlotsCur >= pactSlotsMax) {
        let rc = await refundUsage(aItem, { traceLvl: TL })
        if (rc) postResults(`${aToken.name} is already at max pact spell slots.<br><br>Refunded 
            usage of ${aItem.name}.`)
        else postResults(`${aToken.name} is already at max pact spell slots.<br><br>Could not refund 
            usage of ${aItem.name}.`)
        return jez.badNews(`${TAG} ${aToken.name} already has max ${pactSlotsCur} spell slots.`, 'i')
    }
    //-----------------------------------------------------------------------------------------------
    // Increment the slot count and update actor
    //
    let rc = await aActor.update({ 'data.spells.pact.value': pactSlotsCur + 1 });
    if (TL > 1) jez.trace(`${TAG} return from update call`, rc)
    //-----------------------------------------------------------------------------------------------
    // Say goodbye!
    //
    msg = `${aToken.name} has had a pact spell slot restored.`
    postResults(msg)
    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);
    return true;
}
/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0
 * Attempt to refund daily usage on the item, returning true on success, false on failure
 *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/
async function refundUsage(itemObj, options = {}) {
    const FUNCNAME = "refundUsage(item, options={})";
    const FNAME = FUNCNAME.split("(")[0]
    const TAG = `${MACRO} ${FNAME} |`
    const TL = options.traceLvl ?? 0
    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);
    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, "itemObj", itemObj, 
        "options", options);
    //-----------------------------------------------------------------------------------------------
    // Did we receive an item5e?  if it wasn't, maybe it is one of the funky item obj data blocks 
    // that we can convert to an item5e to update it.
    //
    let item5e = null
    if (typeof (itemObj) === "object") {                    // Hopefully we have an Item5e
        if (itemObj.constructor.name === "Item5e") item5e = itemObj
        else {
            item5e = await fromUuid(itemObj.uuid)
            if (item5e.constructor.name !== "Item5e") return jez.badNews(`Item ${item5e?.name} is 
                not an Item5e`, 'e')
        }
    }
    //-----------------------------------------------------------------------------------------------
    // Grab the item use data, if any
    //
    if (TL > 1) jez.trace(`${TAG} Extract use data from item`,item5e)
    let usesMax = item5e.data.data?.uses?.max
    let usesVal = item5e.data.data?.uses?.value
    if (TL > 1) jez.trace(`${TAG} Daily Item Use Info`,"usesMax",usesMax,"usesVal",usesVal)
    if (!usesMax) return(false)             // Do we have usage slots defined?
    if (usesVal >= usesMax) return(false)   // Are we at less than maximum slots
    //-----------------------------------------------------------------------------------------------
    // Increment uses value and update the item
    //
    let itemUpdate = { 'data.uses.value': ++usesVal }
    let rc = await item5e.update(itemUpdate)
    if (TL > 1) jez.trace(`${TAG} Returned from item update`,rc)
    return(true)
}