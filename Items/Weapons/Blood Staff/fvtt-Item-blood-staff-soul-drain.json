{
  "name": "Blood Staff Soul Drain",
  "type": "feat",
  "img": "Custom%20Graphics%20for%20Foundry%20symlink/blood2.svg",
  "data": {
    "description": {
      "value": "<p>As a free action, when a creature is killed by the wielder of the @Item[yDhlhDgUYiNrllkh]{Blood Staff}, this item can be used to drain a portion of the soul of the now dead creature.  This adds 2d6 temporary hit points to the user.</p>\n<p><strong>FoundryVTT: </strong>Target a token just killed and fire off this ability.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "none",
      "cost": null,
      "condition": "Wielder of the Blood Staff must have just killed the target."
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Blood Staff Soul Drain",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Blood_Staff_Soul_Drain.js\"\n/*****************************************************************************************\n * Add 2d6 temp HP to invoking actor and some splashy VFX\n * \n * 03/10/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif (args[0]?.tag === \"OnUse\") if (!preCheck()) return(false)\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        ui.notifications.info(msg);\n        postResults(msg);\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(`First Targeted Token (tToken) of ${args[0].targets?.length}, ${tToken?.name}`, tToken);\n    jez.log(`First Targeted Actor (tActor) ${tActor?.name}`, tActor)\n    //----------------------------------------------------------------------------------------------\n    // Is the targeted token dead, zero HP?\n    //\n    if (tToken.actor.data.data.attributes.hp.value !== 0) {\n        msg = `Fortunately for <b>${tToken.name}</b> it is alive!  This spell can only drain the \n        soul of a creature just killed by the wielder of this item.`\n        ui.notifications.info(msg);\n        postResults(msg);\n        return (false);\n    } else jez.log(`Yea? ${tToken.name} is dead and can have hex moved`)\n    //----------------------------------------------------------------------------------------------\n    // Fire up some nifty visual effects\n    //\n    runVFX(aToken, tToken)\n    //----------------------------------------------------------------------------------------------\n    // Roll some temp HP\n    //\n    let numDice = 2\n    let diceType = \"d6\"\n    let bonus = 0\n    let newTempHp = new Roll(`${numDice}${diceType}+${bonus}`).evaluate({ async: false });\n    jez.log(\"newTempHp\",newTempHp)\n    game.dice3d?.showForRoll(newTempHp);\n    jez.log(\"newTempHp.total\",newTempHp.total)\n    //----------------------------------------------------------------------------------------------\n    // Fetch the Old temp HP for comparison to the new ones\n    //\n    let oldTempHp = aToken.actor.data.data.attributes.hp.temp;\n    jez.log(\"oldTempHp\",oldTempHp)\n    //----------------------------------------------------------------------------------------------\n    // If the new temp HP are more than the old ones, upgrade the quantity\n    //\n    if (newTempHp.total <= oldTempHp) {\n        jez.log(` old temp HP was ${oldTempHp}, not changing temporary hit points`); \n        msg = `${aToken.name} has ${oldTempHp} temporary hit points. The ${newTempHp.total} can not be used.`\n    } else { \n        await aToken.actor.update({\n            'data.attributes.hp.temp' : newTempHp.total\n            //,'data.attributes.hp.tempmax' : newTempHp.total\n        })\n        msg = `<b>${aToken.name}</b> had ${oldTempHp} temporary hit points, gained ${newTempHp.total-oldTempHp}. \n        ${aToken.name} now has ${newTempHp.total} temp HP.`\n    }\n    //----------------------------------------------------------------------------------------------\n    // Post the results and exit\n    //\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Play a VFX beam from the drained target to the caster\n ***************************************************************************************************/\nasync function runVFX(token1, token2) {\n    const VFX_BEAM = \"modules/jb2a_patreon/Library/Generic/Energy/EnergyStrand_Multiple01_Dark_Red_30ft_1600x400.webm\"\n    const VFX_CLOUD = \"modules/jb2a_patreon/Library/Generic/Marker/EnergyStrands_01_Dark_Red_600x600.webm\"\n    new Sequence()\n        .effect()\n            .atLocation(token2)\n            .reachTowards(token1)\n            .scale(1)\n            .repeats(5,1200)\n            .file(VFX_BEAM)\n            .waitUntilFinished(-2000) \n        .effect()\n            .file(VFX_CLOUD)\n            .atLocation(token1)\n            .scale(0.3)\n            .opacity(1)\n        .play();\n    }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.UX0G2yEX73XO9ieZ"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}