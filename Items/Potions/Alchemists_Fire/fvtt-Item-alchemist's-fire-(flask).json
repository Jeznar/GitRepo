{
  "name": "Alchemist's Fire (flask)",
  "type": "consumable",
  "img": "/systems/dnd5e/icons/items/potions/grand-yellow.jpg",
  "data": {
    "description": {
      "value": "<p>This sticky, adhesive fluid ignites when exposed to air. As an action, you can throw this flask up to 20 feet, shattering it on impact. Make a ranged attack against a creature or object, treating the alchemist's fire as an improvised weapon.</p>\n<p>On a hit, the target takes <strong>1d4 fire damage </strong>at the end of each of its turns. A creature can end this damage by using its action to make a <strong>DC 10 Dexterity check </strong>to extinguish the flames.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Offers opportunity to extinguish fire.</p>",
      "chat": "<p>This sticky, adhesive fluid ignites when exposed to air. As an action, you can throw this flask up to 20 feet, shattering it on impact. Make a ranged attack against a creature or object, treating the alchemist's fire as an improvised weapon. On a hit, the target takes 1d4 fire damage at the start of each of its turns. A creature can end this damage by using its action to make a DC 10 Dexterity check to extinguish the flames.</p>",
      "unidentified": "Gear"
    },
    "source": "",
    "quantity": 1,
    "weight": 1,
    "price": 50,
    "attunement": 0,
    "equipped": false,
    "rarity": "common",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "any",
      "type": "creature"
    },
    "range": {
      "value": 20,
      "long": 40,
      "units": "ft"
    },
    "uses": {
      "value": 1,
      "max": "1",
      "per": "charges",
      "autoDestroy": true,
      "autoUse": false
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "dex",
    "actionType": "rwak",
    "attackBonus": "0",
    "chatFlavor": "improvised weapon",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d4",
          "fire"
        ]
      ],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 10,
      "scaling": "flat"
    },
    "consumableType": "potion"
  },
  "effects": [
    {
      "_id": "UdRxf1xDQr86ZnEu",
      "changes": [
        {
          "key": "ATL.dimLight",
          "mode": 4,
          "value": "10",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 0,
          "value": "turn=end,label=Alchemist's Fire,damageRoll=1d4,damageType=fire",
          "priority": "20"
        },
        {
          "key": "ATL.brightLight",
          "mode": 4,
          "value": "5",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "rounds": 10
      },
      "icon": "/systems/dnd5e/icons/items/potions/grand-yellow.jpg",
      "label": "Alchemist's Fire",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "multi",
          "macroRepeat": "startEveryTurn",
          "specialDuration": [
            "None"
          ],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "ATL.dimLight",
        "flags.midi-qol.OverTime",
        "ATL.brightLight",
        "macro.itemMacro"
      ]
    }
  ],
  "sort": 0,
  "flags": {
    "ddbimporter": {
      "dndbeyond": {
        "type": "Adventuring Gear",
        "tags": [
          "Damage",
          "Utility",
          "Combat",
          "Consumable"
        ],
        "sources": []
      },
      "id": 0,
      "entityTypeId": 0,
      "definitionEntityTypeId": 2103445194,
      "definitionId": 19,
      "originalName": "Alchemist's Fire (flask)"
    },
    "betterRolls5e": {
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "cf": {
      "id": "temp_fmdqgljfolf"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.items.jNOPGxA5dWrgJ4xm"
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "ItemMacro"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Alchemist's Fire (flask)",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Alchemists_Fire.js\"\n/*****************************************************************************************\n * Alchemist's Fire\n * \n *   This sticky, adhesive fluid ignites when exposed to air. As an action, you can throw \n *   this flask up to 20 feet, shattering it on impact. Make a ranged attack against a \n *   creature or object, treating the alchemist's fire as an improvised weapon.\n * \n *   On a hit, the target takes 1d4 fire damage at the end of each of its turns. A creature \n *   can end this damage by using its action to make a DC 10 Dexterity check to extinguish \n *   the flames.\n * \n * 04/21/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst GAME_RND = game.combat ? game.combat.round : 0;\nlet chatMessage = game.messages.get(args[args.length - 1].itemCardId);\nconst CONDITION=\"Alchemist's Fire\"\nconst CHK_DC = \"10\";\nconst CHK_TYPE = \"dex\"    \nconst VFX_LOOP = \"jb2a.flames.green.01\";\nconst VFX_NAME = `${MACRO}-${aToken.name}`\nconst VFX_SCALE = 2.4\nconst VFX_OPACITY = 0.6\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\n//if (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"on\") await doOn();                   \nif (args[0] === \"each\") doEach();\t\t\t\t\t  \nif (args[0] === \"off\") await doOff();          \nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs every turn\n * \n * Need to offer a choice to spend action this turn to remove (scrape off) the fire effect\n ***************************************************************************************************/\n async function doEach() {\n    let d = Dialog.confirm({\n        title: `${aToken.name} attempt to extinguish fire?`,\n        content: `<p>Does ${aToken.name} want to spend its action this turn to attempt to extinguish\n        the ${CONDITION}?<br><br>This would be a DC${CHK_DC} ${CHK_TYPE} skill check.<br></p>`,\n        yes: () => dCallback(CONDITION, CHK_TYPE, CHK_DC),\n        no: () => console.log(\"You choose ... to burn\"),\n        defaultYes: false\n       });\n    return;\n}\n/***************************************************************************************************\n * Start a Fire VFX on out victim\n ***************************************************************************************************/\n async function doOn() {\n    const FUNCNAME = \"doOn()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    new Sequence()\n    .effect()\n        .file(VFX_LOOP)\n        .attachTo(aToken)\n        //.atLocation(aToken)\n        .opacity(VFX_OPACITY)\n        //.scale(VFX_SCALE)\n        .scaleToObject(VFX_SCALE)\n        //.belowTokens()\n        .persist()\n        .name(VFX_NAME)             \n        .fadeIn(1000)  \n        .fadeOut(1000)   \n    .play()\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n  }\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    Sequencer.EffectManager.endEffects({ name: VFX_NAME });\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n  }\n/***************************************************************************************************\n * Dialog callback to attempt to exinguish the fire\n ***************************************************************************************************/\n async function dCallback(CONDITION, CHK_TYPE, CHK_DC) {\n    const FLAVOR = `Attempting ${CHK_TYPE.toUpperCase()} DC${CHK_DC} to extinguish ${CONDITION}`\n    let check = (await aToken.actor.rollAbilityTest(CHK_TYPE,\n        { flavor: FLAVOR, chatMessage: true, fastforward: true })).total;\n    if (check >= CHK_DC)  {\n        jez.log(\"aToken.actor.effects\",aToken.actor.effects)\n        let effect = await aToken.actor.effects.find(ef => ef.data.label === CONDITION) ?? null\n        await effect.delete();\n        jez.postMessage({color: \"firebrick\", fSize: 14, icon: aToken.data.img,\n            msg: `<b>${aToken.name}</b> succeeded in extinguishing <b>${CONDITION}</b>.\n                Skill check of <b>${check}</b> beats the ${CHK_TYPE.toUpperCase()} DC${CHK_DC}.\n                <br><br>This used <b>${aToken.name}</b>'s action.`,\n            title: `${aToken.name} extiguish ${CONDITION}`,\n            token: aToken\n        })\n    } else {\n        jez.postMessage({\n            color: \"firebrick\", fSize: 14, icon: aToken.data.img,\n            msg: `<b>${aToken.name}</b> fails to extinguish <b>${CONDITION}</b>.\n                Skill check of <b>${check}</b> fell short of the ${CHK_TYPE.toUpperCase()} DC${CHK_DC}. \n                <br><br>This used <b>${aToken.name}</b>'s action.`,\n            title: `${aToken.name} continues to burn.`,\n            token: aToken\n        })\n    }\n }\n /***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n  async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    if (!await preCheck()) return (false)\n    else jez.log(\"Continue....\")\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    msg = `${tToken.name} is splashed with ${CONDITION} and starts to burn.`\n    postResults(msg)\n    return (true);\n}\n/***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\n async function preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        await postResults(msg)\n        ui.notifications.warn(msg)\n        jez.log(msg)\n        return(false);\n    }\n    return (true)\n}\n /***************************************************************************************\n * Post results to the chat card\n ***************************************************************************************/\nasync function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    await jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}