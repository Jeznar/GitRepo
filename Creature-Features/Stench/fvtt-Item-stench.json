{
  "name": "Stench",
  "type": "weapon",
  "img": "Icons_JGB/Monster_Features/Skunk.png",
  "data": {
    "description": {
      "value": "<p><span style=\"color: #191813; font-size: 13px;\">Any creature that starts its turn within 5 ft. of the ghast must succeed on a <strong>Con save</strong> or be @JournalEntry[45AvudXYEJYpj1L8]{Poisoned} until the start of its next turn. On a successful saving throw, the creature is immune to %TOKENNAME%'s Stench for 24 hours.</span></p>\n<hr />\n<p><strong>FoundryVTT</strong>: Use this against each token that starts its turn adjacent to %TOKENNAME%. It will apply debuff or immunity as appropriate.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "quantity": 1,
    "weight": 0,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": false,
    "activation": {
      "type": "none",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 5,
      "long": 5,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "con",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": null,
      "scaling": "str"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "ada": false,
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "mgc": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "sil": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false
    },
    "proficient": false
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Stench",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Stench.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Implment the save and effects portion of a Ghast's stench ability.\n * \n * This is intended to be used as an ItemMacro invoked from an ability that triggers the appropriate\n * saving throw.  It depends on that saving throw result and having a single token targeted. It does:\n * \n * 1. Check to see if the target is immune, if so post message and return.\n * 2. If the target failed save, apply a 1 turn POISONED effect from existing CE effect\n * 3. If the target saved, apply a 24 hour immunity effect\n * 4. Post results.\n * \n * 09/22/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst IMMUNE = `Stench Immune`\nconst POISONED = `Poisoned`\nconst IMMU_ICON = \"Icons_JGB/Monster_Features/Skunk_No.png\"\nconst POIS_ICON = \"Icons_JGB/Monster_Features/Skunk.png\"\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function preCheck() {\n    const FUNCNAME = \"preCheck()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`\n        if (TL > 3) jez.trace(`${FNAME} | ${msg}`)\n\n        ui.notifications.warn(msg)\n        postResults(msg);\n        return (false);\n    }\n    return (true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------\n    // Launch VFX on aToken\n    // \n    runVFX(aToken);\n    //-----------------------------------------------------------------------------------------------\n    // If target is immune, post message and get on with life\n    //\n    if (jezcon.hasCE( IMMUNE, tActor.uuid, {traceLvl: TL} )) {\n        if (TL > 1) jez.trace(`${TAG} Target ${tToken.name} is already immune`);\n        console.log(\"TODO: Post already immune message\")\n        msg = `<b>${tToken.name}</b> is immune to ${aItem.name} from recent exposure.`\n        postResults(msg)\n        return\n    }\n    //-----------------------------------------------------------------------------------------------\n    // If the target did not save apply a 1 turn POISONED effect\n    //\n    if (args[0].saves.length === 0) {\n        if (TL > 1) jez.trace(`${TAG} Target ${tToken.name} failed its save`);\n        // Retrieve as an object, the POISONED Convenient Effect for modification\n        let effectData = game.dfreds.effectInterface.findEffectByName(POISONED).convertToObject();\n        // If debugging, dump out the effect data object\n        if (TL>3) jez.trace(`${TAG} effectData objtained`, effectData)  \n        // The standard Poisoned CE lags a \"dae\" field in its flags, so it needs to be added\n        effectData.flags.dae = { specialDuration : [ \"turnStart\" ] }\n        // Change the icon used to one specific to this spell\n        effectData.icon = POIS_ICON\n        // Change the convenient description to one specific to this spell\n        effectData.description = \"Poisoned by overwhelming stench, disadvantage on attack rolls and ability checks.\"\n        // If debugging, dump out the effect data object after the updates\n        if (TL>3) jez.trace(`${TAG} updated ===>`, effectData)  \n        // Slap the updated CE onto our targeted actor\n        game.dfreds.effectInterface.addEffectWith({ effectData: effectData, uuid: tActor.uuid, origin: aActor.uuid });\n        // Set msg with result for later display\n        msg = `<b>${tToken.name}</b> has been poisoned by the effects of ${aItem.name} for one turn.`\n    }\n    //-----------------------------------------------------------------------------------------------\n    // If target saved, craft and apply an immunity effect\n    //\n    if (args[0].saves.length === 1) {\n        if (TL > 1) jez.trace(`${TAG} Target ${tToken.name} made its save`);\n        let effectData = {\n            label: IMMUNE,\n            icon: IMMU_ICON,\n            origin: LAST_ARG.uuid,\n            disabled: false,\n            duration: { seconds: 86400, startTime: game.time.worldTime },\n            flags: {\n                dae: { itemData: aItem },\n                isConvenient: true,\n                isCustomConvenient: true,\n                convenientDescription: `Immmune to Stench's Poison effect`\n            },\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [effectData] });\n        msg = `${tToken.name} resists the effect of ${aItem.name} and is now immune to it for 24 hours.`;\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Post completion message\n    //\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/***************************************************************************************************\n * Run some VFX on token\n ***************************************************************************************************/\n function runVFX(token) {\n    const VFX_TARGET = \"jb2a.markers.poison.dark_green.01\"\n    const VFX_SCALE = 0.8\n    const VFX_OPACITY = 0.7\n\n    new Sequence()\n        .effect()\n        .file(VFX_TARGET)\n        .attachTo(token)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.LGmAr0iu5NVujzQj"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}