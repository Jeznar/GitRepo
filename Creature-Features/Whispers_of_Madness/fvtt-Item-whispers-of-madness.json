{
  "name": "Whispers of Madness",
  "type": "feat",
  "img": "Tokens/Undead/Avatars/Allip-Avatar.png",
  "data": {
    "description": {
      "value": "<p>Choose up to three creatures that can be seen within 60 feet. Each target must succeed on a <strong>DC 14 Wisdom saving throw</strong>, or it takes 7 <strong>(1d8 + @mod) psychic</strong> damage and must use its <strong>reaction to make a melee weapon attack</strong> against one creature of the creature's choice that the creature can see.</p>\n<p>Constructs and undead are immune to this effect.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Target up to three targets before using this item.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "cha",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.ZfA3aYP02Zwygs0S"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Whispers of Madness",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Whispers_of_Madness.js\"\n/*****************************************************************************************\n * Implments the Allip's ability of same name.  Assuming that the user has trageted 1-3\n * tokens before this macro is invoked as an OnUse.\n * \n *   Choose up to three creatures that can be seen within 60 feet. Each target must \n *   succeed on a DC 14 Wisdom saving throw, or it takes 7 (1d8 + 3) psychic damage \n *   and must use its reaction to make a melee weapon attack against one creature of \n *   the creature's choice that the creature can see.\n * \n *   Constructs and undead are immune to this effect.\n * \n * 04/14/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n// DamageBonus must return a function to the caller\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length === 0 || args[0].targets.length > 3) {     \n        msg = `Must target between one and three target(s).  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let targetArray = []\n    let token5eArray = []\n    if (!preCheck()) return(false);\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let color = jez.getRandomRuneColor()\n    jez.runRuneVFX(aToken, jez.getSpellSchool(aItem), color)\n    //--------------------------------------------------------------------------------------------\n    // Build the target list (targetArray) from those that failed saves, tossing out any that are \n    // type Undead or Construct\n    //\n     for (const element of args[0].failedSaves) {\n         let race = jez.getRace(element)\n         if (race.includes(\"construct\")) continue\n         if (race.includes(\"undead\"))    continue\n         targetArray.push(element)\n        //----------------------------------------------------------------------------------------\n        // Build array of Token5e objects from the TokenDocument5e\n        //\n        let fetchedToken = canvas.tokens.placeables.find(ef => ef.id === element.id)\n        jez.log('Token5e fetched by ID', fetchedToken)\n        token5eArray.push(fetchedToken)\n    }\n    jez.log(\"targetArray\", targetArray)\n    jez.log(\"token5eArray\", token5eArray)\n    //--------------------------------------------------------------------------------------------\n    // If no targets remain, post message and exit\n    //\n    if (targetArray.length === 0) {\n        msg = `No effect, all targets saved or are immune`\n        postResults(msg)\n        return\n    }\n    //--------------------------------------------------------------------------------------------\n    // Determine damage to inflict: 1d8 + @mod psychic damage\n    //\n    let damageRoll = new Roll(`1d8 + ${jez.getCastMod(aToken)}`).evaluate({ async: false });\n    game.dice3d?.showForRoll(damageRoll);\n    //--------------------------------------------------------------------------------------------\n    // Apply damage \n    //\n    await new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageRoll.total, \"psychic\", targetArray, \n        damageRoll, { flavor: `Psychic Damage`, itemCardId: args[0].itemCardId })\n    jez.runRuneVFX(targetArray, jez.getSpellSchool(aItem), color)\n    //--------------------------------------------------------------------------------------------\n    // Post completion message\n    //\n    let failedStr = \"\"\n    for (const ELEMENT of targetArray) {\n        if (failedStr) failedStr += `, <b>${ELEMENT.name}</b>`\n        else failedStr = `<b>${ELEMENT.name}</b>`;\n    }\n    msg = `Creatures that failed their saving throws (${failedStr}) must use their reaction (if available) to \n    make a melee weapon attack against one creature of ${aToken.name}'s choice that ${aToken.name}\n    can see.`\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}