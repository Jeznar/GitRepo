{
  "name": "Grasping Root",
  "type": "weapon",
  "img": "Icons_JGB/Monsters/Grasping_Vine.png",
  "data": {
    "description": {
      "value": "<p>Melee Weapon Attack: +9 to hit, reach 15 ft., one creature not&nbsp;<a href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/appendix-a-conditions#Grappled\" data-tooltip-href=\"//www.dndbeyond.com/conditions/6-tooltip?disable-webm=1&amp;disable-webm=1\">grappled</a> by the blight.&nbsp;Hit:&nbsp;The target is&nbsp;<a href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/appendix-a-conditions#Grappled\" data-tooltip-href=\"//www.dndbeyond.com/conditions/6-tooltip?disable-webm=1&amp;disable-webm=1\">grappled</a> (escape DC 15).</p>\n<p>Until the grapple ends, the target takes 9&nbsp;(1d6 + 6)&nbsp;bludgeoning damage at the start of each of its turns.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "quantity": 1,
    "weight": 1,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 15,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "str",
    "actionType": "mwak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d0",
          ""
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "amm": false,
      "hvy": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "lgt": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "ada": false,
      "lod": false,
      "mgc": false,
      "sil": false
    },
    "proficient": true
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "fumbleThreshold": null,
      "effectActivation": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Grasping Root",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Grasping_Root\"\n/*****************************************************************************************\n * Grasping Root is a special ability of the Tree Blight defined in CoS\n * \n * Description (https://www.dndbeyond.com/monsters/tree-blight)\n *   Melee Weapon Attack: +9 to hit, reach 15 ft., one creature not grappled by the blight. \n *   Hit: The target is grappled (escape DC 15). Until the grapple ends, the target takes 9\n *   (1d6 + 6) bludgeoning damage at the start of each of its turns. The root has AC 15 and\n *   can be severed by dealing 6 or more slashing damage to it on one attack. Cutting the \n *   root doesnâ€™t hurt the blight but ends the grapple.\n * \n * Expected Flow of this Implemention\n *  - Verify that one target has been hit\n *  - Summon a new token \"Grasping Root\" at location of the target\n *  - Rename the summoned root for uniqueness\n *  - Initiate a grapple between the root and target by placing appropriate paired debuffs\n *  - Setup a DoT on the target\n *  - Post appropriate summary information\n * \n * 02/16/22 0.1 Creation of Macro\n * 05/02/22 0.2 Update for Foundry 9.x\n * 07/06/22 0.3 Replace native calls with warpgate to spawn in the roots\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet msg = \"\";\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst GRAPPLED_COND = \"Grappled\"\nconst GRAPPLING_COND = \"Grappling\"\nconst RESTRAINED_COND = \"Restrained\"\nconst GRAPPLED_JRNL = `@JournalEntry[${game.journal.getName(GRAPPLED_COND).id}]{Grappled}`\nconst GRAPPLING_JRNL = `@JournalEntry[${game.journal.getName(GRAPPLING_COND).id}]{Grappling}`\nconst RESTRAINED_JRNL = `@JournalEntry[${game.journal.getName(RESTRAINED_COND).id}]{Restrained}`\n\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nconst GAME_RND = game.combat ? game.combat.round : 0;\nconst MINION = \"Grasping Root\"\nconst MINION_NAME = `${aToken.name}'s ${MINION} - ${GAME_RND}`\nlet tCoord = {}     // Will contain coordinate of summoned token\nconst GRAPPLED_ICON = \"Icons_JGB/Conditions/grappling.svg\"\nconst GRAPPLING_ICON = \"Icons_JGB/Conditions/grappling.png\"\nlet chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n// Only for the OnUse execution case.\n//\nif ((args[0]?.tag === \"OnUse\") && (!preCheck())) return;\n//-------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\njez.log(`Call the apppriate main function based on mode. ${args[0]}  ${args[0]?.tag}`)\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\njez.log(\"\")\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************/\n\n/***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    //----------------------------------------------------------------------------------------------\n    // Was only one target targeted?\n    //\n    if (game.user.targets.ids.length !== 1) {\n        msg = `Targeted ${game.user.targets.ids.length} tokens, please target a single token.`;\n        console.log(msg);\n        ui.notifications.warn(msg)\n        return (false);\n    }\n    //----------------------------------------------------------------------------------------------\n    // Was a target hit? (always should be, but just in case)\n    //\n    if (args[0].hitTargets.length !== 1) {\n        msg = `Targets hit: ${args[0].hitTargets.length}, nmust be one.`;\n        console.log(msg);\n        ui.notifications.warn(msg)\n        return (false);\n    }\n    //----------------------------------------------------------------------------------------------\n    // Is the target already being afflicted by this ability?  It can only have one root on it.\n    //\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    jez.log('tToken.actor.effects', tToken.actor.effects)\n    let alreadyGrappled = tToken.actor.effects.find(i => i.data.label === GRAPPLED_COND &&\n        i.sourceName === aItem.name);\n    if (alreadyGrappled) {\n        msg = `${tToken.name} is already already grappled by ${aToken.name}'s ${aItem.name} can not \n            do this twice, simultaneously.`\n        ui.notifications.info(msg)\n        jez.log(msg)\n\n        jez.addMessage(chatMsg, { color: \"darkblue\", fSize: 15, msg: msg, tag: \"saves\" })\n\n        return (false)\n    } jez.log(\"all clear to continue.\")\n    return (true)\n}\n\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n * \n * https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki/Sequencer-Effect-Manager#end-effects\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let pairedId = args[1];\n    let pairedEffect = args[2];\n    let pairedToken = canvas.tokens.placeables.find(ef => ef.id === pairedId)\n    // Remove a \"paired\" effect when either of the partner effects is deleted\n    jez.log(`Attempt to remove ${pairedEffect} from ${pairedToken.name} as well.`)\n    let pairedEffectObj = pairedToken.actor.effects.find(i => i.data.label === pairedEffect);\n    if (pairedEffectObj) {\n        jez.log(`Attempting to remove ${pairedEffectObj.id} from ${pairedToken.actor.uuid}`)\n        MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: pairedToken.actor.uuid, effects: [pairedEffectObj.id] });\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(`   Targeted '${tToken?.name}, actor name ${tActor?.name}'`, tToken);\n    //----------------------------------------------------------------------------------------------\n    // Get the x,y coordinates of the target token to use as anchor for summoned creature\n    //\n    tCoord = { x: tToken.center.x, y: tToken.center.y }\n    jez.log(`Summoning coordinate ${tCoord.x}, ${tCoord.y}`)\n    //----------------------------------------------------------------------------------------------\n    // Summon the the new actor to the scene\n    //\n    let sToken = await executeSummon(MINION, tCoord.x, tCoord.y, MINION_NAME)\n    //----------------------------------------------------------------------------------\n    // Modify the GRAPPLING condition to include an Overtime DoT element and apply\n    //\n    let statMod = jez.getStatMod(aToken,\"str\")\n    let effectData = game.dfreds.effectInterface.findEffectByName(GRAPPLED_COND).convertToObject();\n    let overTimeVal=`turn=start,label=\"Grasping Root\",damageRoll=1d6+${statMod},saveMagic=true,damageType=bludgeoning`\n    effectData.changes.push( { key: 'flags.midi-qol.OverTime', mode: jez.OVERRIDE, value:overTimeVal , priority: 20 })\n    game.dfreds.effectInterface.addEffectWith({ effectData: effectData, uuid: tToken.actor.uuid, origin: sToken.actor.uuid });\n    //----------------------------------------------------------------------------------\n    // Apply the GRAPPLING Condition\n    //\n    jezcon.add({ effectName: GRAPPLING_COND, uuid: sToken.actor.uuid, origin: sToken.actor.uuid })\n    //----------------------------------------------------------------------------------\n    // Find the two just added effect data objects so they can be paired, to expire \n    // together.\n    //\n    await jez.wait(100)\n    let tEffect = tToken.actor.effects.find(ef => ef.data.label === GRAPPLED_COND && ef.data.origin === sToken.actor.uuid)\n    if (!tEffect) return jez.badNews(`Sadly, there was no Grappled effect from ${sToken.name} found on ${tToken.name}.`, \"warn\")\n    let oEffect = sToken.actor.effects.find(ef => ef.data.label === GRAPPLING_COND)\n    if (!oEffect) return jez.badNews(`Sadly, there was no Grappling effect found on ${sToken.name}.`, \"warn\")\n    const GM_PAIR_EFFECTS = jez.getMacroRunAsGM(\"PairEffects\")\n    if (!GM_PAIR_EFFECTS) { return false }\n    await jez.wait(100)\n    await GM_PAIR_EFFECTS.execute(sToken.id, oEffect.data.label, tToken.id, tEffect.data.label)\n    //-------------------------------------------------------------------------------\n    // Create an Action Item to allow the target to attempt escape\n    //\n    const GM_MACRO = jez.getMacroRunAsGM(\"GrappleEscapeFixedDC\")\n    jez.log(\"GM_MACRO\",GM_MACRO)\n    if (!GM_MACRO) { return false }\n    await GM_MACRO.execute(\"create\", sToken.document.uuid, tToken.document.uuid, sToken.actor.uuid, 15)\n\n\n\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/*****************************************************************************************\n *  executeSummon call the runAsGM macro to place the summoned root creature * \n *****************************************************************************************/\nasync function executeSummon(minion, x, y, newname) {\n    let updates = {\n        token: { name: newname },\n        actor: { name: newname },\n    }\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n        pre: async (template) => {\n            jez.vfxPreSummonEffects(template, { color: \"*\", scale: 1, opacity: 1 });\n            await warpgate.wait(500);\n        },\n        post: async (template) => {\n            jez.vfxPostSummonEffects(template, { color: \"*\", scale: 1, opacity: 1 });\n            await warpgate.wait(500);\n        }\n    };\n    jez.log(\"About to call Warpgate.spawnAt\")\n    jez.suppressTokenMoldRenaming()\n    let returned = await warpgate.spawnAt({ x: x, y: y }, minion, updates, CALLBACKS, OPTIONS);\n    jez.log(\"returned\", returned)\n    summonedID = returned[0] // The token ID of the summoned sphere\n    summonedToken = canvas.tokens.placeables.find(ef => ef.id === summonedID)\n    return summonedToken\n}\n/***************************************************************************************************\n * Find an owned token by name on current scene.  Return the token or null if not found\n ***************************************************************************************************/\nasync function findTokenByName(name) {\n    const FUNCNAME = \"findTokenByName(name)\";\n    jez.log(`---- Starting ${FUNCNAME} -----`)\n    let targetToken = null\n    let counter = 0;\n    //----------------------------------------------------------------------------------------------\n    // Loop through tokens on the canvas looking for the one we seek, check each name match for a \n    // coordinated match.  Return a match or null.\n    //\n    let ownedTokens = canvas.tokens.ownedTokens\n    let foundToken = null\n    for (let i = 0; i < ownedTokens.length; i++) {\n        jez.log(`  ${i}) ${ownedTokens[i].name}`, ownedTokens[i]);\n        if (name === ownedTokens[i].name) {\n            jez.log(`Eureka I found it! Maybe... (${++counter}`)\n            targetToken = ownedTokens[i]\n            // See if name match is at the correct coordinates\n            if (ownedTokens[i].center.x === tCoord.x && ownedTokens[i].center.y === tCoord.y) {\n                jez.log(\"...Why yes, I did.\", ownedTokens[i])\n                foundToken = ownedTokens[i]\n                break;\n            }\n        }\n    }\n    if (foundToken) jez.log(`${counter} ${name}'s token(s) found`, foundToken)\n    else jez.log(`${name}s token was not found :-(`)\n    jez.log(\"-----------------------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return (foundToken);\n}\n/***************************************************************************************************\n * Apply the Grappling Condition to the initiating Root\n ***************************************************************************************************/\n// async function applyGrappling(token1, token2) {\n//     let constrictingEffect = [{\n//         label: GRAPPLING_COND,\n//         icon: GRAPPLING_ICON,\n//         origin: LAST_ARG.uuid,\n//         disabled: false,\n//         duration: { rounds: 99, startRound: GAME_RND },\n//         // Sadly, DAE triggers the following even if zero damage gets through to the target\n//         // flags: { dae: { itemData: aItem, specialDuration: [\"isDamaged\"] } },\n//         changes: [\n//             { key: `flags.gm-notes.notes`, mode: CUSTOM, value: \"Can only constrict one target at a time\", priority: 20 },\n//             { key: `macro.itemMacro`, mode: CUSTOM, value: `${token2.id} ${GRAPPLED_COND}`, priority: 20 },\n//         ]\n//     }]\n//     await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: token1.actor.uuid, effects: constrictingEffect });\n// }\n/***************************************************************************************************\n * Apply the Grappled Condition to the target token\n ***************************************************************************************************/\n// COOL-THING: Midi Overtime used to apply a DoT effect\n// async function applyGrappled(token1, token2) {\n//     let overTimeValue = `turn=start,label=${aItem.name},damageRoll=1d6+6,damageType=bludgeoning`\n//     let restrainedEffect = [{\n//         label: GRAPPLED_COND,\n//         icon: GRAPPLED_ICON,\n//         // origin: aActor.uuid,\n//         origin: LAST_ARG.uuid,\n//         disabled: false,\n//         duration: { rounds: 99, startRound: GAME_RND },\n//         changes: [\n//             { key: `flags.VariantEncumbrance.speed`, mode: DOWNGRADE, value: 1, priority: 20 },\n//             { key: `data.attributes.movement.walk`, mode: DOWNGRADE, value: 1, priority: 20 },\n//             { key: `data.attributes.movement.swim`, mode: DOWNGRADE, value: 1, priority: 20 },\n//             { key: `data.attributes.movement.fly`, mode: DOWNGRADE, value: 1, priority: 20 },\n//             { key: `data.attributes.movement.climb`, mode: DOWNGRADE, value: 1, priority: 20 },\n//             { key: `data.attributes.movement.burrow`, mode: DOWNGRADE, value: 1, priority: 20 },\n//             { key: `macro.itemMacro`, mode: CUSTOM, value: `${token2.id} ${GRAPPLING_COND}`, priority: 20 },\n//             { key: `flags.midi-qol.OverTime`, mode: OVERRIDE, value: `${overTimeValue}`, priority: 20 }\n//         ]\n//     }]\n//     await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: token1.actor.uuid, effects: restrainedEffect });\n// }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.jxfXYBRWJtjTdehy"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "gm-notes": {
      "notes": "<p>The root has AC 15 and can be severed by dealing 6 or more slashing damage to it on one attack. Cutting the root doesn&rsquo;t hurt the blight but ends the grapple.</p>"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}