{
  "name": "Threat Display",
  "type": "feat",
  "img": "Icons_JGB/Monster_Features/Threat_Display.png",
  "data": {
    "description": {
      "value": "<p>As a bonus action, force a creature within 15 feet make a <strong>wisdom saving throw</strong> vs Caster DC or become @JournalEntry[tjg0x0jXlwvbdI9h]{Frightened} until the end of the creature's next turn. The targeted creature must hear the treat for it to be effective.</p>\n<p>If the target is smaller, the save is made with diadvantage.  If the target is two categories larger, it has advantage.  If it is three or more larger, it is immune.</p>\n<p>Creatures affected by the unwavering loyalty trait automatically succed on this saving throw. Once a creature has saved against this effect it is immune for the combat.</p>\n<p><strong>FoundryVTT: </strong>Save DC is Caster DC, typically STR or CHA</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 15,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 12,
      "scaling": "cha"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "autoanimations": {
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false
      },
      "override": false,
      "allSounds": {
        "item": {
          "enableAudio": true,
          "file": "worlds/travels-in-barovia/audio/002_-_Animal/000_-_GalahadBarking.mp3",
          "delay": 0,
          "volume": 0.5
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      }
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.FqGrgHnhzmURLrEZ"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Threat Display",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Threat_Display_0.2.js\"\n/************************************************************\n * Apply the \"Frighted\" condition if target fails save.... \n * \n * It would be nice for the macro to post results in addition.\n * \n * 10/29/21 0.1 JGB created from Grapple_Initiate_0.8\n * 05/03/22 0.2 JGB Updated for FoundryVTT 9.x\n ***********************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nlet msg = \"\";\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//----------------------------------------------------------------------------------\n// Setup variables/constants specific to this macro\n//\nconst CONDITION = \"Frightened\";\nconst SAVE_TYPE = \"wis\";\nconst COND_ICON = \"Icons_JGB/Conditions/Scared.png\"\nconst IMMUNE    = \"Frightened, Immune (${aToken.name))\"\nconst IMMU_ICON = \"Icons_JGB/Conditions/Scared_Immune.png\"\nconst SAVE_DC   = aActor.data.data.attributes.spelldc;\nconst FRIGHTENED_JRNL = \"@JournalEntry[tjg0x0jXlwvbdI9h]{Frightened}\"\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    jez.log(` tToken ${tToken?.name} `, tToken);\n    let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    //-------------------------------------------------------------------------------\n    // Verify that a single token to be acted upon is targeted\n    if (game.user.targets.ids.length != 1) {\n        msg = `You must target a single token to be acted upon. Targeted \n            ${game.user.targets.ids.length} tokens`\n        jez.log(msg);\n        jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n        return\n    }\n    jez.log(` Player: ${aToken.name}, tToken: ${tToken.name}`);\n    //----------------------------------------------------------------------------------\n    // Is the target in range?\n    //\n    const ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\n    let maxRange = jez.getRange(aItem, ALLOWED_UNITS)\n    if (!maxRange) {\n        msg = `Range is 0 or incorrect units on ${aItem.name} data card`;\n        jez.log(msg);\n        jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n        return(false)\n    }\n    // maxRange obtained earlier with a jez.getRange(...) call\n    if (!jez.inRange(aToken, tToken, maxRange)) {\n        msg = `${tToken.name} is not in range for ${aItem.name}`;\n        jez.log(msg);\n        jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n        return (false);\n    }\n    //----------------------------------------------------------------------------------\n    // End if target is immune to this frighten\n    //\n    if (tActor.effects.find(ef => ef.data.label === IMMUNE)) {\n        msg = `${tToken.name} is immune to ${aToken.name}'s ${aItem.name}.`;\n        jez.log(msg);\n        msg = `${tToken.name} has recently resisted ${aToken.name}'s ${aItem.name} \n            and is currently immune`\n        jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n        return;\n    }\n    //----------------------------------------------------------------------------------\n    // End if target is already Frightened\n    //\n    if (tActor.effects.find(ef => ef.data.label === CONDITION)) {\n        msg = `${tToken.name} is already ${FRIGHTENED_JRNL}`\n        jez.log(msg);\n        jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n        return;\n    }\n    //----------------------------------------------------------------------------------\n    // Obtain the size of the aActor and tActor to determine advantage/disadvantage\n    // \n    jez.log(\"await jez.getSize(aToken)\", await jez.getSize(aToken))\n\n    let aTokenSizeValue = (await jez.getSize(aToken)).value\n    let tTokenSizeValue = (await jez.getSize(tToken)).value\n    jez.log(`${aToken.name} size = ${aTokenSizeValue}, ${tToken.name} size = ${tTokenSizeValue}`)\n    if (aTokenSizeValue + 3 <= tTokenSizeValue) {\n        msg = `${tToken.name} is too large to be frightend by ${aToken.name}`\n        jez.log(msg);\n        await jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n        return;\n    }\n    //----------------------------------------------------------------------------------\n    // Build data structure to do the save\n    //\n    let saved = true;\n    let flavor = `${tToken.name} attempted ${SAVE_TYPE} DC${SAVE_DC} save to avoid \n    ${CONDITION} condition.`\n    let saveInput = {\n        request: \"save\",\n        targetUuid: tActor.uuid,\n        ability: SAVE_TYPE,\n        options: { flavor: flavor, chatMessage: true, fastForward: true }\n    }\n    //----------------------------------------------------------------------------------\n    // If the actor is larger than the target it has advantage.  If it is 2 size \n    // categories smaller it has disdvantage.  If it is 3 or more smaller it autofails.\n    if (aTokenSizeValue > tTokenSizeValue) saveInput.options =\n        { flavor: flavor, chatMessage: true, fastForward: true, disadvantage: true };\n    else if (aTokenSizeValue === tTokenSizeValue-2) saveInput.options = \n        { flavor: flavor, chatMessage: true, fastForward: true, advantage: true }\n\n    /*let saveObject = await MidiQOL.socket().executeAsGM(\"rollAbility\", {\n        request: \"save\",\n        targetUuid: tActor.uuid,\n        ability: SAVE_TYPE,\n        options: { flavor: flavor, chatMessage: true, fastForward: true }\n    }); */ \n    let saveObject = await MidiQOL.socket().executeAsGM(\"rollAbility\", saveInput);\n    if (saveObject.total < SAVE_DC) saved = false;\n    //----------------------------------------------------------------------------------\n    // Apply Frightened Condition if save failed or immune if tToken saved\n    //\n    let specDur = [\"newDay\", \"longRest\", \"shortRest\"]\n    if (!saved) {\n        specDur.push(\"turnEnd\")\n        jez.log(`Player Wins - Apply ${CONDITION}`);\n        let effectData = {\n            label: CONDITION,\n            icon: COND_ICON,\n            origin: LAST_ARG.uuid,\n            disabled: false,\n            duration: { rounds: 99, startRound: GAME_RND },\n            flags: { dae: { itemData: aItem, specialDuration: specDur } },\n            changes: [\n                { key: `flags.midi-qol.disadvantage.ability.check.all`, mode: ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.disadvantage.attack.all`,        mode: ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.disadvantage.skill.check.all`,   mode: ADD, value: 1, priority: 20 }\n            ]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:tToken.actor.uuid, effects: [effectData] });\n        msg = `${tToken.name} now has ${FRIGHTENED_JRNL} from ${aToken.name}'s ${aItem.name} ability.`;\n    } else {\n        jez.log(`tToken Wins - Apply ${IMMUNE}`);\n        let specDur = [\"newDay\", \"longRest\", \"shortRest\"]\n        let effectData = {\n            label: IMMUNE,\n            icon: IMMU_ICON,\n            origin: LAST_ARG.uuid,\n            disabled: false,\n            duration: { rounds: 99, startRound: GAME_RND },\n            flags: { dae: { itemData: aItem, specialDuration: specDur } },\n            changes: [\n                { key: `flags.gm-notes.notes`, mode: CUSTOM, value:`Immune to ${aToken.name}} ${CONDITION}`, priority: 20 },\n            ]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [effectData] });\n        msg = `${tToken.name} now is immune to ${aToken.name}'s ${aItem.name} for the duration of the combat.`;\n    }\n    jez.log(\"final message\", msg)\n    await jez.addMessage(chatMsg, {color:\"dodgerblue\", fSize:15, msg:msg, tag: \"saves\" })\n    return\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}