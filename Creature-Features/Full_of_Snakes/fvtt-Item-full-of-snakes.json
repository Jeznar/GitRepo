{
  "name": "Full of Snakes",
  "type": "feat",
  "img": "Tokens/Monsters/Swarm_of_Snakes/Swarm_of_Poisonous_Snakes-Avatar.webp",
  "data": {
    "description": {
      "value": "<p>When the corpse is reduced to 0 hit points, it splits open, disgorging a @Actor[NmFiMzM2ODg2ZTI3]{Swarm of Poisonous Snakes} that attack immediately.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Running this macro will spawn a swarm if the using token is dead.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": "Actor just died"
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Full of Snakes",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Full_of_Snakes.0.2.js\"\nconst TL = 0;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implement the full of snakes ability\n * \n *   When the corpse is reduced to 0 hit points, it splits open, disgorging a  Swarm of Poisonous Snakes that attack immediately.\n * \n * 10/04/23 0.1 Creation\n * 10/04/23 0.2 Added random choice of three swarms\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.log(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst MINIONS = ['Swarm of Poisonous Snakes', 'Swarm of Garden Snakes', 'Swarm of Constricting Snakes' ]\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.log(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.log(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Is our current actor dead?  That is does it have zero health?\n    //\n    if (aActor.data.data.attributes.hp.value > 0) return postResults(`Sorry(?), ${aToken.name} is not dead!`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Spin through the MINIONS, getting data objects for all that exist, log those missing.\n    //\n    let minions = []\n    for (i = 0; i < MINIONS.length; i++) {\n        const MINION_DATA = await game.actors.getName(MINIONS[i])\n        if (MINION_DATA) minions.push(MINION_DATA)\n        else jez.badNews(`Could not find actor template for \"${MINIONS[i]}\"`,'w')\n    }\n    if (minions.length === 0) return jez.badNews(`Could not find any actor templates`,'e')\n    else if (TL > 1) jez.log(`${TAG} ${minions.length} minion options`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Randomly pick a minion and put it in constants used for summon\n    //\n    const INDEX = Math.floor(Math.random()*minions.length)\n    const MINION_DATA = minions[INDEX]\n    if (TL > 2) jez.log(`${TAG} MINION_DATA`, MINION_DATA)\n    const MINION = MINION_DATA.name\n    if (TL > 2) jez.log(`${TAG} MINION`, MINION)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build the dataObject for our summon call, all we need to do is customize the name and elevation\n    //\n    let argObj = {\n        minionName: MINION_DATA.data.token.name,\n        img: MINION_DATA?.img ?? aItem.img,\n        defaultRange: 5    // Keep the up chucked undead kinda close\n    }\n    if (TL > 2) jez.log(`${TAG} argObj`, argObj)\n    // Do the actual summon\n    summonedMinionId = await jez.spawnAt(MINION, aToken, aActor, aItem, argObj)\n    if (TL > 2) jez.log(`${TAG} summonedMinionId`, summonedMinionId)\n    // Add our summons to combat tracker immediately after the current actor\n    // first we need the current actor in combat...\n    //\n    const CURRENT_ACTOR = game.combat?.combatant?.actor   // Returns an Actor5e\n    // const CURRENT_INIT_VALUE = aToken?.combatant?.data?.initiative\n    const CURRENT_INIT_VALUE = CURRENT_ACTOR?.parent?.combatant?.data?.initiative\n    if (TL > 1) jez.log(`${TAG} ${aToken.name} current initiative`, CURRENT_INIT_VALUE);\n    if (CURRENT_INIT_VALUE) {\n        const SPAWN_INT = CURRENT_INIT_VALUE - 1 / 1000;\n        await jez.combatAddRemove('Add', summonedMinionId[0], { traceLvl: TL })\n        await jez.wait(250)\n        await jez.combatInitiative(summonedMinionId[0], { formula: SPAWN_INT, traceLvl: 0 })\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 0) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Place an zombie under control of the flower near the flower \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function placeUndead(aToken, options = {}) {\n    const FUNCNAME = \"placeUndead(aToken, options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"aToken\", aToken, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let MINION = \"Zombie\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n\n\n\n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.73TrQkEvN4gZgdXn"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}