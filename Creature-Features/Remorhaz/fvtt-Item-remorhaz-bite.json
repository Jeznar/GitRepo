{
  "name": "Remorhaz Bite",
  "type": "weapon",
  "img": "systems/dnd5e/icons/skills/red_29.jpg",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% bites at its target, attempting to grapple it with its huge mouth. A successful bite may result in the target being swallowed.</p>\n<section class=\"secret\">\n<p><em>Melee Weapon Attack:</em> +11 to hit, reach 10 ft., one target. <em>Hit:</em> 40 (6d10 + 7) piercing damage plus 10 (3d6) fire damage.</p>\n<p>If the target is a creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the %TOKENNAME% can't bite any other target.</p>\n</section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Basic Rules pg 341",
    "quantity": 1,
    "weight": 0,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 10,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "str",
    "actionType": "mwak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "flat"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "rch": true,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "ada": false,
      "mgc": false,
      "sil": false
    },
    "proficient": true,
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": null
    }
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "dndbeyond": {}
    },
    "monsterMunch": {
      "titleHTML": "<strong>Bite.</strong>",
      "fullName": "Bite."
    },
    "midi-qol": {
      "fumbleThreshold": null,
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Remorhaz Bite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Remorhaz_Bite.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Initiate a grapple as a result of a successful Remorhaz_Bite. The grapple is automatically applied\n * if the target is hit.\n * \n * 09/15/23 0.1 JGB created from Grapple_Initiate_1.3\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst STOMACH = 'Icons_JGB/Conditions/stomach.webp'\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0]?.targets?.length !== 1)\n        return jez.badNews(`Illegal number of targets.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    if (args[0].hitTargets.length !== 1)\n        return jez.badNews(`Target was not hit, no effect.`, 'i')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Function Variables\n    //\n    let isGrappling = false;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Make sure we tried to bite exactly one target and we hit it.\n    //\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If aToken is already grappling make sure it is trying to bite the target it has grappled\n    //\n    const GRAPPLING_EFFECT = aToken.actor.effects.find(ef => ef.data.label === \"Grappling\")\n    if (GRAPPLING_EFFECT) {\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} is already Grappling: `, GRAPPLING_EFFECT);\n        isGrappling = true;\n        // Loop through GRAPPLING_EFFECT.data.changes looking for a value that starts with Remove_Paired_Effect and then a UUID\n        // Example Value: Remove_Paired_Effect Scene.4tpZknfj8JM7LtyZ.Token.WXE1sSUaNcYG3LlO.ActiveEffect.fug05lrijjcgz0s5\n        let grappledUuid = null;\n        let isRightTarget = false;\n        for (let i = 0; i < GRAPPLING_EFFECT.data.changes.length; i++) {\n            const CHANGE_TOKENS = GRAPPLING_EFFECT.data.changes[i].value.split(\" \")\n            if (CHANGE_TOKENS[0] !== 'Remove_Paired_Effect') continue;  // If first token isn't what we need go to next line\n            if (CHANGE_TOKENS.length !== 2) continue;                   // Must have two tokens on line we seek\n            grappledUuid = CHANGE_TOKENS[1];                            // Second token is our effect UUID that contains UUID\n            endOfTargetPhrase = grappledUuid.indexOf(\".ActiveEffect.\")  // Get position of end of our Uuid\n            grappledUuid = grappledUuid.slice(0, endOfTargetPhrase)\n            if (TL > 1) jez.trace(`${TAG} Effect Info`, 'Target UUID', tToken.actor.uuid, 'Grappled UUID', grappledUuid)\n            if (grappledUuid === tToken.actor.uuid) {\n                isRightTarget = true;\n                break;\n            }\n        }\n        if (TL > 1) jez.trace(`${TAG} isRightTarget: `, isRightTarget)\n        if (!isRightTarget) {\n            msg = `${tToken.name} is not in ${aToken.name}'s mouth, and can not be bitten.`\n            postResults(msg)\n            return jez.badNews(msg, \"i\")\n        }\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply damage to our target, first piercing.\n    //\n    let numDice = 6;\n    if (args[0].isCritical) numDice = numDice * 2;\n    let dRoll = await new Roll(`${numDice}d10[piercing] + ${aActor.data.data.abilities.str?.mod}`).roll({ async: true });\n    await game.dice3d?.showForRoll(dRoll);\n    new MidiQOL.DamageOnlyWorkflow(aActor, aToken, dRoll.total, \"piercing\", [tToken], dRoll, {\n        flavor: `${CONFIG.DND5E.damageTypes['piercing']}`, itemCardId: args[0].itemCardId\n    })\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Now the fire damage.\n    //\n    numDice = 3;\n    if (args[0].isCritical) numDice = numDice * 2;\n    dRoll = await new Roll(`${numDice}d6[fire]`).roll({ async: true });\n    dRoll.toMessage({ speaker: ChatMessage.getSpeaker({ actor }) });\n    MidiQOL.applyTokenDamage([{ damage: dRoll.total, type: \"fire\" }], dRoll.total, new Set([tToken]), null, new Set());\n    postResults(`Additional ${dRoll.total} fire damage.`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Now the fire damage.\n    //\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If target was previously grappled, check to see if it becomes swallowed and proceed with that, exiting after.\n    //\n    // RAW Description\n    //   The remorhaz makes one bite attack against a Medium or smaller creature it is grappling. If the attack hits, that creature \n    //   takes the bite's damage and is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it\n    //   has total cover against attacks and other effects outside the remorhaz, and it takes 21 (6d6) acid damage at the start of \n    //   each of the remorhaz's turns.\n    //\n    // I'm going to change medium or smaller to be 2 sizes or more smaller than the aActor, which is the same unless something \n    // chnaged the size of the aActor.  DoT is applied at start of tActor's not aActor's turn (cause it is easier)\n    //\n    if (isGrappling) {\n        let aTokenSizeValue = (await jez.getSize(aToken)).value\n        let tTokenSizeValue = (await jez.getSize(tToken)).value\n        if (TL > 1) jez.trace(`${TAG} Token Sizes: `, 'Active Token: ', aTokenSizeValue, 'Target Token: ', tTokenSizeValue)\n        if (aTokenSizeValue >= tTokenSizeValue + 2) { // Target can and will be swallowed\n            let ceDesc = `Swallowed by ${aToken.name}.`\n            let overTimeVal = `turn=start,label=Digestive juices,damageRoll=6d6,damageType=acid`\n            let effectData = {\n                label: 'Swallowed',\n                icon: STOMACH,\n                origin: L_ARG.uuid,\n                disabled: false,\n                flags: {\n                    convenientDescription: ceDesc,\n                    core: {\n                        overlay: true,\n                        statusId: 'Force Display'\n                    }\n                },\n                changes: [\n                    { key: `macro.CE`, mode: jez.CUSTOM, value: 'Blinded', priority: 20 },\n                    { key: `macro.CE`, mode: jez.CUSTOM, value: 'Restrained', priority: 20 },\n                    { key: `flags.midi-qol.OverTime`, mode: jez.OVERRIDE, value: overTimeVal, priority: 20 },\n                ]\n            };\n            await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [effectData] });\n            // Clear the grappling condition\n            await GRAPPLING_EFFECT.delete();\n            await jez.wait(250);    // Seemingly needed to allow the completion of paired effect removal\n            // Add a tracking effect to the aActor for this swallow\n            ceDesc = `Digesting ${tToken.name}`\n            effectData = {\n                label: `Digesting ${tToken.name}`,\n                icon: STOMACH,\n                origin: L_ARG.uuid,\n                disabled: false,\n                flags: {\n                    convenientDescription: ceDesc,\n                    core: {\n                        statusId: 'Force Display'\n                    }\n                },\n                changes: [\n                    { key: `flags.gm-notes.notes`, mode: jez.ADD, value: `Digesting: ${tToken.name}`, priority: 20 },\n                ]\n            };\n            await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });\n            // Pair the swallowed/digesting effects so they expire together\n            // await jez.wait(500)\n            let tEffect = tToken.actor.effects.find(ef => ef.data.label === \"Swallowed\" && ef.data.origin === aItem.uuid)\n            if (!tEffect) return jez.badNews(`Sadly, there was no Swallowed effect from ${aToken.name} found on ${tToken.name}.`, \"warn\")\n            let oEffect = aToken.actor.effects.find(ef => ef.data.label === `Digesting ${tToken.name}`)\n            if (!oEffect) return jez.badNews(`Sadly, there was no Digesting ${tToken.name} effect found on ${aToken.name}.`, \"warn\")\n            const GM_PAIR_EFFECTS = jez.getMacroRunAsGM(\"PairEffects\")\n            if (!GM_PAIR_EFFECTS) { return false }\n            // await jez.wait(500)\n            await GM_PAIR_EFFECTS.execute(oEffect.uuid, tEffect.uuid)\n            postResults(`${tToken.name} has been swallowed.  Digestion will now begin.`)\n            return  // End evaluation for newly swallowed target.\n        }\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply grappled conditions, if not already applied\n    //\n    if (TL > 1) jez.trace(`${TAG} Apply grappled condition`);\n    await jezcon.add({ effectName: 'Grappled', uuid: tToken.actor.uuid, origin: aActor.uuid })\n    msg = `<b>${aToken.name}</b> has grabed (grappled) <b>${tToken.name} in its mouth </b>`\n    if (TL > 1) jez.trace(`${TAG} message: `, msg);\n    postResults(msg);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply Grappling Condition\n    //\n    if (TL > 1) jez.trace(`${TAG} Apply grappling condition`);\n    // await jez.wait(250)\n    await jezcon.add({ effectName: 'Grappling', uuid: aToken.actor.uuid })\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Find the two just added effect data objects so they can be paired, to expire together.\n    //\n    await jez.wait(250)\n    let tEffect = tToken.actor.effects.find(ef => ef.data.label === \"Grappled\" && ef.data.origin === aActor.uuid)\n    if (!tEffect) return jez.badNews(`Sadly, there was no Grappled effect from ${aToken.name} found on ${tToken.name}.`, \"warn\")\n    let oEffect = aToken.actor.effects.find(ef => ef.data.label === \"Grappling\")\n    if (!oEffect) return jez.badNews(`Sadly, there was no Grappling effect found on ${aToken.name}.`, \"warn\")\n    if (TL > 1) jez.trace(`${TAG} Grappling Effects`, `tEffect: `, tEffect, `oEffect`, oEffect);\n    const GM_PAIR_EFFECTS = jez.getMacroRunAsGM(\"PairEffects\")\n    if (!GM_PAIR_EFFECTS) { return false }\n    // await jez.wait(500)\n    await GM_PAIR_EFFECTS.execute(oEffect.uuid, tEffect.uuid)\n    //-------------------------------------------------------------------------------\n    // Create an Action Item to allow the target to attempt escape\n    //\n    const GM_MACRO = jez.getMacroRunAsGM(jez.GRAPPLE_ESCAPE_MACRO)\n    if (!GM_MACRO) { return false }\n    await GM_MACRO.execute(\"create\", aToken.document.uuid, tToken.document.uuid, aToken.actor.uuid)\n}\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}