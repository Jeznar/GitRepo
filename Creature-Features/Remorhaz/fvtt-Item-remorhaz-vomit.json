{
  "name": "Remorhaz Vomit",
  "type": "feat",
  "img": "Icons_JGB/Conditions/Vomitting.webp",
  "data": {
    "description": {
      "value": "<p>If the %TOKENNAME% takes 30 damage or more on a single turn from a creature inside it, the %TOKENNAME% must succeed on a <strong>DC 15 CON Saving</strong> throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the %TOKENNAME%.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": "Takes 30+ damage from single creature in one turn"
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": 15,
      "scaling": "flat"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.rZSoWCNIUKleeaDn"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Remorhaz Vomit",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Remorhaz_Vomit.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Initiate a grapple as a result of a successful Remorhaz_Bite. The grapple is automatically applied\n * if the target is hit.\n * \n * 09/16/23 0.1 JGB created from Remorhaz_Bite.0.1\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\n// const STOMACH = 'Icons_JGB/Conditions/stomach.webp'\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n// async function preCheck() {\n//     if (args[0]?.targets?.length !== 1)\n//         return jez.badNews(`Illegal number of targets.  ${args[0]?.targets?.length} were targeted.`, 'w')\n//     if (args[0].hitTargets.length !== 1)\n//         return jez.badNews(`Target was not hit, no effect.`, 'i')\n//     return true\n// }\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Function Variables\n    //\n    // let isGrappling = false;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If saving throw was made return with posted message.\n    //\n    if (args[0].failedSaves.length !== 1)\n        return postResults(`${aToken.name} struggles a bit but manages to keep the content of its stomach down.`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Loop through all effects that begin with \"Digesting\" \n    //\n    let digestingEffect = aToken.actor.effects.find(ef => ef.data.label.startsWith(\"Digesting\"))\n    let targetUuid = null;\n    let vomittedNames = [];\n    while (digestingEffect) {\n        if (TL > 1) jez.trace(`${TAG} *** Digesting Effect: `, digestingEffect);\n        targetUuid = null;  // Remove any carryover value\n        // Dig into the effects to extract the UUID of our target, looking for a value that is like this:\n        //  value: \"Remove_Paired_Effect Scene.4tpZknfj8JM7LtyZ.Token.WXE1sSUaNcYG3LlO.ActiveEffect.xjudy7ai2poqac2o\"\n        for (let i = 0; i < digestingEffect.data.changes.length; i++) {\n            const CHANGE_TOKENS = digestingEffect.data.changes[i].value.split(\" \")\n            jez.trace(`${TAG} *** ${i} Processing change line: `, CHANGE_TOKENS);\n            if (CHANGE_TOKENS[0] === 'Digesting:' && CHANGE_TOKENS.length >= 2) {  // If first token is Digesting extract the name \n                vomittedNames.push(digestingEffect.data.changes[i].value.slice(10, digestingEffect.data.changes[i].value.length));\n                if (TL > 1) jez.trace(`${TAG} *** ${i} New Vomited Token Name: `, CHANGE_TOKENS[1]);\n            }\n            else if (CHANGE_TOKENS[0] === 'Remove_Paired_Effect' && CHANGE_TOKENS.length === 2) {\n                targetUuid = CHANGE_TOKENS[1];                            // Second token is our effect UUID that contains UUID\n                endOfTargetPhrase = targetUuid.indexOf(\".ActiveEffect.\")  // Get position of end of our Uuid\n                targetUuid = targetUuid.slice(0, endOfTargetPhrase)\n                if (TL > 1) jez.trace(`${TAG} *** ${i}  New Vomited Token UUID: `, targetUuid);\n            } else if (TL > 1) jez.trace(`${TAG} *** ${i} Skipping change line: `, digestingEffect.data.changes[i].value);\n        }\n        // Slap a prone on vomitted token\n        await jezcon.add({ effectName: 'Prone', uuid: targetUuid, origin: aActor.uuid })\n        // Delete the effect\n        await digestingEffect.delete()\n        // Grab the next effect, if any\n        digestingEffect = aToken.actor.effects.find(ef => ef.data.label.startsWith(\"Digesting\"))\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build completion message\n    //\n    if (vomittedNames.length > 0) {\n        msg = `${aToken.name} retches and vomits forth:` + '<br>'\n        for (let i = 0; i < vomittedNames.length; i++) msg += vomittedNames[i] + '<br>';\n        if (vomittedNames.length === 1) msg += `who lands prone.`\n        else msg += `<br> All of whom land prone.`\n        postResults(msg)\n    }\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}