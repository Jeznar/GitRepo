{
  "name": "Gauth Eye Rays",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/yellow_26.jpg",
  "data": {
    "description": {
      "value": "<p>The gauth shoots three of its magical eye rays at random (no duplicates), choosing one to three targets it can see within 120 feet of it.&nbsp;</p>\n<p>See <a href=\"https://www.dndbeyond.com/monsters/2560819-gauth\" target=\"_blank\" rel=\"noopener\">D&amp;D Beyond</a> for Description.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This is automated, except for handling of temporary magic item negation and charge draining.</p>\n<p>&nbsp;</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Volo's Guide to Monsters pg 125",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 120,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 14,
      "scaling": "flat"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "properties": {
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false
    },
    "proficient": false
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "dndbeyond": {}
    },
    "monsterMunch": {
      "titleHTML": "<strong>Eye Rays.</strong>",
      "fullName": "Eye Rays."
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "core": {
      "sourceId": "Item.gcM1uTe4XQudAD4P"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Gauth Eye Rays",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Eye_Rays_Gauth.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * This macro implements the Gauth's eye rays, slightly modified from RAW, in that this one fires\n * rays at up to 3 targets, if less than 3 are selected the extra(s) are directed at the first target \n * that is the one with index value 0 (I don't know hich that will be...)\n * \n * 10/28/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst RAY_TYPE_COUNT = 6\nconst RAY_COUNT = 3\nconst RAY_NAME_ARRAY = [ \"Devour Magic Ray\", \"Enervation Ray\", \"Pushing Ray\", \"Fire Ray\", \n    \"Paralyzing Ray\", \"Sleep Ray\" ]\nlet rayArray = []\nconst DELAY = 1500  // Time between ray attacks\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`=== Finished === ${MACRONAME} ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function preCheck() {\n    if (args[0].targets.length === 0)       // If not exactly one target \n        return jez.badNews(`Must target at least one target.  ${args[0]?.targets?.length} were targeted.`, \"w\");\n    return (true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    console.log (`===> tToken`,tToken)\n    let tActor = tToken?.actor;\n    //-----------------------------------------------------------------------------------------------\n    // Build target array, from the targeted tokens, need 3 for this attack\n    //\n    let targetArray = []\n    targetArray.push(args[0].targets[0]._object)    // First entry has to be at index 0.\n    // If we have a second target, push that into array, otherwise add first again\n    if (args[0].targets[1]) targetArray.push(args[0].targets[1]._object)\n    else targetArray.push(args[0].targets[0]._object)\n    // If we have a third target, push that into array, otherwise add first again\n    if (args[0].targets[2]) targetArray.push(args[0].targets[2]._object)\n    else targetArray.push(args[0].targets[0]._object)\n    console.log (`===> Target Array`,targetArray)\n    //-----------------------------------------------------------------------------------------------\n    // Randomly assign a unique ray to each of the targets\n    //\n    for (let i = 0; i < RAY_COUNT; i++) {\n        rolledRay = rollRay()\n        while (rayArray.includes(rolledRay)) {\n            if (rayArray.length === RAY_TYPE_COUNT) return jez.badNews(`${TAG} Ran out of ray types`,'e')\n            rolledRay = rollRay()\n          }\n        rayArray.push(rolledRay)\n    }\n    function rollRay() { return (Math.floor(Math.random() * RAY_TYPE_COUNT)) }\n    //-----------------------------------------------------------------------------------------------\n    // Log Assignments for Debugging Purposes\n    //\n    // if (TL > 2) for (let i = 0; i < targetArray.length; i++) \n    //     jez.trace(`${TAG} ${i+1} ${targetArray[i].name} ---targed by--- ${RAY_NAME_ARRAY[rayArray[i]]}`)\n    //-----------------------------------------------------------------------------------------------\n    // Step through the targets firing off appropriate function versus each of them\n    //\n    for (let i = 0; i < targetArray.length; i++) {\n        if (TL > 0) jez.trace(`${TAG} -------------------------------------------`)\n        if (TL > 0) jez.trace(`${TAG} Fire Ray #${i + 1} ${RAY_NAME_ARRAY[rayArray[i]]} at ${targetArray[i].name}`)\n        let options\n        let rayName\n        let devourMagicDesc = `Randomly selected magic item affected by ${aToken.name}'s Devour Magic (handled manually)`\n        switch (rayArray[i]) { \n            case 0: \n                rayName = \"Devour Magic\"\n                options = {\n                    RayName: rayName,\n                    VFXColor: \"rainbow02\",\n                    ceDesc: devourMagicDesc,\n                    traceLvl: TL,\n                    saveType: \"dex\",\n                    icon: aItem.img,\n                    effectName: rayName,\n                    changes: [{key: `flags.gm-notes.notes`, mode: jez.ADD, value: devourMagicDesc, priority: 20}]    \n                }\n                msg = await jez.fireRay(targetArray[i], aToken, options);\n                break;\n            case 1:\n                rayName = \"Enervation Ray\"\n                options = {\n                    RayName: rayName,\n                    VFXColor: \"green\",\n                    ceDesc: `${tToken.name} damaged by ${aToken.name}'s ${rayName}`,\n                    traceLvl: TL,\n                    saveType: \"con\",\n                    damageRoll: \"4d8\",\n                    damageType: \"necrotic\",\n                    effectName: false,\n                    aItem: aItem\n                }\n                msg = await jez.fireRay(targetArray[i], aToken, options);\n                break;\n            case 2:\n                rayName = \"Pushing Ray\"\n                options = {\n                    RayName: rayName,\n                    VFXColor: \"yellow\",\n                    ceDesc: `Pushed back up to 15 feet and speed reduced by half by ${aToken.name}'s ${rayName}`,\n                    traceLvl: TL,\n                    saveType: \"str\",\n                    icon: \"Icons_JGB/Conditions/slow1.png\",                  \n                    effectName: rayName,\n                    pushBack: 15,\n                    changes: [\n                        { key: `data.attributes.movement.walk`, mode: jez.MULTIPLY, value: 0.5, priority: 20 },\n                        { key: `data.attributes.movement.swim`, mode: jez.MULTIPLY, value: 0.5, priority: 20 },\n                        { key: `data.attributes.movement.fly`, mode: jez.MULTIPLY, value: 0.5, priority: 20 },\n                        { key: `data.attributes.movement.climb`, mode: jez.MULTIPLY, value: 0.5, priority: 20 },\n                        { key: `data.attributes.movement.burrow`, mode: jez.MULTIPLY, value: 0.5, priority: 20 },\n                    ]    \n                }\n                msg = await jez.fireRay(targetArray[i], aToken, options);\n                break;\n            case 3:\n                rayName = \"Fire Ray\"\n                options = {\n                    RayName: rayName,\n                    VFXColor: \"orange\",\n                    ceDesc: `${tToken.name} damaged by ${aToken.name}'s ${rayName}`,\n                    traceLvl: TL,\n                    saveType: \"dex\",\n                    damageRoll: \"4d10\",\n                    damageType: \"fire\",\n                    effectName: false,\n                    aItem: aItem\n                }\n                msg = await jez.fireRay(targetArray[i], aToken, options);\n                break;\n            case 4:\n                rayName = \"Paralyzing Ray\"\n                let OVERTIME = `turn=end,label=Save against Paralyzing Ray,saveDC=${SAVE_DC},saveAbility=con,saveRemove=true,saveMagic=true,rollType=save`\n                options = {\n                    RayName: rayName,\n                    VFXColor: \"rainbow01\",\n                    ceDesc: `Paralyized for up to a minute by ${aToken.name}'s ${rayName}, end of round DC ${SAVE_DC} CON save to end early`,\n                    traceLvl: TL,\n                    saveType: \"con\",\n                    icon: \"systems/dnd5e/icons/spells/beam-jade-2.jpg\",\n                    effectName: rayName,\n                    changes: [\n                        { key: `macro.CE`, mode: jez.CUSTOM, value: \"Paralyzed\", priority: 20 },\n                        { key: `flags.midi-qol.OverTime`, mode: jez.MULTIPLY, value: OVERTIME, priority: 20 },\n                    ],\n                    specDur: [\"newDay\", \"longRest\", \"shortRest\"],\n                    rounds: 10,\n                }\n                msg = await jez.fireRay(targetArray[i], aToken, options);\n                break;\n            case 5:\n                rayName = \"Sleep Ray\"\n                options = {\n                    RayName: rayName,\n                    VFXColor: \"purple\",\n                    ceDesc: `Unconscious for up to a minute from ${aToken.name}'s ${rayName}, ends early if damaged or awoken by another.`,\n                    traceLvl: TL,\n                    saveType: \"con\",\n                    icon: \"systems/dnd5e/icons/spells/beam-sky-2.jpg\",\n                    effectName: rayName,\n                    changes: [\n                        { key: `macro.CE`, mode: jez.CUSTOM, value: \"Unconscious\", priority: 20 },\n                    ],\n                    specDur: [\"isDamaged\", \"newDay\", \"longRest\", \"shortRest\"],\n                    rounds: 10,\n                }\n                msg = await jez.fireRay(targetArray[i], aToken, options);\n                break;\n            default: return jez.badNews(`${TAG} Illegal ray value: ${i}`)\n          }\n        postResults(msg)\n        await jez.wait(DELAY)\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    if (TL > 3) jez.trace(`${TAG} More Detailed Trace Info.`)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}