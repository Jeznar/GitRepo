{
  "name": "Ink Cloud",
  "type": "feat",
  "img": "systems/dnd5e/icons/spells/fog-water-air-2.jpg",
  "data": {
    "description": {
      "value": "<p>A 5-foot-radius cloud of ink extends all around the %TOKENNAME% if it is underwater. The area is <a href=\"https://www.dndbeyond.com/sources/basic-rules/adventuring#VisionandLight\" target=\"_blank\" rel=\"noopener\">heavily obscured</a> for 1 minute, although a significant current can disperse the ink. After releasing the ink, the %TOKENNAME% can use the <a href=\"https://www.dndbeyond.com/sources/phb/combat#Dash\" target=\"_blank\" rel=\"noopener\">Dash action</a> as a bonus action.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> A VFX tile is placed to mark the ink cloud location but line of sight restrictions are not automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 1,
      "max": "1",
      "per": "sr"
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Ink Cloud",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Ink_Cloud.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Places an Ink Cloud tile in support of Octopus ability.\n * \n * This needs to be inserted as an ItemMacro.\n * \n *11/28/22 0.1 Creation\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({traceLvl:TL});                   // DAE removal\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    // Store some needed info\n    //\n    // Grab the size of grid in pixels per square\n    // const TEMPLATE_ID = args[0].templateId                                  // ID of the template\n    // const TEMPLATE_OBJS = canvas.templates.objects.children                 // Stash the templates\n    // let template = TEMPLATE_OBJS.find(i => i.data._id === TEMPLATE_ID);     // Find Template\n    // canvas.templates.get(TEMPLATE_ID).document.delete();                    // Delete Template\n    //-----------------------------------------------------------------------------------------------\n    // Build the data object for the tile to be created\n    //\n    const GRID_SIZE = canvas.scene.data.grid;                               // Stash the grid size\n    let tileProps = {\n        x: aToken.center.x - GRID_SIZE * 2,     // X coordinate is center of the aToken\n        y: aToken.center.y - GRID_SIZE * 2,     // Y coordinate is center of the aToken\n        // img: \"modules/jb2a_patreon/Library/1st_Level/Fog_Cloud/FogCloud_01_White_800x800.webm\",\n        img: \"modules/jb2a_patreon/Library/1st_Level/Sleep/Cloud01_02_Dark_OrangePurple_400x400.webm\",\n        width: GRID_SIZE*4,                     // VFX should occupy 2 tiles across\n        height: GRID_SIZE*4,                    // ditto\n        overhead: true,\n        occlusion: {\n            alpha: 0,\n            mode: 3,\n        },\n        alpha: 1.0                            // Opacity of our placed tile 0 to 1.0  \n    };\n    //-----------------------------------------------------------------------------------------------\n    // Call library function to create the new tile, catching the id returned.  \n    //\n    let tileId = await jez.tileCreate(tileProps)\n    //-----------------------------------------------------------------------------------------------\n    // Place a DAE effect on the actor to trigger deletion of the cloud in 10 turns \n    //\n    const CE_DESC = `Ink Cloud obscures vision for up to a minute`\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    const EFFECT_NAME = `Ink Cloud`\n    let effectData = [{\n        label: EFFECT_NAME,\n        icon: aItem.img,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        flags: { \n            dae: { stackable: false, macroRepeat: \"none\" },\n            convenientDescription: CE_DESC\n        },\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `${tileId}`, priority: 20 },\n        ]\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: effectData });\n    //-----------------------------------------------------------------------------------------------\n    // That's all folks\n    //\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function doOff(options={}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    const TILE_ID = args[1]\n    jez.tileDelete(TILE_ID)\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.ej5BbqrMYqDU2JdV"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}