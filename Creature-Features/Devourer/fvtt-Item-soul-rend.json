{
  "name": "Soul Rend",
  "type": "feat",
  "img": "systems/dnd5e/icons/spells/slice-spirit-3.jpg",
  "data": {
    "description": {
      "value": "<p>The %TOKENNAME% creates a vortex of life-draining energy in a 20-foot radius centered on itself.</p>\n<section class=\"secret\">\n<p>Each humanoid in that area must make a DC 18 Constitution saving throw, taking 44 (8d10) necrotic damage on a failed save, or half as much damage on a successful one. Increase the damage by 10 for each living humanoid with 0 hit points in that area.</p>\n<hr />\n<p><strong>FoundryVTT: </strong>increased damage for each dieing character in radius is not automated (or desired).</p>\n</section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Volo's Guide to Monsters pg 138",
    "activation": {
      "type": "special",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [
        [
          "8d10[necrotic]",
          "necrotic"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": 18,
      "scaling": "flat"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "properties": {
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false
    },
    "proficient": false
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "dndbeyond": {}
    },
    "monsterMunch": {
      "titleHTML": "<strong>Soul Rend (Recharge 6).</strong>",
      "fullName": "Soul Rend (Recharge 6)."
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[preItemRoll]ItemMacro,[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Soul Rend",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Soul_Rend.0.1.js\"\nconst TL = 0;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * This macro is intended to be run twice.  Once before the item is rolled, then after things complete. First pass is to set the \n * targets.  Second pass runs VFX/\n * \n * 10/04/23 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.log(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\n\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.macroPass === 'preItemRoll') {       // Execute only when called before the item\n   preItemRoll({ traceLvl: TL });               // Manipulate the data to set correct targets\n   return\n}\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\n// DamageBonus must return a function to the caller\nif (TL > 1) jez.log(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODYo\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the2 setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0].targets.length !== 1)\n        return jez.badNews(`Must target exactly one target.  ${args[0].targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.log(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preItemRoll(options = {}) {\n    const FUNCNAME = \"preItemRoll(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Find tokens in a 20-foot radius centered on aActor that aActor has a LoS to\n    //\n    let opts = {\n        direction: \"o2t\",       // t2o or o2t (Origin to Target) (t2o is default) \n        chkSight: true,         // Boolean (false is default)\n        traceLvl: 0,           // Trace level, integer typically 0 to 5\n    }\n    const IN_RANGE_TOKENS = await jez.inRangeTargets(aToken, 20, opts);\n    if (IN_RANGE_TOKENS.length === 0) return jez.badNews(`No valid targets in range`, \"i\")\n    if (TL>2) for (let i = 0; i < IN_RANGE_TOKENS.length; i++) jez.log(`${TAG} Targeting: ${IN_RANGE_TOKENS[i].name}`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Filter that list down to just humanoids. More specically, filter it to all PCs and NPCs that have race humanioid and put their \n    // token Ids into a handy array that will be used to set targets.\n    //\n    let validTargets = []\n    for (i = 0; i < IN_RANGE_TOKENS.length; i++) {\n        if (TL > 3) jez.log(`${TAG} Checking Validity`,\n            `IN_RANGE_TOKENS[${i}]             `, IN_RANGE_TOKENS[i],\n            `jez.isPC(IN_RANGE_TOKENS[${i}])   `, await jez.isPC(IN_RANGE_TOKENS[i],\n            `jez.getRace(IN_RANGE_TOKENS[${i}])`, jez.getRace(IN_RANGE_TOKENS[i]).toLowerCase()))\n        if (await jez.isPC(IN_RANGE_TOKENS[i]) || (jez.getRace(IN_RANGE_TOKENS[i]).toLowerCase() === 'humanoid')) \n            validTargets.push(IN_RANGE_TOKENS[i].id)\n    }\n    if (TL > 3) jez.log(`${TAG} Arg Data`, 'targetUuids', L_ARG.targetUuids, 'targets    ', L_ARG.targets,  'validTargets ', validTargets );\n    // Ex: game.user.updateTokenTargets(['SRE8HPMu1ZaIx7K5'])\n    game.user.updateTokenTargets(validTargets)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (args[0].targets.length === 0) return jez.badNews(`No valid targets`,'i')\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Loop through the targets running our VFX\n    //\n    for (i = 0; i < args[0].targets.length; i++) {\n        runVFX( args[0].targets[i], aToken)\n        await jez.wait(250 + 500 * Math.random() )\n        if (TL > 1) jez.log(`${TAG} Targeted`, args[0].targets[i].name);\n    } \n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    msg = `Rends the souls of ${args[0].targets.length} victims`\n    postResults(msg)\n    if (TL > 0) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Run a nice little VFX from active token to summoning token\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function runVFX(target, caster) {\n    const BEAM_VFX = 'jb2a.energy_beam.normal.greenyellow.02'\n    new Sequence()\n        .effect()\n            .file(BEAM_VFX)\n            .atLocation(target)\n            .stretchTo(caster)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.MazlDIYafgt2zyH4"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}