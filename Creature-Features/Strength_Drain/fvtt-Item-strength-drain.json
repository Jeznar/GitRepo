{
  "name": "Strength Drain",
  "type": "weapon",
  "img": "Tokens/Monsters/Shadow/Shadow-Avatar.png",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% swipes at its target doing damage and draining its strength.</p>\n<section class=\"secret\">\n<p><strong>Strength Drain.</strong><em>Melee Weapon Attack: </em>+4, Reach 5 ft., one creature. <em>Hit : </em>9 (2d6 + 2) necrotic damage.</p>\n<p>The target's Strength score is reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.</p>\n<p>If a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later.</p>\n</section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "quantity": 1,
    "weight": 1,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 5,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "dex",
    "actionType": "mwak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "2d6 + 2",
          "necrotic"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "amm": false,
      "hvy": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "lgt": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "ada": false,
      "lod": false,
      "mgc": false,
      "sil": false
    },
    "proficient": true
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "fumbleThreshold": null,
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Strength Drain",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Strength_Drain.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Applies the strength drain debuff bit of a Shadow's basic attack.\n * \n *   The target's Strength score is reduced by 1d4. The target dies if this reduces its Strength to 0. \n *   Otherwise, the reduction lasts until the target finishes a short or long rest. If a non-evil \n *   humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later.\n * \n * 11/15/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL>1) jez.trace(`${TAG} === Starting ===`);\nif (TL>2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;         \nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor; \n//\n// Set the value for the Active Item (aItem)\nlet aItem;         \nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = `Strength Drain`\nconst GAME_RND = game.combat ? game.combat.round : 0;\nlet killzIt = false\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \nasync function preCheck() {\n    if (args[0].targets.length !== 1)       // If not exactly one target \n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`,\"w\");\n    if (LAST_ARG.hitTargets.length === 0)   // If target was missed, return\n        return jez.badNews(`Target was missed.`, \"w\")\n    return(true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-----------------------------------------------------------------------------------------------\n    // Determine how much stength should be drained\n    //\n    let rollObj = new Roll(`1d4`).evaluate({ async: false });\n    await game.dice3d?.showForRoll(rollObj);\n    if (TL>1) jez.trace(`${TAG} Strength to drain`, rollObj.total);\n    //-----------------------------------------------------------------------------------------------\n    // Will this attack drop str to (or below) zero?\n    //\n    let strDrain = rollObj.total\n    let targetStr = tToken.actor.data.data.abilities.str.value\n    if (targetStr - strDrain <= 0) {\n        killzIt = true\n        strDrain = targetStr\n    }\n    msg = `${tToken.name} has ${strDrain} points of strength drained. `\n    //-----------------------------------------------------------------------------------------------\n    // Define and apply appropriate debuff effect\n    //\n    const CE_DESC = `Strength reduced by ${rollObj.total}`\n    let EFFECT_DATA = {\n        label: EFFECT_NAME,\n        icon: aItem.img,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        flags: {\n            dae: { stackable: true, specialDuration: [ \"longRest\", \"shortRest\"] },\n            convenientDescription: CE_DESC\n        },\n        duration: { rounds: 14400, seconds: 86400, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [\n            { key: `data.abilities.str.value`, mode: jez.ADD, value: `-${strDrain}`, priority: 20 },\n        ]\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [EFFECT_DATA] });\n    //-----------------------------------------------------------------------------------------------\n    // Check to see if target is killed by strength zero, is os killz it!\n    //\n    if (killzIt) {\n        if (TL>1) jez.trace(`${TAG} ${tToken} has 0 or less str, killz it!`);\n        damDone = await applyDamage(tToken, 99999)\n        msg += `It dies as its strength is now zero.`\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Say goodbye!\n    //\n    postResults(msg)\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Handy function to apply damage\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \nasync function applyDamage(token1, amount) {\n    let hpVal = token1.actor.data.data.attributes.hp.value;\n    let hpTmp = token1.actor.data.data.attributes.hp.temp;\n    let damageDone = Math.min(hpVal+hpTmp, amount)\n    let damageRollObj = new Roll(`${damageDone}`).evaluate({ async: false });\n    jez.log(`damageRollObj`, damageRollObj);\n    await new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageDone, \n        /*DAMAGE_TYPE*/null,[token1], damageRollObj,\n        {\n            flavor: `Strength Drain`,\n            itemCardId: \"new\",\n            useOther: false\n        }\n    );\n    return(damageDone)\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": {
      "version": 4,
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false,
        "menuType": "generic",
        "variant": "loop",
        "enableCustom": false,
        "repeat": null,
        "delay": null,
        "scale": null,
        "staticType": "target",
        "opacity": null,
        "unbindAlpha": false,
        "unbindVisibility": false,
        "persistent": false
      },
      "override": true,
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animType": "static",
      "animation": "vortex",
      "color": "purple",
      "audio": {
        "a01": {
          "enable": false
        },
        "a02": {
          "enable": false
        }
      },
      "preview": false,
      "meleeSwitch": {
        "switchType": "on",
        "returning": false
      },
      "explosions": {
        "enable": false
      }
    },
    "core": {
      "sourceId": "Item.Q17WpQRXyi1Q20OQ"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}