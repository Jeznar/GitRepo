{
  "name": "Last Laugh",
  "type": "feat",
  "img": "systems/dnd5e/icons/items/inventory/teeth.jpg",
  "data": {
    "description": {
      "value": "<p>When %TOKENNAME% dies, it releases a dying laugh that scars the minds of other nearby creatures.</p>\n<section class=\"secret\">\n<p>Each creature within 10 feet of the %TOKENNAME% must succeed on a DC 11 Wisdom saving throw or take 2 (1d4) psychic damage.</p>\n</section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Guildmasters' Guide to Ravnica pg 195",
    "activation": {
      "type": "special",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 10,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "Hahaha uuug",
    "critical": null,
    "damage": {
      "parts": [
        [
          "1d4",
          "psychic"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": 11,
      "scaling": "cha"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "dndbeyond": {}
    },
    "monsterMunch": {
      "titleHTML": "<em><strong>Last Laugh.</strong></em>",
      "fullName": "Last Laugh."
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Last Laugh",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Last_Laugh.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * When the cackler dies, it releases a dying laugh that scars the minds of other nearby creatures.\n * Each creature within 10 feet of the cackler must succeed on a DC 11 WIS Save or take 2 (1d4) \n * psychic damage.\n *  \n * This macro MUST be configured to run \"Called before item is rolled\" on the item card.  It does \n * three things:\n *   1. Plays an explosion VFX\n *   2. Build a list of valid targets within range\n *   3. Sets the targeted tokens to match the list created.\n * \n * 11/16/22 0.1 Creation of Macro from Death_Burst.0.1.js\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 5;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL>1) jez.trace(`${TAG} === Starting ===`);\nif (TL>2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;         \nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\n//\n// Set the value for the Active Item (aItem)\nlet aItem;         \nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------------------\n    // Add some VFX\n    //\n    runVFX(aToken)\n    //----------------------------------------------------------------------------------------------\n    // Remove any preset targets\n    //\n    game.user.updateTokenTargets()  \n    //---------------------------------------------------------------------------------------------------\n    // Set function specific globals\n    //\n    const ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\n    //----------------------------------------------------------------------------------------------\n    // Obtain the range of the effect\n    //\n    const RANGE = jez.getRange(aItem, ALLOWED_UNITS) + 3 // Adding a bit of fudge\n    if (!RANGE) return jez.badNews(`Could not retrieve useable range (in feet) for ${aItem.name}`)\n    //----------------------------------------------------------------------------------------------\n    // Obtain an array of viable targets\n    //\n    let parms = {\n        exclude: \"Self\",    // self, friendly, or none (self is default)\n        traceLvl: TL,           // Trace level, integer typically 0 to 5\n    }\n    let candidateIds = []\n    let candidates = await jez.inRangeTargets(aToken, RANGE, parms);\n    if (candidates.length === 0) return jez.badNews(`No effectable targets in range`, \"i\")\n    if (TL>1) for (let i = 0; i < candidates.length; i++) {\n        jez.trace(`${FNAME} | Targeting: ${candidates[i].name}`)\n        candidateIds.push(candidates[i].id)\n    }\n    //----------------------------------------------------------------------------------------------\n    // Update the selected targets so item hits correct tokens.\n    //\n    game.user.updateTokenTargets(candidateIds)\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/***************************************************************************************************\n * Launch the VFX effects\n ***************************************************************************************************/\n async function runVFX(token) {\n    new Sequence()\n       .effect()\n       .file(\"jb2a.template_circle.out_pulse.01.burst.purplepink\")\n       .attachTo(token)\n       .scale(0.9)\n       .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[preItemRoll]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "core": {
      "sourceId": "Item.RvnuhuWV17cOxmMT"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}