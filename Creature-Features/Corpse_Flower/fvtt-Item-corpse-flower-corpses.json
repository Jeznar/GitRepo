{
  "name": "Corpse Flower Corpses",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/green_25.jpg",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% usually contains a number of corpses.</p>\n<section class=\"secret\">\n<p>When first encountered, a %TOKENNAME% contains the corpses of 1d6 + 3 humanoids. A %TOKENNAME% can hold the remains of up to nine dead humanoids. These remains have total cover against attacks and other effects outside the %TOKENNAME%. If the %TOKENNAME% dies, the corpses within it can be pulled free.</p>\n<p>While it has at least one humanoid corpse in its body, the %TOKENNAME% can use a bonus action to do one of the following:</p>\n<ul>\n<li>The %TOKENNAME% digests one humanoid corpse in its body and instantly regains 11 (2d10) hit points. Nothing of the digested body remains. Any equipment on the corpse is expelled from the %TOKENNAME% in its space.</li>\n<li>The %TOKENNAME% animates one dead humanoid in its body, turning it into a zombie. The zombie appears in an unoccupied space within 5 feet of the %TOKENNAME% and acts immediately after it in the initiative order. The zombie acts as an ally of the %TOKENNAME% but isn&rsquo;t under its control, and the flower&rsquo;s stench clings to it (see the Stench of Death trait).</li>\n</ul>\n<hr />\n<p><strong>FoundryVTT</strong>: The number of corpses is tracked through a buff on the %TOKENNAME% token.&nbsp; If there are none, this item can be used to initialize the stack.&nbsp; If there are one or more corpses, this item will provide a dialog to allow a choice of hos to use the corpse and will decrment the count.</p>\n<p>Spawned creatures will have the stench feature and a visual aura for the GM.</p>\n</section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Mordenkainenâ€™s Tome of Foes pg 127",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "dndbeyond": {}
    },
    "monsterMunch": {
      "titleHTML": "<em><strong>Corpses.</strong></em>",
      "fullName": "Corpses."
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "core": {
      "sourceId": "Item.a1oYDvTf3EzKE3iF"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Corpse Flower Corpses",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Corpses.0.2.js\"\nconst TL = 0;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implement the corpses ability\n * \n * 09/21/23 0.1 Creation\n * 10/04/23 0.2 Add Stench of Death to spawn zombies as feature with an aura\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.log(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = 'Corpses'\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.log(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.log(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If we don't have a CORPSE_EFFECT one needs to be added.\n    //\n    let ceDesc = await jez.getCEDesc(aToken, EFFECT_NAME, { traceLvl: TL })\n    if (TL > 3) jez.log(`${TAG} existing ceDesc, if any`, ceDesc)\n    if (!ceDesc) {\n        // If we don't already have a corpses buff, lets place one \n        let corpseCnt = Math.floor(Math.random() * 6) + 4\n        const CE_DESC = `Corpses contained: ${corpseCnt}`\n        let effectData = [{\n            label: EFFECT_NAME,\n            icon: aItem.img,\n            origin: L_ARG.uuid,\n            disabled: false,\n            flags: {\n                dae: { stackable: false },\n                convenientDescription: CE_DESC,\n                isConvenient: true,\n                isCustomConvenient: true,\n                core: { statusId: 'Force Display' }\n            },\n        }];\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: token.actor.uuid, effects: effectData });\n        return postResults(`${corpseCnt} body sized bulges are apparent with the foliage of ${aToken.name}`)\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Grab the corpse count from the CE_DESC of CORPSE_EFFECT.  If we have none remaining, exit.\n    //\n    if (TL > 2) jez.log(`${TAG} convenientDescription`, ceDesc)\n    let corpseCnt = ceDesc.split(\" \")[2];\n    if (TL > 3) jez.log(`${TAG} corpse count`, corpseCnt)\n    if (corpseCnt < 1) return postResults(`${aToken.name} has no aditional corpse to consume.`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Present a checkbox dialog asking for the action to take with a corpse \n    //\n    queryTitle = \"Which Action to Perform?\"\n    queryText = `${aToken.name} can choose one of two actions to perform while consuming one of the ${corpseCnt} corpses it contains.`\n    queryOpts = [\n        `Heal: Regain 2d10 hit points. Equipment on the corpse is expelled from the corpse flower in its space.`,\n        `Spawn: One zombie appears adjacent. The flowerâ€™s stench clings to it (see the Stench of Death trait).`\n    ]\n    const SELECTION = await jez.pickRadioListArray(queryTitle, queryText, () => { }, queryOpts);\n    if (SELECTION === null) return jez.badNews(`Selected \"Cancel\" on dialog`, 'i')\n    if (!SELECTION) return jez.badNews(`Didn't select any tokens to be acted on`, 'i')\n    if (TL > 2) jez.log(`${TAG} selected`, SELECTION)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If we have choosen to heal, perform that now.\n    //\n    if (SELECTION.startsWith('Heal:')) {\n        await healSelf(aToken, { traceLvl: TL })\n        await jez.wait(500)\n        postResults(`A single corpse is consumed within ${aToken.name} and its equipment is expelled, ${corpseCnt - 1} remain.`);\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If we have chosen to spawn, do so.\n    //\n    if (SELECTION.startsWith('Spawn:')) {\n        await placeUndead(aToken, { traceLvl: TL })\n        await jez.wait(500)\n        postResults(`${aToken.name} expells a single corpse which it has animated, ${corpseCnt - 1} remain.`);\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the corpse count in the CE_DESC\n    //\n    await jez.setCEDesc(aToken, EFFECT_NAME, `Corpses contained: ${corpseCnt - 1}`, { traceLvl: TL });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 0) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Regain 2d10 hit points \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function healSelf(aToken, options = {}) {\n    const FUNCNAME = \"placeUndead(aToken, options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"aToken\", aToken, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    const DAM_TYPE = \"healing\";\n    const DICE_NUM = 2;\n    const DICE_TYPE = 'd10';\n    const BONUS = 0;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Do the healing\n    //\n    let healDamage = new Roll(`${DICE_NUM}${DICE_TYPE} + ${BONUS}`).evaluate({ async: false });\n    game.dice3d?.showForRoll(healDamage);   // Show 3D die on screen\n    await new MidiQOL.DamageOnlyWorkflow(aActor, aToken, healDamage.total, DAM_TYPE, [aToken],\n        healDamage, {\n            flavor: `(${CONFIG.DND5E.healingTypes[DAM_TYPE]})`,\n        itemCardId: args[0].itemCardId, useOther: false\n    });\n    await replaceHitsWithHeals();\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Replace first \" hits\" with \" heals\" on chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function replaceHitsWithHeals() {\n    let chatmsg = game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatmsg.data.content);\n    const searchString = / hits/g;\n    const replaceString = `<p style=\"color:Green;\"> Heals</p>`;\n    content = await content.replace(searchString, replaceString);\n    await chatmsg.update({ content: content });\n    await ui.chat.scrollBottom();\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Place an zombie under control of the flower near the flower \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function placeUndead(aToken, options = {}) {\n    const FUNCNAME = \"placeUndead(aToken, options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"aToken\", aToken, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let spawn = \"Zombie\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    let summonData = await game.actors.getName(spawn)\n    if (TL > 2) jez.log(`${TAG} summonData`, summonData)\n    if (!summonData) return jez.badNews(`Could not find ${spawn} template actor`, 'e')\n    // Build the dataObject for our summon call, all we need to do is customize the name and elevation\n    let argObj = {\n        minionName: `${aToken.name}'s ${spawn}`,\n        img: summonData?.img ?? aItem.img,\n        defaultRange: 15    // Keep the up chucked undead kinda close\n    }\n    // Craft ouselves a slightly customized color for our spawn\n    let adjRH = (0 + Math.floor(Math.random() * 30)).toString(16)\n    let adjGH = (225 + Math.floor(Math.random() * 30)).toString(16)\n    let adjBH = (0 + Math.floor(Math.random() * 10)).toString(16)\n    if (TL > 3) jez.log(`${TAG} Color component values`, 'adjRH', adjRH, 'adjGH', adjGH,'adjBH', adjBH)\n    adjRH = (adjRH.length === 1)  ? `0` + adjRH : adjRH     // Add leading 0 if needed to make 2 place hex number\n    adjGH = (adjGH.length === 1)  ? `0` + adjGH : adjGH     // Add leading 0 if needed to make 2 place hex number\n    adjBH = (adjBH.length === 1)  ? `0` + adjBH : adjBH     // Add leading 0 if needed to make 2 place hex number\n    if (TL > 3) jez.log(`${TAG} Color component values`, 'adjRH', adjRH, 'adjGH', adjGH,'adjBH', adjBH)\n    let colorCodeH = `${adjRH}${adjGH}${adjBH}`\n    // Create a custom updates object that will mutate the spawn so that it has a visual aura for the GM indicating 10 feet range\n    //\n    if (TL > 1) jez.trace(`${TAG} Building a custom update object to indicate range`)\n    argObj.updates = {\n        actor: { \n            name: `${aToken.name}'s ${spawn}`,\n        },\n        token: {\n            name: `${aToken.name}'s ${spawn}`,\n            disposition: aActor.data.token.disposition,\n            flags: {\n                'token-auras': {\n                    aura1: {\n                        colour: `#${colorCodeH}`,\n                        distance: 10,\n                        opacity: 0.15,\n                        square: false\n                    }\n                }\n            }\n        },\n        // embedded: { Item: {} } // Need an empty entry here to hold one or more additions\n    }\n    if (TL > 2) jez.log(`${TAG} argObj`, argObj)\n    // Do the actual summon\n    summonedMinionId = await jez.spawnAt(spawn, aToken, aActor, aItem, argObj)\n    if (TL > 2) jez.log(`${TAG} summonedMinionId`, summonedMinionId)\n    // Add our summons to combat tracker after summoner if in combat\n    const ATOKEN_INIT_VALUE = aToken?.combatant?.data?.initiative\n    if (TL > 1) jez.log(`${TAG} ${aToken.name} initiative`, ATOKEN_INIT_VALUE);\n    if (ATOKEN_INIT_VALUE) {\n        const SPAWN_INT = ATOKEN_INIT_VALUE - 1 / 1000;\n        await jez.combatAddRemove('Add', summonedMinionId[0], { traceLvl: TL })\n        await jez.wait(250)\n        await jez.combatInitiative(summonedMinionId[0], { formula: SPAWN_INT, traceLvl: 0 })\n    }\n    // Add the ability \"Stench of Death\" to our new minion\n    let fetchedTokenDoc = game.scenes.viewed.data.tokens.get(summonedMinionId[0])\n    if (TL > 1) jez.log(`${TAG} fetched TokenDoc`, fetchedTokenDoc)\n    await jez.itemAddToActor(fetchedTokenDoc, \"Stench of Death\")\n\n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}