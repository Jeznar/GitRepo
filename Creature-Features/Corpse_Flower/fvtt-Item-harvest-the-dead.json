{
  "name": "Harvest the Dead",
  "type": "feat",
  "img": "icons/commodities/bones/skull-bowl-brown.webp",
  "data": {
    "description": {
      "value": "<p>The %TOKENNAME% grabs one unsecured dead humanoid within 10 feet of it and stuffs the corpse into itself, along with any equipment the corpse is wearing or carrying.</p>\n<section class=\"secret\">\n<p>The remains can be used with the Corpses trait.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: ???</p>\n</section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Mordenkainenâ€™s Tome of Foes pg 127",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 10,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "flat"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "properties": {
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false
    },
    "proficient": false
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "dndbeyond": {}
    },
    "monsterMunch": {
      "titleHTML": "<strong>Harvest the Dead.</strong>",
      "fullName": "Harvest the Dead."
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Harvest the Dead",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Harvest_the_Dead.0.1.js\"\nconst TL = 0;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Corpse Flower:  Harvest the dead\n * \n *   Grab one unsecured dead humanoid within 10 feet of it and stuffs the corpse into itself, along with any \n *   equipment the corpse is wearing or carrying.\n * \n * 10/04/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.log(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = 'Corpses'\nconst EFFECT2_NAME = 'Consumed Corpse'\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.log(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0].targets.length !== 1)\n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.log(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * - Make sure we have something targeted\n * - Verify that it is either a PC or a humanoid NPC\n * - Verify that the target is dead \n * - Update the token of the dead to be on the corpse flower\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return postResults(`Nothing was targeted.`)\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Verify that it is either a PC or a humanoid NPC & is dead, post & exit if target is not dead\n    //\n    if (await jez.isPC(tActor)) {\n        if (tActor.data.data.attributes.death.failure < 3) return postResults(`${tToken.name} is a PC who is not dead.`)\n    } else {\n        if (tActor.data.data.attributes.hp.value > 0) return postResults(`${tToken.name} is a NPC who is not dead.`)\n        let race = jez.getRace(tToken).toLowerCase()\n        if (TL > 1) jez.log(`${TAG} | Target race`, race)\n        if (!race.includes(\"humanoid\")) return postResults(`Target must be a humanoid. ${tToken.name} is ${race}`)\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the token of the dead to be on the corpse flower\n    //\n    if (TL > 3) jez.log(`${TAG} More Detailed Trace Info.`)\n    let newCoords = { x: tToken.x, y: tToken.y };\n    if (aToken.x + aToken.w - tToken.w < tToken.x) newCoords.x = aToken.x + aToken.w - tToken.w;\n    else if (aToken.x > tToken.x) newCoords.x = aToken.x;\n    if (aToken.y + aToken.h - tToken.h < tToken.y) newCoords.y = aToken.y + aToken.h - tToken.h;\n    else if (aToken.y > tToken.y) newCoords.y = aToken.y;\n    await tToken.document.update({ x: newCoords.x, y: newCoords.y });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Increment the corpse count, If we don't have a CORPSE_EFFECT one needs to be added.\n    //\n    let ceDesc = await jez.getCEDesc(aToken, EFFECT_NAME, { traceLvl: TL })\n    if (TL > 3) jez.log(`${TAG} existing ceDesc, if any`, ceDesc)\n    if (!ceDesc) {\n        // If we don't already have a corpses buff, lets place one \n        let corpseCnt = Math.floor(Math.random()) * 6 + 5   // One more than usual since it is being added\n        const CE_DESC = `Corpses contained: ${corpseCnt}`\n        let effectData = [{\n            label: EFFECT_NAME,\n            icon: 'systems/dnd5e/icons/skills/green_25.jpg',\n            origin: L_ARG.uuid,\n            disabled: false,\n            flags: {\n                dae: { stackable: false },\n                convenientDescription: CE_DESC,\n                isConvenient: true,\n                isCustomConvenient: true,\n                core: { statusId: 'Force Display' }\n            },\n        }];\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: token.actor.uuid, effects: effectData });\n        postResults(`${corpseCnt} body sized bulges are apparent with the foliage of ${aToken.name}`)\n    } else {\n        let corpseCnt = Number(ceDesc.split(\" \")[2])\n        if (TL > 3) jez.log(`${TAG} corpse count`, corpseCnt)\n        await jez.setCEDesc(aToken, EFFECT_NAME, `Corpses contained: ${1 + corpseCnt}`, { traceLvl: TL });\n        postResults(`${aToken.name} pulls ${tToken.name}'s body into itself. There now appear to be ${1 + corpseCnt}\n        body sized bulges.`)\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply a marker debuff to the corpse\n    //\n    const CE_DESC = `Consumed by ${aToken.name}`\n    let effectData = [{\n        label: EFFECT2_NAME,\n        icon: aItem.img,\n        origin: L_ARG.uuid,\n        disabled: false,\n        flags: {\n            dae: { stackable: false },\n            convenientDescription: CE_DESC,\n            isConvenient: true,\n            isCustomConvenient: true,\n            core: { statusId: 'Force Display' }\n        },\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: effectData });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 0) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.DJGskPJ7kWIfHlHC"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}