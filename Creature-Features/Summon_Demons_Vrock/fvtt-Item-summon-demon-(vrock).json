{
  "name": "Summon Demon (Vrock)",
  "type": "feat",
  "img": "Tokens/Monsters/Vrock/vrock_avatar.png",
  "data": {
    "description": {
      "value": "<p>The demon chooses what to summon and attempts a magical summoning.</p>\n<p>A vrock has a <strong>30 percent</strong> chance of summoning <strong>2d4 dretches</strong> or<strong> one vrock</strong>.</p>\n<p>A summoned demon appears in an unoccupied space <strong>within 60 feet</strong> of its summoner, acts as an ally of its summoner, and can't summon other demons.</p>\n<p>The summoned demon(s) remain for <strong>1 minute</strong>, until it or its summoner <strong>dies</strong>, or until its summoner <strong>dismisses</strong> it as an action.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Players need to be aware of the 60 feet placement restriction.Â  The summoned demons need to be added to the combat tracker manually. Remove the effect from the Vrock if it dies while active, this will remove the summoned demons.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 1,
      "max": "1",
      "per": "day"
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Summon Demon (Vrock)",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Summon_Demons.0.3.js\"\n/*****************************************************************************************\n * Implement a Vrock's summon ability,\n * \n *   The demon chooses what to summon and attempts a magical summoning.\n *   A vrock has a 30 percent chance of summoning 2d4 dretches or one vrock.\n *   A summoned demon appears in an unoccupied space within 60 feet of its summoner, acts \n *   as an ally of its summoner, and can't summon other demons. It remains for 1 minute, \n *   until it or its summoner dies, or until its summoner dismisses it as an action.\n * \n * 05/21/22 0.1 Creation of Macro\n * 07/17/22 0.2 Update to use jez.spawnAt for summoning\n * 08/02/22 0.3 Add convenientDescription\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst TL = 0;                               // Trace Level for this macro\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n  const FUNCNAME = \"doOnUse()\";\n  const FNAME = FUNCNAME.split(\"(\")[0] \n  if (TL===1) jez.trace(`--- Starting --- ${MACRO} ${FNAME} ---`);\n  if (TL > 1) jez.trace(`--- Starting --- ${MACRO} ${FUNCNAME} ---`);\n  //-------------------------------------------------------------------------------------------\n  let tokenIdArray = [];\n  //------------------------------------------------------------------------------------------------\n  // Run a runeVFX on the summoning token\n  //\n  jez.runRuneVFX(aToken, jez.getSpellSchool(aItem))\n  //------------------------------------------------------------------------------------------------\n  // Determine if the summoning will succeed, post failure message if warrented\n  //\n  let summonAttempt = new Roll(`1d100`).evaluate({ async: false });\n  game.dice3d?.showForRoll(summonAttempt);\n  jez.log(\"Roll result\", summonAttempt.total)\n  if (summonAttempt.total <= 70) {  // 70 gets 70% failure rate\n    msg = `<b>${token.name}</b>'s summon attempt has failed, wasting a turn.`\n    jez.log(msg)\n    postResults(msg)\n    return (false)\n  }\n  //------------------------------------------------------------------------------------------------\n  // Pop a dialog to find out if the summoner wants 2d4 dretches or one vrock added to the scene\n  //\n  const queryTitle = \"What type of Demon to summon?\"\n  const queryText = \"Pick from the list\"\n  let demons = [\"Dretches (2d4)\", \"Vrock (1)\"];\n  jez.pickRadioListArray(queryTitle, queryText, summonCallBack, demons);\n  //------------------------------------------------------------------------------------------------\n  // That's all folks\n  //\n  jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n  return (true);\n  //---------------------------------------------------------------------------------------------\n  async function summonCallBack(selection) {\n    const FUNCNAME = \"summonCallBack(selection)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    if (TL===1) jez.trace(`--- Starting --- ${MACRO} ${FNAME} ---`);\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRO} ${FUNCNAME} ---`,\"selection\",selection);\n    //-------------------------------------------------------------------------------------------\n\n    const demonType = selection.split(\" \")[0]\n    if (demonType === \"Dretches\") {\n      jez.log(\"Time to summon some Dretches\")\n      summonDretches()\n    }\n    else if (demonType === \"Vrock\") {\n      jez.log(\"Time to summon a Vrock\")\n      summonVrock()\n    } else {\n      msg = `Bad news! This should not have happened to ${MACRO}`\n      ui.notifications.error(msg)\n      return (false)\n    }\n  }\n  //---------------------------------------------------------------------------------------------\n  async function summonDretches() {\n    const FUNCNAME = \"summonDretches()\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    if (TL>1) jez.trace(`--- Starting --- ${MACRO} ${FNAME} ---`);\n    //-------------------------------------------------------------------------------------------\n    const CREATURE_NAME = \"Dretch\"\n    let rc = null\n    let dretches = new Roll(`2d4`).evaluate({ async: false });\n    game.dice3d?.showForRoll(dretches);\n    for (let i = 1; i <= dretches.total; i++) {\n      rc = await summonCritter(CREATURE_NAME, i)\n      tokenIdArray.push(rc)\n    }\n    msg = `<b>${aToken.name}</b> summons ${dretches.total} ${CREATURE_NAME}es. They will serve \n    for one minute or until dismissed.`\n    postResults(msg)\n    addWatchdogEffect(tokenIdArray)\n  }\n  //---------------------------------------------------------------------------------------------\n  async function summonVrock() {\n    const FUNCNAME = \"summonVrock()\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    if (TL>1) jez.trace(`--- Starting --- ${MACRO} ${FNAME} ---`);\n    //-------------------------------------------------------------------------------------------\n    let rc = null\n    const CREATURE_NAME = \"Vrock\"\n    rc = await summonCritter(CREATURE_NAME, 1)\n    tokenIdArray.push(rc)\n    msg = `<b>${aToken.name}</b> summons a ${CREATURE_NAME}. It will serve \n    for one minute or until dismissed.`\n    postResults(msg)\n    addWatchdogEffect(tokenIdArray)\n  }\n}\n/***************************************************************************************************\n * Summon the actor and rename with a numeric suffix\n * \n * https://github.com/trioderegion/warpgate\n ***************************************************************************************************/\nasync function summonCritter(summons, number) {\n  const FUNCNAME = \"summonCritter(summons, number)\";\n  const FNAME = FUNCNAME.split(\"(\")[0] \n  if (TL===1) jez.trace(`--- Starting --- ${MACRO} ${FNAME} ---`);\n  if (TL > 1) jez.trace(`--- Starting --- ${MACRO} ${FUNCNAME} ---`,\"summons\",summons,\"number\",number);\n  //--------------------------------------------------------------------------------------\n  // Build data object for the spawnAt call \n  //\n  let argObj = {\n    defaultRange: 60,\n    duration: 1000,                     // Duration of the intro VFX\n    img: aItem.img,                     // Image to use on the summon location cursor\n    introTime: 750,                    // Amount of time to wait for Intro VFX\n    introVFX: '~Explosion/Explosion_01_${color}_400x400.webm', // default introVFX file\n    name: aItem.name,                   // Name of action (message only), typically aItem.name\n    outroVFX: '~Smoke/SmokePuff01_*_${color}_400x400.webm', // default outroVFX file\n    scale: 1.0,\n    source: aToken,                     // Coords for source (with a center), typically aToken\n    suppressTokenMold: 1250,\n    templateName: `%${summons}%`,        // Name of the actor in the actor directory\n    width: 2,                           // Width of token to be summoned\n    traceLvl: TL\n  }\n  //--------------------------------------------------------------------------------------\n  // If we are summoning a Dretch, the argObj needs to be revised\n  //\n  if (summons === \"Dretch\") {\n    argObj.minionName = `${aToken.name}'s ${summons} ${number}`\n    if (TL > 2) jez.trace(`${FNAME} | Updated minionName`, argObj.minionName)\n    argObj.width = 1\n  }\n  //--------------------------------------------------------------------------------------\n  // Call spawnAt to do the deed \n  //\n  let returned = await jez.spawnAt(summons, aToken, aActor, aItem, argObj)\n  return returned\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n  jez.log(msg);\n  let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n  jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * \n ***************************************************************************************************/\n async function addWatchdogEffect(tokenIdArray) {\n  const FUNCNAME = \"addWatchdogEffect(tokenIdArray)\";\n  const FNAME = FUNCNAME.split(\"(\")[0] \n  if (TL===1) jez.trace(`--- Starting --- ${MACRO} ${FNAME} ---`);\n  if (TL > 1) jez.trace(`--- Starting --- ${MACRO} ${FUNCNAME} ---`,\"tokenIdArray\",tokenIdArray);\n  //------------------------------------------------------------------------------------------------\n  let tokenIds = \"\"\n  const EXPIRE = [\"newDay\", \"longRest\", \"shortRest\"];\n  const GAME_RND = game.combat ? game.combat.round : 0;\n  // Build list of token IDs seperated by spaces\n  for (let i = 0; i < tokenIdArray.length; i++) tokenIds+= `${tokenIdArray[i]} ` \n  if (TL > 1) jez.trace(`${FNAME} | tokenIdArray`,tokenIdArray);\n  const CE_DESC = `Summoned demon servant(s) is active.`\n  let effectData = {\n    label: aItem.name,\n    icon: aItem.img,\n    origin: LAST_ARG.uuid,\n    disabled: false,\n    duration: { rounds: 10, startRound: GAME_RND, startTime: game.time.worldTime },\n    flags: { \n      dae: { macroRepeat: \"none\", specialDuration: EXPIRE }, \n      convenientDescription: CE_DESC \n    },\n    changes: [\n         { key: `macro.execute`, mode: jez.ADD, value: `DeleteTokenMacro ${tokenIds}`, priority: 20 },\n    ]\n  };\n  if (TL > 1) jez.trace(`${FNAME} | effectData`,effectData);\n  if (TL > 3) jez.trace(`${FNAME} | MidiQOL.socket().executeAsGM(\"createEffects\"`,\"aToken.actor.uuid\",\n  aToken.actor.uuid,\"effectData\",effectData);\n  await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });  \n  if (TL > 0 ) jez.trace(`---  Finished --- ${MACRO} ${FNAME} ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.utj5h0KyMwF0Jp33"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}