{
  "name": "Tentacles, Octopus",
  "type": "weapon",
  "img": "Tokens/Beasts/Avatar/Octopus.png",
  "data": {
    "description": {
      "value": "<p><em>Melee Weapon Attack </em>+4, Reach 5 ft., one target. <em>Hit : </em>1 (1) bludgeoning damage.</p>\n<p>The target is grappled, until this grapple ends, the %TOKENNAME% can't use its tentacles on another target</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This is automated including creation of an escape grapple action on the target.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "quantity": 1,
    "weight": 1,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 5,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "dex",
    "actionType": "mwak",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1",
          "bludgeoning"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "amm": false,
      "hvy": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "lgt": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "ada": false,
      "lod": false,
      "mgc": false,
      "sil": false
    },
    "proficient": true
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "fumbleThreshold": null,
      "effectActivation": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Tentacles",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Tentacles.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Add grapple element of an Octopus tentacle hit.\n * \n *  On a hit the target is grappled, escape dc 10 Until this grapple ends, the octopus can't use its \n *  tentacles on another target.\n * \n * 11/29/22 0.1 JGB Created from Grapple_Initiate_1.3.js\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 1;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //---------------------------------------------------------------------------------------------------\n if (TL>1) jez.trace(`${TAG} === Starting ===`);\n if (TL>2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n const LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n //---------------------------------------------------------------------------------------------------\n // Set the value for the Active Token (aToken)\n let aToken;         \n if (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \n else aToken = game.actors.get(LAST_ARG.tokenId);\n let aActor = aToken.actor; \n //\n // Set the value for the Active Item (aItem)\n let aItem;         \n if (args[0]?.item) aItem = args[0]?.item; \n else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n //---------------------------------------------------------------------------------------------------\n // Run the main procedures, choosing based on how the macro was invoked\n //\n if (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\n if (TL>1) jez.trace(`${TAG} === Finished ===`);\n /*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n  *    END_OF_MAIN_MACRO_BODY\n  *                                END_OF_MAIN_MACRO_BODY\n  *                                                             END_OF_MAIN_MACRO_BODY\n  ****************************************************************************************************\n  * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n  *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function preCheck() {\n     if (args[0].targets.length !== 1)       // If not exactly one target \n         return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`,\"w\");\n     if (LAST_ARG.hitTargets.length === 0)   // If target was missed, return\n         return jez.badNews(`Target was missed.`, \"w\")\n     return(true)\n }\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-----------------------------------------------------------------------------------------------\n    // If the originator of the grapple is already grappling, may not again\n    //\n    if (aToken.actor.effects.find(ef => ef.data.label === \"Grappling\")) {\n        msg = `${aToken.name} may not initiate a grapple while already grappling.`\n        postResults(msg);\n        return jez.badNews(msg,'i')\n    }\n    /**************************************************************************\n     *  Apply Grappled Condition\n     *************************************************************************/\n        if (TL>1) jez.trace(`${TAG} Apply grappled condition`);\n        jezcon.add({ effectName: 'Grappled', uuid: tToken.actor.uuid, origin: aActor.uuid })\n        let message = `<b>${aToken.name}</b> has grappled <b>${tToken.name}</b>`\n        if (TL>1) jez.trace(`${TAG} ${message}`);\n        postResults(message);\n\n    /**************************************************************************\n     *  Apply Grappling Condition\n     *************************************************************************/\n        if (TL>1) jez.trace(`${TAG} Apply grappled condition`);\n        await jez.wait(250)\n        jezcon.add({ effectName: 'Grappling', uuid: aToken.actor.uuid })\n        //-------------------------------------------------------------------------------\n        // Find the two just added effect data objects so they can be paired, to expire \n        // together.\n        //\n        await jez.wait(100)\n        let tEffect = tToken.actor.effects.find(ef => ef.data.label === \"Grappled\" && ef.data.origin === aActor.uuid)\n        if (!tEffect) return jez.badNews(`Sadly, there was no Grappled effect from ${aToken.name} found on ${tToken.name}.`, \"warn\")\n        let oEffect = aToken.actor.effects.find(ef => ef.data.label === \"Grappling\")\n        if (!oEffect) return jez.badNews(`Sadly, there was no Grappling effect found on ${aToken.name}.`, \"warn\")\n        const GM_PAIR_EFFECTS = jez.getMacroRunAsGM(\"PairEffects\")\n        if (!GM_PAIR_EFFECTS) { return false }\n        await jez.wait(500)\n        await GM_PAIR_EFFECTS.execute(oEffect.uuid, tEffect.uuid)\n        //-------------------------------------------------------------------------------\n        // Create an Action Item to allow the target to attempt escape\n        //\n        const GM_MACRO = jez.getMacroRunAsGM(jez.GRAPPLE_ESCAPE_MACRO)\n        if (!GM_MACRO) { return false }\n        await GM_MACRO.execute(\"create\", aToken.document.uuid, tToken.document.uuid, aToken.actor.uuid)\n    // }\n    await jez.wait(250)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG}--- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.OjDYwIhTjncrQ5Wd"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}