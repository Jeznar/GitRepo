{
  "name": "Steal Shadow in Ravenloft",
  "type": "feat",
  "img": "Icons_JGB/Monster_Features/Shadow_Icon.png",
  "data": {
    "description": {
      "value": "<p>Strahd targets one Medium or smaller creature that casts a shadow. The target’s shadow must be visible to Strahd and within 30 feet of him. If the target fails a DC 17 Charisma saving throw, its shadow detaches from it and becomes a<span class=\"Apple-converted-space\"> </span><a class=\"tooltip-hover monster-tooltip\" style=\"box-sizing:inherit;outline:0px;color:#47d18c;text-decoration-line:none;font-weight:bold !important\" href=\"https://www.dndbeyond.com/monsters/17010-shadow\" data-tooltip-href=\"//www.dndbeyond.com/monsters/17010-tooltip?disable-webm=1&amp;disable-webm=1\">shadow</a><span class=\"Apple-converted-space\"> </span>that obeys Strahd’s commands, acting on initiative count 20.</p>\n<section class=\"secret\">\n<p>A<span class=\"Apple-converted-space\"> </span><a class=\"tooltip-hover spell-tooltip\" style=\"box-sizing:inherit;outline:0px;color:#47d18c;text-decoration-line:none;font-style:italic;font-weight:bold !important\" href=\"https://www.dndbeyond.com/spells/greater-restoration\" data-tooltip-href=\"//www.dndbeyond.com/spells/2129-tooltip?disable-webm=1&amp;disable-webm=1\">greater restoration</a><span class=\"Apple-converted-space\"> </span>spell or a<span class=\"Apple-converted-space\"> </span><a class=\"tooltip-hover spell-tooltip\" style=\"box-sizing:inherit;outline:0px;color:#47d18c;text-decoration-line:none;font-style:italic;font-weight:bold !important\" href=\"https://www.dndbeyond.com/spells/remove-curse\" data-tooltip-href=\"//www.dndbeyond.com/spells/2229-tooltip?disable-webm=1&amp;disable-webm=1\">remove curse</a><span class=\"Apple-converted-space\"> </span>spell cast on the target restores its natural shadow, but only if its undead shadow has been destroyed.</p>\n</section>\n<hr />\n<p><strong>FoundryVTT</strong>: This is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "lair",
      "cost": 1,
      "condition": "Within Ravenloft Castle"
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.6CyVtvmrNwQyB5Z2"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Steal Shadow in Ravenloft",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Stolen_Shadow.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Strahd's Lair Ability to steal and control a shadow.\n * \n *   Strahd targets one Medium or smaller creature that casts a shadow. The target's shadow must be \n *   visible to Strahd and within 30 feet of him. If the target fails a DC 17 Charisma saving throw, \n *   its shadow detaches from it and becomes a shadow that obeys Strahd's commands, acting on \n *   initiative count 20. A greater restoration spell or a remove curse spell cast on the target \n *   restores its natural shadow, but only if its undead shadow has been destroyed.\n * \n * This macro runs as an OnUse macro and assumes the item card does nothing other than launchng it.\n * \n * - Make sure one, in range, visible token is targeted.\n * - Check for presence of debuff EFFECT_NAME that serves as an immunity marker\n * - Roll and check save, exiting on success\n * - Apply EFFECT_NAME to the target \n * - warpgate spawn a shadow with appropriate mods to the token\n * - Add the new token to combat tracker and force initiative count 20\n * \n * 11/15/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst ALLOWED_UNITS = [\"\", \"ft\", \"any\"];    // Assume blank and any is feet\nconst EFFECT_NAME = `Stolen Shadow`\nconst SAVE_DC = aActor.getRollData().attributes.spelldc;\nconst SAVE_TYPE = \"cha\";\nconst MINION = `Shadow`\nif (TL > 2) jez.trace(`${TAG} Variable Values`,\n    `ALLOWED_UNITS ==>`, ALLOWED_UNITS,\n    `EFFECT_NAME   ==>`, EFFECT_NAME,\n    `SAVE_DC       ==>`, SAVE_DC,\n    `SAVE_TYPE     ==>`, SAVE_TYPE,\n    `MINION        ==>`, MINION);\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    //  Make sure one, in range, visible token is targeted.\n    //\n    if (args[0].targets.length !== 1) {     // If not exactly one target \n        msg = `Target exactly one target. ${args[0]?.targets?.length} targeted.`\n        postResults(msg)\n        return jez.badNews(msg, \"w\")\n    }\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-----------------------------------------------------------------------------------------------\n    //  Target is in range?\n    const MAX_RANGE = 30 // jez.getRange(aItem, ALLOWED_UNITS)\n    const DISTANCE = jez.getDistance5e(aToken, tToken)\n    if (DISTANCE > MAX_RANGE) {\n        msg = `${tToken.name} is ${DISTANCE} away, max range is ${MAX_RANGE} feet.`\n        postResults(msg)\n        return jez.badNews(msg, \"i\")\n    }\n    if (TL > 2) jez.trace(`${TAG} Variable Values`,\n        `tToken ==>`, tToken,\n        `tActor ==>`, tActor,\n        `MAX_RANGE ==>`, MAX_RANGE,\n        `DISTANCE ==>`, DISTANCE)\n    //-----------------------------------------------------------------------------------------------\n    // Target is visible?\n    let ray = new Ray(aToken.center, tToken.center)\n    let badLoS = canvas.walls.checkCollision(ray, { type: \"sight\", mode: \"any\" })\n    if (badLoS) {\n        msg = `${aToken.name}'s line of sight blocked to ${tToken.name}`\n        postResults(msg)\n        return jez.badNews(msg, \"i\")\n    }\n    if (jezcon.hasCE(\"Blinded\", aToken.actor.uuid, { traceLvl: 0 })) {\n        msg = `${aToken.name} is blinded, can not see ${tToken.name}`\n        postResults(msg)\n        return jez.badNews(msg, \"i\")\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Check size of target\n    //\n    const TARGET_SIZE_OBJ = await jez.getSize(tToken)\n    if (TARGET_SIZE_OBJ.value > 3) {\n        msg = `${tToken.name} is to large to have its shadow stolen.`\n        postResults(msg)\n        return jez.badNews(msg, \"i\")\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Check for presence of debuff EFFECT that serves as an immunity marker\n    //\n    if (jezcon.hasCE(EFFECT_NAME, tToken.actor.uuid, { traceLvl: 0 })) {\n        msg = `${tToken.name}'s shadow already stolen`\n        postResults(msg)\n        return jez.badNews(msg, \"i\")\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Roll and check save, exiting on success\n    //\n    let save = await tToken.actor.rollAbilitySave(SAVE_TYPE, { chatMessage: true, fastForward: true })\n    if (save.total >= SAVE_DC) {\n        msg = `${tToken.name} resisted the ${aItem.name} effect.`\n        postResults(msg)\n        return\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Apply EFFECT to the target \n    //\n    console.log(`LAST_ARG.targetUuids`, LAST_ARG.targetUuids)\n    await jezcon.addCondition(EFFECT_NAME, LAST_ARG.targetUuids,\n        { allowDups: false, replaceEx: true, origin: aActor.uuid, overlay: false, traceLvl: TL })\n    //-----------------------------------------------------------------------------------------------\n    // warpgate spawn a shadow with appropriate mods to the token\n    //\n    const shadowID = await spawnShadow(aToken, tToken, {traceLvl: TL})\n    //await jez.wait(3000)\n    let shadowToken = await canvas.tokens.placeables.find(ef => ef.id === shadowID[0])\n    if (TL > 2) jez.trace(`${TAG} Shadow Info`,\n        `shadowID    ==>`, shadowID,\n        `shadowToken ==>`, shadowToken)\n    //-----------------------------------------------------------------------------------------------\n    // Add the new token to combat tracker and force initiative count 20    \n    //\n    await shadowToken.toggleCombat();\n    shadowToken.combatant.update({initiative: 20})\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    msg = `${tToken.name}'s shadow has been stripped away and is seemingly independent and angry.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Use warpgate though library call to spawn in the shadow.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function spawnShadow(aToken, tToken, options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"aToken\", aToken, \"tToken\", tToken,\n        \"options\", options);\n    if (TL > 2) jez.trace(`${TAG} Interesting Values`, \n        \"tToken.data.img ==> \", tToken.data.img);\n    //--------------------------------------------------------------------------------------------------\n    // Build the dataObject for our summon call\n    //\n    let argObj = {\n        defaultRange: 5,                    // Defaults to 30, but this varies per spell\n        duration: 1000,                     // Duration of the intro VFX\n        introTime: 1000,                    // Amount of time to wait for Intro VFX\n        introVFX: '~Explosion/Explosion_01_${color}_400x400.webm', // default introVFX file\n        minionName: `Shadow of ${tToken.name}`,\n        templateName: MINION,\n        name: aItem.name,                   // Name of action (message only), typically aItem.name\n        outroVFX: '~Smoke/SmokePuff01_01_Regular_${color}_400x400.webm', // default outroVFX file\n        scale: 0.5,\t\t\t\t\t\t\t// Default value but needs tuning at times\n        source: tToken,                     // Coords for source (with a center), typically aToken\n        width: 1,                           // Width of token to be summoned, 1 is the default\n        traceLvl: TL                        // Trace level, matching calling function decent choice\n    }\n    argObj.updates = {\n        actor: {\n            name: `Shadow of ${tToken.name}`,\n            // 'data.attributes.hp': { value: 66, max: 66 }\n        },\n        token: { \n            name: `Shadow of ${tToken.name}`,\n            img: tToken.data.img,\n            tint: \"#404040\",\n            alpha: 0.5                         // AKA Opacity\n        },\n     }\n    //--------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    let summonData = await game.actors.getName(MINION)\n    argObj.img = summonData ? summonData.img : aItem.img\n    //--------------------------------------------------------------------------------------------------\n    // Do the actual summon\n    //\n    return (await jez.spawnAt(MINION, aToken, aActor, aItem, argObj))\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}