{
  "name": "Horrifying Visage",
  "type": "feat",
  "img": "Icons_JGB/Monsters/Banshee.png",
  "data": {
    "description": {
      "value": "<p>As an action, the creature displays her horrifying visage.</p>\n<p>Each non-undead creature within 60 feet that can see her must succeed on a <strong>DC 13 Wisdom</strong> saving throw or be @JournalEntry[tjg0x0jXlwvbdI9h]{Frightened} for 1 minute.</p>\n<p>A frightened target can repeat the saving throw at the end of each of its turns, with disadvantage if the banshee is within line of sight, ending the effect on itself on a success.</p>\n<p>If a target’s saving throw is successful or the effect ends for it, the target is immune to the Horrifying Visage for the next 24 hours.</p>\n<p> </p>\n<p> </p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 13,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Horrifying Visage",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Horrifying_Visage.0.3.js\"\nconsole.log(MACRONAME)\n/*****************************************************************************************\n * Implment Banshee Horrifying Visage \n * \n *   Horrifying Visage. Each non-undead creature within 60 feet of the banshee that can see \n *   her must succeed on a DC 13 Wisdom saving throw or be frightened for 1 minute. A \n *   frightened target can repeat the saving throw at the end of each of its turns, with \n *   disadvantage if the banshee is within line of sight, ending the effect on itself on a \n *   success. If a target's saving throw is successful or the effect ends for it, the \n *   target is immune to the banshee's Horrifying Visage for the next 24 hours.\n * \n * 01/01/21 0.1 Creation of Macro\n * 08/02/22 0.2 Add convenientDescription\n * 10/21/22 0.3 JGB FoundryVTT 9 fix: Swap deleteEmbeddedEntity for deleteEmbeddedDocuments\n *****************************************************************************************/\nconst DEBUG = true;\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim off the version number and extension\njez.log(\"\")\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nconst ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst GAME_RND = game.combat ? game.combat.round : 0;\n// const CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nlet msg = \"\";\nlet errorMsg = \"\";\nconst BLIND_COND = \"Blinded\"\nconst HORRIFIED_COND = \"Horrified\"\nconst IMMUNIZED_COND = \"Horrified, Immune\"\nconst HORRIFIED_ICON = \"Icons_JGB/Monster_Features/Horrified.png\"\nconst IMMUNIZED_ICON = \"Icons_JGB/Monster_Features/Horrified_Immune.png\"\nconst HORRIFIED_JRNL = \"@JournalEntry[tjg0x0jXlwvbdI9h]{Frightened}\"\n\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_LOOP = \"modules/jb2a_patreon/Library/Generic/Template/Circle/Vortex_01_Regular_Purple_600x600.webm\"\nconst VFX_INTRO = \"modules/jb2a_patreon/Library/Generic/Template/Circle/VortexIntro_01_Regular_Purple_600x600.webm\"\nconst VFX_OUTRO = \"modules/jb2a_patreon/Library/Generic/Template/Circle/VortexOutro_01_Regular_Purple_600x600.webm\"\nconst VFX_OPACITY = 0.8;\nconst VFX_SCALE = 5.50;\n\n\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach();\t\t\t\t\t    \n\njez.log(`============== Finishing === ${MACRONAME} =================`);\njez.log(\"\")\nreturn;\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(`${aToken.name} immune to ${HORRIFIED_COND} for 24 hours`)\n    applyImmunized(aToken)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n  }\n  /***************************************************************************************************\n * Perform the code that runs every turn, a DAE feature\n ***************************************************************************************************/\n async function doEach() {\n    const FUNCNAME = \"doEach()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    // Expecting arguments passed of this form: Save_DC ${saveDC} ${saveType}\n    let save = null;\n    const SAVE_DC = args[args.length - 3]\n    const SAVE_TYPE = args[args.length - 2]\n    let flavor = \"\" \n    jez.log(`${aToken.name} attempts DC${SAVE_DC} ${SAVE_TYPE} saving to remove ${HORRIFIED_COND} effect.`);\n    jez.log(`aActor ${aActor.name}`, aActor)\n\n     //-----------------------------------------------------------------------------------------\n     // Parse the passed data to find the origin token, etal.\n     // It will be of form: Scene.MzEyYTVkOTQ4NmZk.Token.4k8NyJnKNvjALfja.Item.MTI3MDA4YzllNTZh\n     //\n     let origin = LAST_ARG.origin\n     let goodLoS = false;\n     const ORIGIN_TOKENS = origin.split(\".\")\n     const ORIGIN_TOKENID = ORIGIN_TOKENS[3];\n     const ORIGIN_ITEMID = ORIGIN_TOKENS[5];\n     jez.log(`Origin Token ID ${ORIGIN_TOKENID}, Item ID ${ORIGIN_ITEMID}`)\n     let oToken = canvas.tokens.placeables.find(ef => ef.id === ORIGIN_TOKENID)\n     jez.log(`Origin token ${oToken.name}`, oToken)\n     let oItem = oToken.actor.data.items.get(ORIGIN_ITEMID)\n     jez.log(`Origin item ${oItem.name}`, oItem)\n     //-----------------------------------------------------------------------------------------\n     // Grab the horrified condition info\n     //\n     let condition = aActor.effects.find(ef => ef.data.label === HORRIFIED_COND)\n     if (condition) {\n         jez.log(\"Horrified Condition\", condition)\n         // Does the afflicted have a clear LoS to the originator?\n         goodLoS = canvas.walls.checkCollision(new Ray(aToken.center, oToken.center), { type: \"sight\", mode: \"any\" })\n         jez.log(`${aToken.name} LoS to ${oToken.name} clear?`, goodLoS)\n     } else {\n         msg = `Somehow ${aToken.name} lacks the ${HORRIFIED_COND} condition.  HeLp!`\n         ui.notifications.error(msg)\n         console.log(msg)\n         return\n     }\n     //-----------------------------------------------------------------------------------------\n     // Execute the save, imposing disadvantage if origin can not be seen.\n     //\n     if (goodLoS) {\n         flavor = `${aToken.name} attempts ${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> \n            save to remove <b>${aItem.name}</b> normally as ${oToken.name} can not be seen.`;\n         save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: flavor, chatMessage: true, fastforward: true }));\n     } else {\n         flavor = `${aToken.name} attempts ${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> \n            save to remove <b>${aItem.name}</b> at disadvantage as ${oToken.name} can be seen.`;\n         save = (await aActor.rollAbilitySave(SAVE_TYPE, { disadvantage: true, flavor: flavor, chatMessage: true, fastforward: true }));\n     }\n     jez.log(`Save`, save)\n     //-----------------------------------------------------------------------------------------\n     // Apply the save results\n     //\n     if (save.total < SAVE_DC) {\n         jez.log(`${aToken.name} failed with a ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n     } else {\n         jez.log(`${aToken.name} saved with a ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n         // aActor.deleteEmbeddedEntity(\"ActiveEffect\", LAST_ARG.effectId); // Obsolete at FVTT 9.x\n         aActor.deleteEmbeddedDocuments(\"ActiveEffect\", [LAST_ARG.effectId]);\n     }\n     jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n     return;\n }\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    let isNPC = false;\n    let targetType = null;\n    let tokensToSave = []\n    const SAVE_TYPE = \"wis\"\n    const SAVE_DC = aActor.data.data.attributes.spelldc;\n    const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> to resisit <b>${aItem.name}</b>`;\n    let failSaves = []  // Array to contain the tokens that failed their saving throws\n    let madeSaves = []  // Array to contain the tokens that made their saving throws\n    let madeNames = \"\"\n    let failNames = \"\"\n    let immuneNames = \"\"\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n\n    //---------------------------------------------------------------------------------------------\n    // Fetch the spell effect range\n    //\n    let RANGE = aItem.data.range?.value ? aItem.data.range?.value : 60\n    let UNITS = aItem.data.range.units;\n    jez.log(`range ${RANGE}, units ${UNITS}`);\n    if (ALLOWED_UNITS.includes(UNITS)) {\n        jez.log(\"Units are ok\");\n    } else {\n        jez.log(`Unit ${UNITS} not in`, ALLOWED_UNITS);\n        ui.notifications.error(`Unit ${UNITS} not in allowed units`);\n        return (false);\n    }\n    //---------------------------------------------------------------------------------------------\n    // Startup ye'ole VFX\n    //\n    runVFX();\n    //---------------------------------------------------------------------------------------------\n    // Proceed to doing actual things\n    //\n    let tTokens = await jez.tokensInRange(aToken, RANGE)\n    let tTokenCnt = tTokens?.length\n    jez.log(\"\")\n    jez.log(`${tTokenCnt} Token(s) found within ${RANGE} feet`, tTokens)\n    for (let i = 0; i < tTokenCnt; i++) {\n        //-----------------------------------------------------------------------------------------\n        // Check to see if the current target has the BLIND_COND\n        //\n        if (tTokens[i].actor.effects.find(ef => ef.data.label === BLIND_COND)) {\n            jez.log(`${tTokens[i].name} is afflicted by ${BLIND_COND}`)\n            immuneNames += `o <b>${tTokens[i].name} (Blind)</b><br>`\n            continue\n        }\n        //-----------------------------------------------------------------------------------------\n        // Check to see if the current target has the IMMUNIZED_COND\n        //\n        if (tTokens[i].actor.effects.find(ef => ef.data.label === IMMUNIZED_COND)) {\n            jez.log(`${tTokens[i].name} has ${IMMUNIZED_COND} condition`)\n            immuneNames += `o <b>${tTokens[i].name} (Immunized)</b><br>`\n            continue\n        }\n        //-----------------------------------------------------------------------------------------\n        // Check to see if target is undead and thus immune\n        //\n        if (tTokens[i].document._actor.data.type === \"npc\") isNPC = true; else isNPC = false;\n        if (isNPC) targetType = tTokens[i].document._actor.data.data.details.type.value \n              else targetType = tTokens[i].document._actor.data.data.details.race.toLowerCase()\n        if (targetType.includes(\"undead\")) {\n            jez.log(`${tTokens[i].name} is undead`)\n            immuneNames += `o <b>${tTokens[i].name} (Undead)</b><br>`\n            continue\n        }\n        //-----------------------------------------------------------------------------------------\n        // Check to see if vision is blocked by a wall between current pair\n        //\n        let blocked = canvas.walls.checkCollision(new Ray(tTokens[i].center, aToken.center),\n            {type:\"sight\", mode:\"any\"})\n        if (blocked) {\n            jez.log(`${tTokens[i].name} has no LoS to ${aToken.name}`)\n            immuneNames += `o <b>${tTokens[i].name} (no LoS)</b><br>`\n            continue\n        }\n        //---------------------------------------------------------------------------------------------\n        // Proceed with the tokens that might be affected (need to roll saves)\n        //\n        tokensToSave.push(tTokens[i])\n        let save = (await tTokens[i].actor.rollAbilitySave(SAVE_TYPE, { FLAVOR, chatMessage: false, fastforward: true }));\n        if (save.total < SAVE_DC) {\n            jez.log(`${tTokens[i].name} failed with a ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n            failSaves.push(tTokens[i])\n            failNames += `+ <b>${tTokens[i].name}</b> with a ${save.total} (${save._formula})<br>`\n        } else {\n            jez.log(`${tTokens[i].name} saved with a ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n            madeSaves.push(tTokens[i])\n            madeNames += `- <b>${tTokens[i].name}</b> with a ${save.total} (${save._formula})<br>`\n        }\n    }\n\n    //---------------------------------------------------------------------------------------------\n    // If no tokens need to roll saves, we're done, get on out of here.\n    //\n    if (tokensToSave.length < 1) {\n        msg = `There are no targets that need to save against ${aToken.name}'s ${aItem.name}`\n        jez.log(`msg`)\n        let chatMessage = game.messages.get(args[args.length - 1].itemCardId);\n        await jez.addMessage(chatMessage, {color:\"purple\", fSize:15, msg:msg, tag:\"saves\" })\n        return;\n    }\n    //---------------------------------------------------------------------------------------------\n    // Process Tokens that Failed Saves, giving them the HORRIFIED_COND\n    //\n    jez.log(`${failSaves.length} Tokens failed saves, need '${HORRIFIED_COND}' added`)\n    for (let i = 0; i < failSaves.length; i++) {\n        jez.log(` ${i + 1}) ${failSaves[i].name}`, failSaves[i])\n        applyHorrified(failSaves[i], SAVE_TYPE, SAVE_DC);\n    }\n    //---------------------------------------------------------------------------------------------\n    // Process Tokens that made Saves, giving them the IMMUNIZED_COND\n    //\n    jez.log(`${madeSaves.length} Tokens passed saves, need '${IMMUNIZED_COND}' added`)\n    for (let i = 0; i < madeSaves.length; i++) {\n        jez.log(` ${i + 1}) ${madeSaves[i].name}`, madeSaves[i])\n        applyImmunized(madeSaves[i])\n    }\n    //---------------------------------------------------------------------------------------------\n    // Craft results message and post it.\n    //\n    let chatMessage = await game.messages.get(args[args.length - 1].itemCardId);\n    await jez.wait(100)\n    if (immuneNames) {\n        msg = `<b><u>Immune</u></b><br>${immuneNames}`\n        await jez.wait(100)\n        // https://www.w3schools.com/tags/ref_colornames.asp\n        jez.addMessage(chatMessage, { color: \"purple\", fSize: 14, msg: msg, tag: \"saves\" })\n    }\n    if (madeNames) {\n        msg = `<b><u>Successful ${SAVE_TYPE.toUpperCase()} Save</u></b> vs DC${SAVE_DC}<br>${madeNames}`\n        await jez.wait(100)\n        jez.addMessage(chatMessage, { color: \"darkgreen\", fSize: 14, msg: msg, tag: \"saves\" })\n    }\n    if (failNames) {\n        msg = `Creatures that failed their save are <b>${HORRIFIED_JRNL}</b> for 1 minute or they \n            make a DC${SAVE_DC} ${SAVE_TYPE} save at the end of their turn, each round.<br>`\n            await jez.wait(100)\n            jez.addMessage(chatMessage, { color: \"darkred\", fSize: 14, msg: msg, tag: \"saves\" })\n        msg = `<b><u>Failed ${SAVE_TYPE.toUpperCase()} Save</u></b> vs DC${SAVE_DC}<br>${failNames}`\n        await jez.wait(100)\n        jez.addMessage(chatMessage, { color: \"darkred\", fSize: 14, msg: msg, tag: \"saves\" })\n    }\n    await jez.wait(100)\n    msg = `Total of ${tTokenCnt} target(s) within ${RANGE}ft of ${aToken.name}<br>`\n    jez.addMessage(chatMessage, { color: \"darkblue\", fSize: 14, msg: msg, tag: \"saves\" })\n\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n\n/***************************************************************************************************\n * Launch the VFX effects\n ***************************************************************************************************/\nasync function runVFX() {\n    new Sequence()\n        .effect()\n        .file(VFX_INTRO)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .waitUntilFinished(-500) // Negative wait time (ms) clips the effect to avoid fadeout\n        .effect()\n        .file(VFX_LOOP)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        //.persist()\n        .duration(3000)\n        .name(VFX_NAME) // Give the effect a uniqueish name\n        .fadeIn(10) // Fade in for specified time in milliseconds\n        .fadeOut(1000) // Fade out for specified time in milliseconds\n        .extraEndDuration(1200) // Time padding on exit to connect to Outro effect\n        .effect()\n        .file(VFX_OUTRO)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .attachTo(aToken)\n        .play();\n}\n/***************************************************************************************************\n * Apply the horrified condition\n ***************************************************************************************************/\nasync function applyHorrified(token, saveType, saveDC) {\n    const CE_DESC = `Horrified, DC${saveDC} WIS save (disadvantage if ${aToken.name} visible) at end of turns. May not approach ${aToken.name}.`\n    let effectData = [{\n        label: HORRIFIED_COND,\n        icon: HORRIFIED_ICON,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        flags: { \n            dae: { stackable: false, macroRepeat: \"endEveryTurn\" },\n            convenientDescription: CE_DESC\n         },\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [\n            { key: `flags.midi-qol.disadvantage.ability.check.all`, mode: jez.ADD, value: 1, priority: 20 },\n            { key: `flags.midi-qol.disadvantage.skill.all`, mode: jez.ADD, value: 1, priority: 20 },\n            { key: `flags.midi-qol.disadvantage.attack.all`, mode: jez.ADD, value: 1, priority: 20 },\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `Save_DC ${saveDC} ${saveType}`, priority: 20 },\n        ]\n    }];\n    let horrified = token.actor.effects.find(i => i.data.label === HORRIFIED_COND);\n    if (!horrified) applyEffect(token, effectData);\n}\n/***************************************************************************************************\n * Apply the Immune to Horrified Condition\n ***************************************************************************************************/\nasync function applyImmunized(token) {\n    const CE_DESC = `Immune to ${aToken.name}'s Horrified.`\n    let effectData = [{\n        label: IMMUNIZED_COND,\n        icon: IMMUNIZED_ICON,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        flags: { \n            dae: { stackable: false, macroRepeat: \"none\" },\n            convenientDescription: CE_DESC\n        },\n        duration: { rounds: 14400, seconds: 86400, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [\n            { key: `flags.gm-notes.notes`, mode: jez.CUSTOM, value: \"Immune to Horrifying Visage\", priority: 20 },\n        ]\n    }];\n    let horrified = token.actor.effects.find(i => i.data.label === HORRIFIED_COND);\n    if (!horrified) applyEffect(token, effectData);\n    //await wait(500);\n    //updateEffect(tokenD, target, conc);\n}\n/***************************************************************************************************\n * Applies an effect\n ***************************************************************************************************/\nasync function applyEffect(target, effectData){\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.actor.uuid, effects: effectData });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Item.grFwiaC6fD2KuqYZ"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}