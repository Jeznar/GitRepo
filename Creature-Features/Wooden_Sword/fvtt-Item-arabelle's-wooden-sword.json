{
  "name": "Arabelle's Wooden Sword",
  "type": "weapon",
  "img": "Icons_JGB/Weapons/Wooden_Sword.jpg",
  "data": {
    "description": {
      "value": "<p>Arabelle swings her sword with more enthuiasm than skill.  It does 1d2 + strength modifer damage. </p>\n<p>Arabelle's magic imbues it with two additional effects: </p>\n<ol>\n<li>On a hit, the target is at disadvantage on its next attack roll</li>\n<li>It also grants advantage to the next attack made against the target, regardless of a hit or a miss.</li>\n</ol>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "quantity": 1,
    "weight": 0,
    "price": 0,
    "attunement": 2,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 5,
      "width": null,
      "units": "ft",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "mwak",
    "attackBonus": "0",
    "chatFlavor": "Swings with great enthusiasm if not skill",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d2+@mod",
          "bludgeoning"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "simpleM",
    "baseItem": "",
    "properties": {
      "ada": false,
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": true,
      "lod": false,
      "mgc": true,
      "rch": false,
      "rel": false,
      "ret": false,
      "sil": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "critOther": false
    },
    "proficient": false
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "ItemMacro"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Arabelle's Wooden Sword",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "/************************************************************\n * Implement Arabelle's Wooden Sword action which has two \n * special results:\n * 1) On a hit, the target is at diadvantage on its next \n *    attack roll\n * 2) It also grants advantage to the next attack made against\n *    the target, regardless of a hit or a miss.\n * \n *  - Setup Variable\n *  - Verify initial conditons, exit on problems\n *    o Exactly one target selected\n *    o Check distance to target\n *  - If target was hit, apply the attack debuff\n *  - Apply the debuff too grant advantage on next attack\n *  - Post the result to chart card\n * \n * Midi-QoL Documentation: https://gitlab.com/tposney/midi-qol\n * \n * List of Midi-QoL Flags:\n * https://docs.google.com/spreadsheets/u/0/d/1Vze_sJhhMwLZDj1IKI5w1pvfuynUO8wxE2j8AwNbnHE/htmlview\n * \n * 05/02/22 Update for Foundry 9.x\n ***********************************************************/\nconst macroName = \"Wooden_Sword_0.4\"\nconst debug = 1;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5; // midi-qol mode values\njez.log(`Starting: ${macroName} arguments passed: ${args.length}`);\nlet gameRound = game.combat ? game.combat.round : 0;\nlet mqFlag = null;      // Midi-QoL Flag to apply\nlet mqExpire = [];    // Midi-QoL Expiration condition\nlet resultsString = \"\";\nlet attackHit = false;\n\n/************************************************************************\n* Set Variables for execution\n*************************************************************************/\n// let target = canvas.tokens.get(args[0].failedSaves[0]._id);\nlet actorD = game.actors.get(args[0].actor._id);\nlet tokenD = canvas.tokens.get(args[0].tokenId).actor;\nlet targetD = canvas.tokens.get(args[0].targets[0].id);\nlet itemD = args[0].item;\nlet player = canvas.tokens.get(args[0].tokenId);\nlet range = 5; range += 2.5;    // Add a half square buffer for diagonal adjacancy \nconst lastArg = args[args.length - 1];\nconst ABILITY = itemD.name;\nlet distance = 0;\n/************************************************************************\n* Check Initial Conditions\n*************************************************************************/\n// Need to have exactly one target selected\nif (game.user.targets.ids.length != 1) {\n    let message = `Target a single token to be acted upon. Targeted ${game.user.targets.ids.length} tokens`;\n    ui.notifications.warn(message);\n    jez.log(message);\n    return;\n} else jez.log(` targeting one target`);\n// Target needs to be in range\ndistance = canvas.grid.measureDistance(player, targetD);\ndistance = distance.toFixed(1);             // Chop the extra decimals, if any\njez.log(` Considering ${targetD.name} at ${distance} distance`);\nif (distance > range) {\n    let message = ` ${targetD.name} is not in range (${distance}), end ${macroName}`;\n    ui.notifications.warn(message);\n    jez.log(message);\n    return;\n}\n/************************************************************************\n * If target was hit, apply the attack debuff\n*************************************************************************/\nmqFlag = \"flags.midi-qol.disadvantage.attack.all\";\nmqExpire = [\"1Attack\", \"turnStartSource\", \"longRest\", \"shortRest\"];\njez.log(`${mqFlag}, ${mqExpire}`);\nif (args[0].hitTargets.length !== 0) attackHit = true\nif (attackHit) {\n    if (debug) {\n        let message = `Hit ${targetD.name}, apply attack debuff`;\n        jez.log(message);\n        let effectData = {\n            label: \"Attack Debuff\",\n            icon: itemD.img,\n            origin: player.uuid,\n            disabled: false,\n            duration: { rounds: 2, startRound: gameRound },\n            flags: { dae: { macroRepeat: \"none\", specialDuration: mqExpire } },\n            changes: [{\n                key: mqFlag,\n                value: 1,\n                mode: ADD,\n                priority: 20\n            }]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:targetD.actor.uuid, effects: [effectData] });\n    }\n} else {\n    let message = ` Missed ${targetD.name}, do not apply attack debuff`;\n    jez.log(message);\n}\n/************************************************************************\n * Apply the debuff to grant advantage on next attack\n *************************************************************************/\nmqFlag = \"flags.midi-qol.grants.advantage.attack.all\";\nmqExpire = [\"isAttacked\", \"turnStartSource\", \"longRest\", \"shortRest\"];\njez.log(`${mqFlag}, ${mqExpire}`);\n\njez.log(` Add debuff to ${targetD.name}`);\n\nlet effectData = {\n    label: \"Grant Advantage\",\n    icon: itemD.img,\n    origin: player.uuid,\n    disabled: false,\n    duration: { rounds: 2, startRound: gameRound },\n    flags: { dae: { macroRepeat: \"none\", specialDuration: mqExpire } },\n    changes: [{\n        key: mqFlag,\n        value: 1,\n        mode: ADD,\n        priority: 20\n    }]\n};\nawait MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:targetD.actor.uuid, effects: [effectData] });\n/************************************************************************\n * Post the results to chart card\n *************************************************************************/\nif (attackHit) {\n    if (debug) {\n        jez.log(` Post message that ${targetD.name} has attack debuff`);\n        resultsString = `${targetD.name} is befuddled and has disadvantage on it's next attack.<br><br>It is also distracted and grants advantage to next attacker.`;\n        // getting chat message\n        let chatMessage = await game.messages.get(lastArg.itemCardId);\n        // duplicating chat message to copy over\n        let content = await duplicate(chatMessage.data.content);\n        //let searchString = \"text you are looking for to replace\";\n        const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n        //let replaceString = \"replacement text\";\n        const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${resultsString}`;\n        // creating the object\n        content = await content.replace(searchString, replaceString);\n        // passing the update to the chat message\n        await chatMessage.update({ content: content });\n        await ui.chat.scrollBottom();\n    }\n} else {\n    if (debug) {\n        let message = `  Post message that ${targetD.name} does not have attack debuff`;\n        jez.log(message);\n        resultsString = `${targetD.name} is distracted by the wild swing and grants advantage to next attacker.`;\n        // getting chat message\n        let chatMessage = await game.messages.get(lastArg.itemCardId);\n        // duplicating chat message to copy over\n        let content = await duplicate(chatMessage.data.content);\n        //let searchString = \"text you are looking for to replace\";\n        const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n        //let replaceString = \"replacement text\";\n        const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${resultsString}`;\n        // creating the object\n        content = await content.replace(searchString, replaceString);\n        // passing the update to the chat message\n        await chatMessage.update({ content: content });\n        await ui.chat.scrollBottom();\n    }\n}\nreturn;",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.dHAVbmW0HG74s4Ax"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}