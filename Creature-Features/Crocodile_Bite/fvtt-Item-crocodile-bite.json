{
  "name": "Crocodile Bite",
  "type": "weapon",
  "img": "Tokens/Beasts/Avatar/Avatar_Crocodile.png",
  "data": {
    "description": {
      "value": "<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">Melee Weapon &nbsp;Reach 5 ft., one target. Hit :&nbsp;7&nbsp;(1d10 + @mod) piercing damage.</p>\n<ul style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">\n<li style=\"box-sizing: border-box; user-select: text;\">A large or smaller target is automatically&nbsp;<a class=\"entity-link content-link\" style=\"box-sizing: border-box; user-select: text; border: 1px solid var(--color-border-dark-tertiary);\" draggable=\"true\" data-type=\"JournalEntry\" data-entity=\"JournalEntry\" data-id=\"QAwq9CcEg3fh3qZ3\">&nbsp;Grappled</a></li>\n<li style=\"box-sizing: border-box; user-select: text;\">The grappled target is also&nbsp;<a class=\"entity-link content-link\" style=\"box-sizing: border-box; user-select: text; border: 1px solid var(--color-border-dark-tertiary);\" draggable=\"true\" data-type=\"JournalEntry\" data-entity=\"JournalEntry\" data-id=\"CZWEqV2uG9aDWJnD\">&nbsp;Restrained</a></li>\n<li style=\"box-sizing: border-box; user-select: text;\">Until this grapple ends, user of this ability is&nbsp;<a class=\"entity-link content-link\" style=\"box-sizing: border-box; user-select: text; border: 1px solid var(--color-border-dark-tertiary);\" draggable=\"true\" data-type=\"JournalEntry\" data-entity=\"JournalEntry\" data-id=\"KmWFRyfFImaXM7O9\">&nbsp;Grappling</a></li>\n<li style=\"box-sizing: border-box; user-select: text;\">Can&rsquo;t bite another target while grappling.</li>\n</ul>\n<hr style=\"box-sizing: border-box; user-select: text; border-top: 1px solid var(--color-border-light-primary); border-bottom: 1px solid var(--color-border-light-highlight); color: #191813; font-size: 13px;\" />\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">FoundryVTT</strong>: Escape is handled per the normal Grappled rules, not a Save DC as defined in RAW.&nbsp; An Escape action will be created on the target.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "quantity": 1,
    "weight": 0,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "mwak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d6+ @abilities.str.mod",
          "piercing"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "ada": false,
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "mgc": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "sil": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "critOther": false
    },
    "proficient": true
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "fumbleThreshold": null,
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Crocodile Bite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Crocodile_Bite.0.7.js\"\n/*****************************************************************************************\n * Macro that applies on hit:\n *  - Grappled and Restrained conditions to the target\n *  - Grappling to the initator\n * \n * 12/05/21 0.1 Creation of Macro\n * 12/05/21 0.2 Continuation\n * 12/06/21 0.3 Actually add code to apply conditions\n * 12/06/21 0.4 Seeking bug causing grappling not to be fully applied\n * 12/12/21 0.5 Eliminate cubCondition calls\n * 05/04/22 0.6 JGB Update for Foundry 9.x\n * 07/06/22 0.7 JGB Changed to use CE \n *****************************************************************************************/\nconst DEBUG = true;\nlet trcLvl = 1;\nlet msg = \"\";       // string to be appended to the itemCard reporting results\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;         \nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor; \n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst GRAPPLED_COND = \"Grappled\"\nconst GRAPPLING_COND = \"Grappling\"\nconst RESTRAINED_COND = \"Restrained\"\nconst GRAPPLED_JRNL = `@JournalEntry[${game.journal.getName(GRAPPLED_COND).id}]{Grappled}`\nconst GRAPPLING_JRNL = `@JournalEntry[${game.journal.getName(GRAPPLING_COND).id}]{Grappling}`\nconst RESTRAINED_JRNL = `@JournalEntry[${game.journal.getName(RESTRAINED_COND).id}]{Restrained}`\n//--------------------------------------------------------------------------------------\n// Make sure the invoking item actually reported a hit\nif (wasHit()) {\n    if (DEBUG) console.log(` a hit was reported`);\n} else {\n    if (DEBUG) console.log(` ${msg}`);\n    await postResults(msg);\n    if (DEBUG) console.log(`Ending ${MACRONAME}`);\n    return;\n}\n//--------------------------------------------------------------------------------------\n// Make sure one and only one token is targeted\n//\nif (oneTarget()) {\n    if (DEBUG) console.log(` one target is targeted (a good thing)`);\n} else {\n    if (DEBUG) console.log(` exception on number of targets selected: ${msg}`);\n    await postResults(msg);\n    if (DEBUG) console.log(`Ending ${MACRONAME}`);\n    return;\n}\nlet tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n//--------------------------------------------------------------------------------------\n// Make sure the target is no more than one size category larger than the actor\n//\nlet sizeDelta = sizesLarger(aToken, tToken)\nif (DEBUG) console.log(` sizeDelta: ${sizeDelta}`);\nif (sizeDelta > -2) {\n    if (DEBUG) console.log(` Size delta ok`);\n} else {\n    msg += `${tToken.name} is too large for ${tToken.name} to grapple.`\n    if (DEBUG) console.log(` Target is too large`);\n    await postResults(msg);\n    if (DEBUG) console.log(`Ending ${MACRONAME}`);\n    return;\n}\n//--------------------------------------------------------------------------------------\n// Make sure the actor is not already grappling\n//\nif (jezcon.hasCE(GRAPPLING_COND, aToken.actor.uuid))\n    return postResults(`<b>${aToken.name}</b> is already grappling, may not grapple a second time.<br>`)\n//----------------------------------------------------------------------------------\n// Apply the GRAPPLED and GRAPPLING Cconditions\n//\njezcon.add({ effectName: GRAPPLED_COND, uuid: tToken.actor.uuid, origin: aActor.uuid })\njezcon.add({ effectName: GRAPPLING_COND, uuid: aToken.actor.uuid, origin: aActor.uuid })\n//----------------------------------------------------------------------------------\n// Pile onto the target with a Restrained effect\n//\nawait jez.wait(100)\njezcon.add({ effectName: 'Restrained', uuid: tToken.actor.uuid, origin: aActor.uuid })\n//----------------------------------------------------------------------------------\n// Find the two just added effect data objects so they can be paired, to expire \n// together.\n//\nawait jez.wait(100)\nlet tEffect = tToken.actor.effects.find(ef => ef.data.label === GRAPPLED_COND && ef.data.origin === aActor.uuid)\nif (!tEffect) return jez.badNews(`Sadly, there was no Grappled effect from ${aToken.name} found on ${tToken.name}.`, \"warn\")\nlet oEffect = aToken.actor.effects.find(ef => ef.data.label === GRAPPLING_COND)\nif (!oEffect) return jez.badNews(`Sadly, there was no Grappling effect found on ${aToken.name}.`, \"warn\")\nconst GM_PAIR_EFFECTS = jez.getMacroRunAsGM(\"PairEffects\")\nif (!GM_PAIR_EFFECTS) { return false }\nawait jez.wait(100)\nawait GM_PAIR_EFFECTS.execute(aToken.id, oEffect.data.label, tToken.id, tEffect.data.label)\n//----------------------------------------------------------------------------------\n// Pair the target's grappled and restrained effects\n//\nawait jez.wait(100)\ntEffect = tToken.actor.effects.find(ef => ef.data.label === GRAPPLED_COND && ef.data.origin === aActor.uuid)\nif (!tEffect) return jez.badNews(`Sadly, there was no Grappled effect from ${aToken.name} found on ${tToken.name}.`, \"warn\")\noEffect = tToken.actor.effects.find(ef => ef.data.label === RESTRAINED_COND)\nif (!oEffect) return jez.badNews(`Sadly, there was no Restrained effect from ${aToken.name}.`, \"warn\")\nawait jez.wait(100)\nawait GM_PAIR_EFFECTS.execute(tToken.id, oEffect.data.label, tToken.id, tEffect.data.label)\n//-------------------------------------------------------------------------------\n// Create an Action Item to allow the target to attempt escape\n//\nconst GM_ESCAPE = jez.getMacroRunAsGM(jez.GRAPPLE_ESCAPE_MACRO)\nif (!GM_ESCAPE) { return false }\nawait GM_ESCAPE.execute(\"create\", aToken.document.uuid, tToken.document.uuid, aToken.actor.uuid)\n//--------------------------------------------------------------------------------------\n// Post results\n//\nmsg = `${tToken.name} has been ${GRAPPLED_JRNL} and ${RESTRAINED_JRNL} by ${aToken.name} who is \n       ${GRAPPLING_JRNL}.<br><br>${tToken.name} may attempt to end the grapple per standard grapple rules.`\n postResults(msg);\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************\n * Check to see if at least one target was hit, Return false if missed.\n ***************************************************************************************/\nfunction wasHit() {\n    let DEBUG = false;\n\n    if (args[0].hitTargets.length === 0) {\n        msg = ` Missed ${tToken.name}, will not check for effects`;\n        if (DEBUG) console.log(msg);\n        return(false);\n    } else {\n        return(true);\n    }\n}\n/****************************************************************************************\n * Verify exactly one target selected, boolean return\n ***************************************************************************************/\nfunction oneTarget() {\n    let DEBUG = false;\n    if (!game.user.targets) {\n        msg = `Targeted nothing, must target single token to be acted upon`;\n        // ui.notifications.warn(msg);\n        if (DEBUG) console.log(msg);\n        return (false);\n    }\n    if (game.user.targets.ids.length != 1) {\n        msg = `Please target a single token to be acted upon. <br>Targeted ${game.user.targets.ids.length} tokens`;\n        // ui.notifications.warn(msg);\n        if (DEBUG) console.log(msg);\n        return (false);\n    }\n    if (DEBUG) console.log(` targeting one target`);\n    return (true);\n}\n\n/****************************************************************************************\n * Return the number of sizes larger the second token is than the first.  \n *  - Negative return indicates Token1 is smaller than Token2 by that many increments.\n *  - Zero return indicates the same size\n *  - Positive return indicates Token1 is larger than Token2 by that many increments.\n ***************************************************************************************/\nfunction sizesLarger(token1, token2) {\n    let DEBUG = false;\n\n    class CreatureSizes {\n        constructor(size) {\n            this.SizeString = size;\n            switch (size) {\n                case \"tiny\": this.SizeInt = 1; break;\n                case \"sm\": this.SizeInt = 2; break;\n                case \"med\": this.SizeInt = 3; break;\n                case \"lg\": this.SizeInt = 4; break;\n                case \"huge\": this.SizeInt = 5; break;\n                case \"grg\": this.SizeInt = 6; break;\n                default: this.SizeInt = 0;  // Error Condition\n            }\n        }\n    }\n    let token1SizeString = token1.document._actor.data.data.traits.size;\n    let token1SizeObject = new CreatureSizes(token1SizeString);\n    let token1Size = token1SizeObject.SizeInt;  // Returns 0 on failure to match size string\n    if (!token1Size) {\n        let msg = `Size of ${token1.name}, ${token1SizeString} failed to parse. End ${macroName}<br>`;\n        if (debug) console.log(msg);\n        ui.notifications.error(msg);\n        return(99);\n    }\n    if (DEBUG) console.log(` Token1: ${token1SizeString} ${token1Size}`)\n\n     //token2 = canvas.tokens.get(args[0].targets[0].id);\n     let token2SizeString = token2.document._actor.data.data.traits.size;\n     let token2SizeObject = new CreatureSizes(token2SizeString);\n     let token2Size = token2SizeObject.SizeInt;  // Returns 0 on failure to match size string\n     if (!token2Size) {\n         msg = `Size of ${token2.name}, ${token2SizeString} failed to parse. End ${macroName}<br>`;\n         if (debug) console.log(msg);\n         ui.notifications.error(msg);\n         return(99);\n     }\n     if (DEBUG) console.log(` Token2: ${token2SizeString} ${token2Size}`)\n\n     let sizeDelta = token1Size - token2Size;\n     if (DEBUG) console.log(` sizeDelta ${sizeDelta}`)\n     return(sizeDelta);\n}\n/****************************************************************************************\n * Post the results to chat card\n ***************************************************************************************/\n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    jez.trc(1,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(2,trcLvl,\"postResults Parameters\",\"msg\",msg)\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    jez.trc(1,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.pzTlNpRKgA8ijF6v"
    },
    "midiProperties": {
      "fulldam": false,
      "halfdam": false,
      "nodam": false,
      "critOther": false,
      "rollOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}