{
  "name": "Vampire Bite",
  "type": "weapon",
  "img": "Icons_JGB/Monster_Features/Vampire_Bite.png",
  "data": {
    "description": {
      "value": "<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">%TOKENNAME% bites at his/her target which must be, at least one of these:</p>\n<ul>\n<li>Willing</li>\n<li>@JournalEntry[QAwq9CcEg3fh3qZ3]{Grappled} by Spawn,</li>\n<li>@JournalEntry[1etZSeEDtWQrHUYM]{Incapacitated}, or&nbsp;</li>\n<li>@JournalEntry[CZWEqV2uG9aDWJnD]{Restrained}.</li>\n</ul>\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and Spawn regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.</p>\n<hr />\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong>FoundryVTT</strong>: This effect is automated, other than not checking for prereqs of attack.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Basic Rules pg 352",
    "quantity": 1,
    "weight": 0,
    "price": 0,
    "attunement": 0,
    "equipped": true,
    "rarity": "",
    "identified": true,
    "activation": {
      "type": "special",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "day"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 5,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "str",
    "actionType": "mwak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "1d6 + @mod",
          "piercing"
        ],
        [
          "3d6",
          "necrotic"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "flat"
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "weaponType": "natural",
    "baseItem": "",
    "properties": {
      "amm": false,
      "fin": false,
      "fir": false,
      "foc": false,
      "hvy": false,
      "lgt": false,
      "lod": false,
      "rch": false,
      "rel": false,
      "ret": false,
      "spc": false,
      "thr": false,
      "two": false,
      "ver": false,
      "ada": false,
      "mgc": false,
      "sil": false
    },
    "proficient": true,
    "recharge": {
      "value": null,
      "charged": null
    }
  },
  "effects": [],
  "flags": {
    "monsterMunch": {
      "titleHTML": "<strong>Bite. (Bat or Vampire Form Only).</strong>",
      "fullName": "Bite. (Bat or Vampire Form Only)."
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "fumbleThreshold": null,
      "effectActivation": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "core": {
      "sourceId": "Item.8sZeHXEdRHCVbXlB"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Vampire Bite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Vampire_Bite.1.2.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Macro to inflict damage and return a portion of it to the\n * user as healing. Also applie a DAE to drain the target of\n * the amount of nerotic damage from max health. Redone \n * based on Crymic's macro.\n * \n * Damage amount is set in attack details on main card. \n * Fraction returned can be set as \"RECOVERY_FRACTION\"\n * \n * 10/29/21 1.0 JGB Rebuilt starting from Cyrmic's code\n * 08/02/22 1.1 JGB convenientDescription and Table of things to say when frightened\n * 10/05/22 1.2 JGB Looking for Bug that causes healing effect to be: \"max hp - [object Object]\"\n *                  Damage done was reported as damageTotal, is now damageTotal.damage\n *                  Healing done is now healAmount, was some wacky calculation. \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 4;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst RECOVERY_FRACTION = 1.0; // Fraction of necrotic damage healed\n// let gameRound = game.combat ? game.combat.round : 0;\nconst HEAL_TYPE = \"healing\";\nconst DAMAGE_TYPE = \"necrotic\";\n//---------------------------------------------------------------------------------------------------\n// If we didn't hit anything, just terminate this macro\n//\nif (LAST_ARG.hitTargets.length === 0) return {};\nlet tToken = canvas.tokens.get(LAST_ARG.hitTargets[0].id);\n//---------------------------------------------------------------------------------------------------\n// Dig out how much damage the calling attack inflicted\n//\n// let damageDetail = await LAST_ARG.damageDetail.find(i=> i.type === DAMAGE_TYPE);         // Old Line\nlet damageTotal = LAST_ARG.damageDetail.find(i=> i.type === DAMAGE_TYPE);                   // Changed for Midi update    \nif(!damageTotal) return jez.badNews(\"Deal damage first\",\"w\");                               // 21.12.12 Addition\n// let damageTotal = (damageDetail.damage-damageDetail.DR)*damageDetail.damageMultiplier;   // Old Line\nif (TL > 2) jez.trace(`${TAG} Damage Total`, damageTotal);\n//---------------------------------------------------------------------------------------------------\n// Figure out how much healing can be done, and apply it to the aActor\n//\nlet healAmount = Math.clamped(damageTotal.damage, 0, aToken.actor.data.data.attributes.hp.max - aToken.actor.data.data.attributes.hp.value);    // 21.12.12 Addition\nif (TL > 2) jez.trace(`${TAG} Healing Amount`, healAmount);\n// MidiQOL.applyTokenDamage([{damage: damageTotal, type: HEAL_TYPE}], damageTotal*RECOVERY_FRACTION, new Set([aToken]), aItem.name, new Set());            // Old Line   \nawait MidiQOL.applyTokenDamage([{damage: healAmount, type: HEAL_TYPE}], healAmount, new Set([aToken]), aItem, new Set());                        // 21.12.12 Addition\n//---------------------------------------------------------------------------------------------------\n// Cook up a custom debuff effect and apply it to the target\n//\nconst CE_DESC = `Hit point maximum reduced by ${damageTotal.damage}` // 1.1 Addition\nlet effectData = {\n    label: aItem.name,\n    icon: aItem.img,\n    flags: { \n        dae: { itemData: aItem, stackable: true, macroRepeat: \"none\", specialDuration: [\"longRest\"] },\n        convenientDescription: CE_DESC,                                                     // 1.1 Addition\n    },\n    origin: LAST_ARG.uuid,\n    disabled: false,\n    // duration: {seconds: 86400, hours: 24, startRound: gameRound, startTime: game.time.worldTime },\n    // changes: [{ key: \"data.attributes.hp.max\", mode: 2, value: -damageTotal, priority: 20 }]     // Old Line\n    changes: [{ key: \"data.attributes.hp.max\", mode: 2, value: -damageTotal.damage, priority: 20 }] // 21.12.12 Replacement\n};\nawait MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [effectData] });\n//---------------------------------------------------------------------------------------------------\n// Build a nice custom message describing the result of the action\n//\nlet healMessage = `<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" \nid=\"${tToken.id}\">hits ${tToken.name} \n<span style=\"color:red\">Max HP reduced by ${damageTotal.damage}</span></div>\n<img src=\"${tToken.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div><div class=\"midi-qol-flex-container\">\n<div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${aToken.id}\">heals ${aToken.name} for\n<span style=\"color:green\">${healAmount}</span></div>\n<img src=\"${aToken.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div>`;\nif (TL > 2) jez.trace(`${TAG} Heal Message`, healMessage);\n\nawait jez.wait(400);\nlet chatMessage = await game.messages.get(args[0].itemCardId);\nlet content = await duplicate(chatMessage.data.content);\nlet searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\nlet replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${healMessage}`;\ncontent = await content.replace(searchString, replaceString);\nawait chatMessage.update({ content: content });",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "favtab": {
      "isFavorite": true
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false,
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}