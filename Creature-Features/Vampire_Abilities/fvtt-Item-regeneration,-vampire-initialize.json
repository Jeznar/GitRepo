{
  "name": "Regeneration, Vampire Initialize",
  "type": "feat",
  "img": "Icons_JGB/Effects/Regeneration.png",
  "data": {
    "description": {
      "value": "<hr />\n<p><strong>FoundryVTT:</strong> This is stricly a crutch to cause Foundry to apply a No_Regen debuff to the using actor when it receives a specific  damage type.  The debuff will last 1 round as defined in the convient effect <em>No_Regen</em>.  </p>\n<p>This action needs to be used before the actor takes damage and again after the game is reloaded as the hook created is in the running version only.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "none",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [
    {
      "_id": "9li8vrf1k3vgatns",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "Icons_JGB/Effects/Regeneration.png",
      "label": "Regeneration Initialized",
      "tint": null,
      "transfer": false,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "noneName",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        },
        "effectmacro": {
          "onTurnStart": {
            "script": "//---------------------------------------------------------------------------------------\n// From Discord\n// https://discord.com/channels/170995199584108546/699750150674972743/1024326847980392449\n//\n// const noRegen = actor.effects.find(e => e.label === \"No Regen\");\n// if ( noRegen ) return;\n// const {total} = await new Roll(\"2d8\").evaluate({async: true});\n// await actor.applyDamage(-total);\n//---------------------------------------------------------------------------------------\nconsole.log(`Fires at start of turn for \"${token.name}\" effectively a keyboard macro.`)\nconsole.dir(actor)\nconsole.dir(token)"
          },
          "data": {
            "lastUpdated": "onTurnStart"
          }
        }
      },
      "selectedKey": "macro.itemMacro"
    }
  ],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Regeneration Vampire, Initialize",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Regeneration_Vampire_Initialize.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Create a hook'ed function that fires when actor with this macro is damaged.\n * The macro looks into damage received and if any of it was of type \"radiant\" then it applies a\n * No_Regen convient effect to the actor. This macro needs to be run at start of combat for any with \n * this feature.\n * \n * 10/06/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst HOOK_NAME = \"Regen_Suppression\"\nconst DAM_TYPE = \"radiant\"\nconst EFFECT_NAME = \"No_Regen\"\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"on\") await doOn();\nif (args[0] === \"off\") await doOff();                       // DAE removal\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n * This runs on actor that has the affected applied to it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOn() {\n   const FUNCNAME = \"doOn()\";\n   const FNAME = FUNCNAME.split(\"(\")[0]\n   const TAG = `${MACRO} ${FNAME} |`\n   if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n   //-----------------------------------------------------------------------------------------------\n   // Check for pre-req modules\n   //\n   if ((!(game.modules.get(\"jb2a_patreon\")?.active ||\n      game.modules.get(\"JB2A_DnD5e\")?.active) && !(game.modules.get(\"sequencer\")?.active)))\n      return jez.badnews(`Missing required module(s) for ${MACRO}`)\n   //-----------------------------------------------------------------------------------------------\n   // Create a hook that will call function: evaluateDamage() based on thatlonelybugbear in discord\n   // https://discord.com/channels/170995199584108546/1010273821401555087/1027596831280074783\n   //\n\n   let hookId = Hooks.on(\"midi-qol.DamageRollComplete\", (workflow) => {\n      // workflow.targets.first() will be first Token5e in target array\n      if (workflow.targets.first() === aToken) evaluateDamage(workflow)\n   })\n   DAE.setFlag(aActor, HOOK_NAME, hookId);\n   if (TL > 2) jez.trace(`${TAG} Hook Id`, hookId);\n   if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n   return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n   const FUNCNAME = \"doOff()\";\n   const FNAME = FUNCNAME.split(\"(\")[0]\n   const TAG = `${MACRO} ${FNAME} |`\n   if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n   //----------------------------------------------------------------------------------------------\n   // Remove the hook\n   //\n   let hookId = DAE.getFlag(aActor, HOOK_NAME);\n   if (TL > 2) jez.trace(`${TAG} Hook Id`, hookId);\n   Hooks.off(\"midi-qol.DamageRollComplete\", hookId);\n   DAE.unsetFlag(aActor, HOOK_NAME);\n   if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n   return;\n}\n/***************************************************************************************************\n * evaluateDamage based on Crymic's damageCheck(workflow)\n ***************************************************************************************************/\nasync function evaluateDamage(workflow) {\n   const FUNCNAME = \"evaluateDamage(workflow)\";\n   const FNAME = FUNCNAME.split(\"(\")[0]\n   const TAG = `${MACRO} ${FNAME} |`\n   if (TL === 0) jez.trace(`${TAG} --- Starting ---`);\n   if (TL > 1) jez.trace(`${TAG} --- Starting ${FUNCNAME} ---`, \"workflow\", workflow);\n   //----------------------------------------------------------------------------------------------\n   // If the triggering attack did zero damage, quietly return\n   //\n   if (workflow.damageTotal <= 0) {\n      if (TL > 0) jez.trace(`${TAG} No damage done in triggering attack`);\n      return\n   }\n   //----------------------------------------------------------------------------------------------\n   // If the triggering attack didn't do DAM_TYPE damage type, quietly exit\n   //\n   console.log(\"TODO: need to determine if radiant damage was done\")\n   if (TL > 2) jez.trace(`${TAG} Damage Detail`, workflow.damageDetail);\n   let triggered = false // Variable to record whether trigger damage type was observed.\n   workflow.damageDetail.forEach(checkDamage);\n   //\n   function checkDamage(value) {\n      if (TL > 2) jez.trace(`${TAG} Damage type: ${value.type}`, value);\n      if (value.type === DAM_TYPE) triggered = true\n   }\n   if (!triggered) return \n   //----------------------------------------------------------------------------------------------\n   // Replace the EFFECT_NAME effect on the active token\n   //\n   console.log(\"TODO: Apply an EFFECT_NAME effect to active token\")\n   await jezcon.addCondition(EFFECT_NAME, aActor.uuid, \n   {allowDups: false, replaceEx: true, origin: aActor.uuid, overlay: false, traceLvl: TL })\n   //----------------------------------------------------------------------------------------------\n   // All done\n   //\n   if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.dKNv1hojvAXgQ1Mk"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}