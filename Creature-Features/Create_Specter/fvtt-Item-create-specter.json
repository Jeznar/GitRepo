{
  "name": "Create Specter",
  "type": "feat",
  "img": "Tokens/Monsters/Specter/Specter-Avatar.png",
  "data": {
    "description": {
      "value": "<p>The wraith targets a humanoid within 10 feet of it that has been dead for no longer than 1 minute and died violently. The target's spirit rises as a specter in the space of its corpse or in the nearest unoccupied space. The specter is under the wraith's control. The wraith can have no more than seven specters under its control at one time.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Target a token with zero health before using.  Dialog will confirm target validity.  Target will be hidden at the end of the cast.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 10,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Create Specter",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Create_Specter.0.3.js\"\n/*****************************************************************************************\n * Spawn a Specter into the scene at the location of a targeted (dead) token.  Name it \n * in sequence and make sure there are only 7 or less specters for this actor.\n * \n *   The wraith targets a humanoid within 10 feet of it that has been dead for no longer \n *   than 1 minute and died violently. The target's spirit rises as a specter in the space \n *   of its corpse or in the nearest unoccupied space. The specter is under the wraith's \n *   control. The wraith can have no more than seven specters under its control at one time.\n * \n * 04/23/22 0.1 Creation of Macro\n * 05/02/22 0.2 Update for Foundry 9.x\n * 07/15/22 0.2 Update to suppress token-mold renaming \n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        ui.notifications.warn(msg);\n        await postResults(msg);\n        return (false);\n    }\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    const CUR_HP = tToken.actor?.data?.data?.attributes?.hp?.value;\n    jez.log(\"CUR_HP\",CUR_HP)\n    if (CUR_HP !== 0) {\n        msg = `${tToken.name} still has health points, not a suitable target.`\n        ui.notifications.info(msg);\n        postResults(msg);\n        return(false);\n    } else \n    if (!CUR_HP === null) {\n        msg = `\"${tToken?.name}\" somehow doesn't know what its current health is...`\n        ui.notifications.error(msg);\n        postResults(msg);\n        return(false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n async function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    jez.log(`Targeted ${tToken.name}`, tToken)\n    const SOURCE_CRITTER = \"Specter\"\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //---------------------------------------------------------------------------------------------\n    // Get the name for the next Specter, up to 7, if all in use exit \n    //\n    const SPECTER_NAME = await getSpecterName(aToken)\n    if (!SPECTER_NAME) {\n        msg = `${aToken.name} already has the maximum number of specters, can not summon another.`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return;\n    }\n    //---------------------------------------------------------------------------------------------\n    // Make sure the creature to be summoned exists in the game\n    //\n    if (!game.actors.getName(SOURCE_CRITTER)) {   // If anchor not found, that's all folks\n        msg = `Could not find \"<b>${SOURCE_CRITTER}</b>\" in the <b>Actors Directory</b>. \n        <br><br>Can not complete the ${aItem.name} action.`;\n        ui.notifications.error(msg);\n        postResults(msg);\n        return (null);\n    }\n    //---------------------------------------------------------------------------------------------\n    // Pop dialog asking if the target meets spell requirements\n    //\n    popDialog();\n    return (true);\n    /***************************************************************************************************\n   * Pop a dialog to ask if target meets spell criteria.  If it does call the callback.\n   ***************************************************************************************************/\n    async function popDialog() {\n        const DIALOG_TITLE = \"Does Target Meet Spell Criteria?\"\n        const DIALOG_TEXT = `The target, <b>${tToken.name}</b>, must be a humanoid within 10 feet of \n        <b>${aToken.name}</b> that has been dead for no longer than 1 minute and died violently. <br><br>\n        Is this true?<br><br>`\n        new Dialog({\n            title: DIALOG_TITLE,\n            content: DIALOG_TEXT,\n            buttons: {\n                yes: {\n                    label: \"Yes\", callback: async () => {\n                        // Summon Specter to the field\n                        summonCritter(SOURCE_CRITTER, SPECTER_NAME, tToken)\n                        // Hide the token that was used as the source of the summon\n                        tToken.document.update({ \"hidden\": true });\n                        await jez.wait(1000)\n                        tToken.refresh()\n                        // Post exit message\n                        msg = `<b>${aToken.name}</b> has summoned ${SPECTER_NAME}, which now serves it.`\n                        postResults(msg)\n                    }\n                },\n                no: { label: \"No\", callback: () => { \n                    // Post exit message\n                    msg = `<b>${tToken.name} does not meet spell requirements.`\n                    postResults(msg)\n\n                } }\n            },\n            default: \"yes\",\n        }).render(true);\n    }\n}\n/***************************************************************************************************\n * Obtain name of Specter to be summoned, return empty string if no names are available.\n ***************************************************************************************************/\nasync function getSpecterName(activeToken) {\n    // TODO: Scan the field making sure the name is not on use, going from 1 to 7\n    let summonName = \"\"\n    const BASE_NAME = `${activeToken.name}'s Specter`\n    for (let i = 1; i <= 7; i++) {\n        let CHECK_NAME = `${BASE_NAME} ${i}`\n        jez.log(\"CHECK_NAME\", CHECK_NAME)\n        let nameTokenDoc = game.scenes.viewed.data.tokens.getName(CHECK_NAME)\n        if (!nameTokenDoc) { \n            summonName = CHECK_NAME;\n            break;\n        }\n    }\n    return(summonName)\n}\n/***************************************************************************************************\n * Summon the actor and rename with a numeric suffix\n * \n * https://github.com/trioderegion/warpgate\n ***************************************************************************************************/\n async function summonCritter(summons, name, TARGET_TOKEN) {\n    let updates = { \n        actor: {name: name},    \n        token: {name: name} \n    }\n    const OPTIONS = { controllingActor: aActor };\n    // COOL-THING: Plays VFX before and after the warpgate summon.\n    const CALLBACKS = {\n      pre: async (template) => {\n        preEffects(template);\n        await warpgate.wait(500);\n      },\n      post: async (template) => {\n        postEffects(template);\n        await warpgate.wait(500);\n      }\n    };\n    //updates = mergeObject(updates, choice);\n    //await warpgate.spawn(summons, updates, CALLBACKS, OPTIONS);\n    jez.suppressTokenMoldRenaming(1000)\n    await jez.wait(75)\n    await warpgate.spawnAt(TARGET_TOKEN.center, summons, updates, CALLBACKS, OPTIONS);\n  }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n   async function preEffects(template) {\n    const VFX_FILE = \"modules/jb2a_patreon/Library/Generic/Explosion/Explosion_*_Green_400x400.webm\"\n    new Sequence()\n      .effect()\n      .file(VFX_FILE)\n      .atLocation(template)\n      .center()\n      .scale(1.0)\n      .play()\n  }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n   async function postEffects(template) {\n    const VFX_FILE = \"modules/jb2a_patreon/Library/Generic/Smoke/SmokePuff01_*_Dark_Green_400x400.webm\"\n    new Sequence()\n      .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(1.0)\n      .play()\n  }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Item.DU02R6pPrrVGkxjQ"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}