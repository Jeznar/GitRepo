{
  "name": "Hide",
  "type": "feat",
  "img": "Icons_JGB/Conditions/hidden-icon.jpg",
  "data": {
    "description": {
      "value": "<p>When you take the Hide action, you make a <a href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Stealth\" target=\"_blank\" rel=\"noopener\" data-tooltip-href=\"//www.dndbeyond.com/skills/5-tooltip?disable-webm=1&amp;disable-webm=1\">Stealth</a> (DEX) check in an attempt to hide. This check can be contested by a <a href=\"https://www.dndbeyond.com/sources/basic-rules/using-ability-scores#Perception\" target=\"_blank\" rel=\"noopener\">Perception</a> (WIS) check of any creature actively looking for signs of your presence.</p>\n<p>In order to to hide/remain hidden, you must remain quiet and unseen by a creature you&rsquo;re attempting to hide from.&nbsp;</p>\n<p>If you succeed, you gain certain benefits, as described in the \"<a href=\"https://www.dndbeyond.com/sources/basic-rules/combat#UnseenAttackersandTargets\" target=\"_blank\" rel=\"noopener\" data-content-chunk-id=\"be8618a6-d79b-4ed4-aba4-dd3e9c717648\">Unseen Attackers and Targets</a>\" section.</p>\n<p>A creature can notice you if their passive Perception (WIS) (10 + WIS mod + any other bonuses to Perception) is equal to or higher than your Stealth check. If the creature would have advantage it has a +5 to this score, if they would have disadvantage they would have a -5 to this score. How well other creatures can see you will be determined by how well lit an area is, and how obscured it may be.</p>\n<p>When you make an attack, you give away your location when the attack hits or misses.</p>\n<p>See <a href=\"https://dicecove.com/how-to-play/actions/hide/\" target=\"_blank\" rel=\"noopener\">Dice Cove Webpage</a> for more explanantion.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "core": {
      "sourceId": "Item.4meuwGa7L7Me6jRN"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Hide",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Hide.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Automate the hide action witgout checking for appropriatness of that action.  Major steps in this process:\n * \n * 1. Roll a Stealth (Dex) check for the aActor\n * 2. Place a \"Hidden\" effect on the aActor\n *    a. Obtain the base effect from convienent effects\n *    b. Modify the description to incoporate the rolled check result\n *    c. Apply the effect\n * 3. Post a summary description to this item's chat card.\n * \n * 04/17/23 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//    \nconst SKILL = \"ste\";\nconst EFFECT_NAME = 'Hidden'\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // 1. Roll a Stealth (Dex) check for the aActor\n    //\n    const STEALTH_OPTS = { chatMessage: true, fastForward: true };\n    const STEALTH_ROLL = await MidiQOL.socket().executeAsGM(\"rollAbility\", \n        { request: \"skill\", targetUuid: aActor.uuid, ability: SKILL, options: STEALTH_OPTS });\n    game.dice3d?.showForRoll(STEALTH_ROLL);\n    if (TL > 1) jez.trace(`${TAG} STEALTH_ROLL result: ${STEALTH_ROLL.total}`,STEALTH_ROLL)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // 2. Place a \"Hidden\" effect on the aActor\n    //    a. Obtain the base effect from convienent effects\n    let effectData = game.dfreds.effectInterface.findEffectByName(EFFECT_NAME).convertToObject();\n    //    b. Modify the description to incorporate the rolled check result\n    effectData.description = `Hidden while quiet and unseen with a check of ${STEALTH_ROLL.total}`\n    //    c. Apply the effect\n    game.dfreds.effectInterface.addEffectWith({ effectData: effectData, uuid: aActor.uuid, origin: aActor.uuid });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // 3. Post a summary description to this item's chat card.\n    //\n    msg = `${aToken.name} has hidden themself with a skill check of ${STEALTH_ROLL.total}.  They may remain hidden as long as not \n    in line of sight and quiet. Attacks made while hidden have advantage and reveal the attacker.`\n    postResults(msg)\n    if (TL > 0) jez.trace(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}