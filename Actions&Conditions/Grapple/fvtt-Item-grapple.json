{
  "name": "Grapple",
  "type": "feat",
  "img": "Icons_JGB/Actions/Grapple.png",
  "data": {
    "description": {
      "value": "<p style=\"box-sizing:border-box;user-select:text;line-height:1.4;color:#191813;font-size:13px\" data-content-chunk-id=\"5c26afe5-87bc-4e51-88b4-c0afa8abd663\">When you want to grab a creature or wrestle with it, you can use the <a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/combat#Attack\" data-tooltip-href=\"//www.dndbeyond.com/actions/1-tooltip?disable-webm=1&amp;disable-webm=1\">Attack</a> action to make a special melee attack, a grapple. If you're able to make multiple attacks with the <a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/combat#Attack\" data-tooltip-href=\"//www.dndbeyond.com/actions/1-tooltip?disable-webm=1&amp;disable-webm=1\">Attack</a> action, this attack replaces one of them.</p>\n<p style=\"box-sizing:border-box;user-select:text;line-height:1.4;color:#191813;font-size:13px\" data-content-chunk-id=\"d0896274-d891-4634-b3e1-c93105bd9b85\">The target of your grapple must be <span style=\"text-decoration:underline\">no more than one size larger</span> than you and must be within your reach. Using at least one free hand, you try to seize the target by making a grapple check instead of an attack roll: a Strength (<a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Athletics\" data-tooltip-href=\"//www.dndbeyond.com/skills/2-tooltip?disable-webm=1&amp;disable-webm=1\">Athletics</a>) check contested by the target's Strength (<a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Athletics\" data-tooltip-href=\"//www.dndbeyond.com/skills/2-tooltip?disable-webm=1&amp;disable-webm=1\">Athletics</a>) or Dexterity (<a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Acrobatics\" data-tooltip-href=\"//www.dndbeyond.com/skills/3-tooltip?disable-webm=1&amp;disable-webm=1\">Acrobatics</a>) check (the target chooses the ability to use). You succeed automatically if the target is <a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/appendix-a-conditions#Incapacitated\" data-tooltip-href=\"//www.dndbeyond.com/conditions/7-tooltip?disable-webm=1&amp;disable-webm=1\">incapacitated</a>. If you succeed, you subject the target to the <a style=\"box-sizing:border-box;user-select:text\" href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/appendix-a-conditions#Grappled\" data-tooltip-href=\"//www.dndbeyond.com/conditions/6-tooltip?disable-webm=1&amp;disable-webm=1\">grappled</a> condition. The condition specifies the things that end it, and you can release the target whenever you like (no action required).</p>\n<hr />\n<p style=\"box-sizing:border-box;user-select:text;line-height:1.4;color:#191813;font-size:13px\" data-content-chunk-id=\"d0896274-d891-4634-b3e1-c93105bd9b85\"><strong>FVTT</strong>. To initiate a grapple you must have the creature, and only the creature to be grappled targeted. </p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Grapple",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Grapple_Initiate_1.2.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Initiate a grapple as an action, if already grappling, drop the grapple\n * \n *  Steps:\n *  - Set needed variables\n *  - Determine initiator's atheletics roll\n *  - Obtain targets atheletics or acrobatics roll\n *  - Determine success/failure\n *  - Post results\n * \n * 10/29/21 0.1 JGB created from vampire unarmed strike\n * 11/30/21 0.2 JGB Failed branch that was eliminated\n * 11/05/21 0.3 JGB Set up fast forwarding rolls\n * 11/05/21 0.4 JGB Incorporate dialogs from Crymic Tumble\n * 11/06/21 0.5 JGB Setup to work as hotbar or ItemMacro\n * 11/06/21 0.6 JGB Handle cancelled roll dialog that errors \n * 11/06/21 0.7 JGB Add \"Grappling\" condition to originator\n * 11/06/21 0.8 JGB Check for grappling on originator, abort if found\n * 11/20/21 0.9 JGB Post result of attempt in text to the card\n *                  for error conditions\n * 12/06/21 1.0 JGB Add scroll to bottom and results message\n * 05/04/22 1.1 JGB Update for Foundry 9.x\n * 07/04/22 1.2 JGB Convert to CE for effect management\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nlet msg = \"\"\nlet trcLvl = 4\njez.trc(1, trcLvl, `=== Starting === ${MACRONAME} ===`);\nfor (let i = 0; i < args.length; i++) jez.trc(2, trcLvl, `  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Actor (aActor)\n//\nlet aActor;\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor;\nelse aActor = game.actors.get(LAST_ARG.actorId);\n//\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// \n//\nmain()\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function main() {\n    //-------------------------------------------------------------------------------\n    // Verify that a single token to be acted upon is targeted & set it\n    if (!oneTarget()) {\n        postResults(`${aToken.name} is frutrated, can only grapple exactly one target.`);\n        return;\n    }\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    //-------------------------------------------------------------------------------\n    // If the originator of the grapple is already grappling, may not again\n    //\n    if (aToken.actor.effects.find(ef => ef.data.label === \"Grappling\")) {\n        postResults(`${aToken.name} may not initiate a grapple while alreay grappling.`);\n        return;\n    }\n    /************************************************************************\n    * Determing the attacker's check result (roll dialog)\n    *************************************************************************/\n    let playerRoll = await aToken.actor.rollSkill('ath', { chatMessage: false });\n    if (!playerRoll) return; // terminate this macro if dialog fails to return a roll\n    let rollType = playerRoll.terms[0].modifiers[0] === \"kh\" ? \" (Advantage)\" : \n                   playerRoll.terms[0].modifiers[0] === \"kl\" ? \" (Disadvantage)\" : \"\";\n    game.dice3d?.showForRoll(playerRoll);\n    /*************************************************************************\n     * Determing the target's check result (roll dialog)\n     *************************************************************************/\n    let skill = \"ath\";\n    if (tToken.actor.data.data.skills.acr.total >= tToken.actor.data.data.skills.ath.total) { skill = \"acr\" }\n    let targetRoll = await tToken.actor.rollSkill(skill, { chatMessage: false, fastForward: true });\n    game.dice3d?.showForRoll(targetRoll);\n    // Set long form of skill\n    let targetSkill = skill == \"ath\" ? \"Atheletics\" : \"Acrobatics\";\n    /**************************************************************************\n     *  Determine if grapple succeeded\n     *************************************************************************/\n    let playerWin = \"\";\n    let targetWin = \"\";\n    playerRoll.total >= targetRoll.total ? playerWin = `success` : targetWin = `success`;\n    if (playerWin) jez.trc(2, trcLvl, \" Target is grappled\");\n    else jez.trc(2, trcLvl, \" Target avoided grapple\");\n    /**************************************************************************\n     *  Apply Grappled Condition\n     *************************************************************************/\n    if (playerWin) {\n        jez.trc(2, trcLvl, \" Apply grappled condition\");\n        jezcon.add({ effectName: 'Grappled', uuid: tToken.actor.uuid, origin: aActor.uuid })\n        let message = `<b>${aToken.name}</b> has grappled <b>${tToken.name}</b>`\n        jez.trc(2, trcLvl, message);\n        postResults(message);\n    } else {\n        let message = `<b>${aToken.name}</b> failed to grapple <b>${tToken.name}</b>`\n        jez.trc(2, trcLvl, message);\n        postResults(message);\n    }\n    /**************************************************************************\n     *  Apply Grappling Condition\n     *************************************************************************/\n    if (playerWin) {\n        jez.trc(2, trcLvl, \"Apply grappled condition\");\n        await jez.wait(250)\n        jezcon.add({ effectName: 'Grappling', uuid: aToken.actor.uuid })\n        //-------------------------------------------------------------------------------\n        // Find the two just added effect data objects so they can be paired, to expire \n        // together.\n        //\n        await jez.wait(100)\n        let tEffect = tToken.actor.effects.find(ef => ef.data.label === \"Grappled\" && ef.data.origin === aActor.uuid)\n        if (!tEffect) return jez.badNews(`Sadly, there was no Grappled effect from ${aToken.name} found on ${tToken.name}.`, \"warn\")\n        let oEffect = aToken.actor.effects.find(ef => ef.data.label === \"Grappling\")\n        if (!oEffect) return jez.badNews(`Sadly, there was no Grappling effect found on ${aToken.name}.`, \"warn\")\n        const GM_PAIR_EFFECTS = jez.getMacroRunAsGM(\"PairEffects\")\n        if (!GM_PAIR_EFFECTS) { return false }\n        await GM_PAIR_EFFECTS.execute(aToken.actor, oEffect, tToken.actor, tEffect)\n        //jez.pairEffects(aToken.actor, oEffect, tToken.actor, tEffect)\n        //-------------------------------------------------------------------------------\n        // Create an Action Item to allow the target to attempt escape\n        //\n        const GM_MACRO = jez.getMacroRunAsGM(jez.GRAPPLE_ESCAPE_MACRO)\n        if (!GM_MACRO) { return false }\n        await GM_MACRO.execute(\"create\", aToken.document.uuid, tToken.document.uuid, aToken.actor.uuid)\n    }\n    await jez.wait(250)\n    updateChatCard()\n    /**************************************************************************\n     *  Build and Display dialog\n     *************************************************************************/\n    async function updateChatCard() {\n        jez.log(\"updateChatCard()\")\n        let damage_results = `\n <div class=\"flexrow 2\">\n <div><div style=\"text-align:center\">${aToken.name}</div></div><div><div style=\"text-align:center\">${tToken.name}</div></div>\n </div>\n <div class=\"flexrow 2\">\n     <div>\n         <div style=\"text-align:center\">Atheletics${rollType}</div>\n         <div class=\"dice-roll\">\n             <div class=\"dice-result\">\n                 <div class=\"dice-formula\">${playerRoll.formula}</div>\n                 <div class=\"dice-tooltip\">\n                     <div class=\"dice\">\n                         <header class=\"part-header flexrow\">\n                             <span class=\"part-formula\">${playerRoll.formula}</span>\n                             <span class=\"part-total\">${playerRoll.total}</span>\n                         </header>\n                     </div>\n                 </div>\n                 <h4 class=\"dice-total ${playerWin}\">${playerRoll.total}</h4>\n             </div>\n         </div>\n     </div>\n     <div>\n         <div style=\"text-align:center\">${targetSkill}</div>\n         <div class=\"dice-roll\">\n             <div class=\"dice-result\">\n                 <div class=\"dice-formula\">${targetRoll.formula}</div>\n                 <div class=\"dice-tooltip\">\n                     <div class=\"dice\">\n                         <header class=\"part-header flexrow\">\n                             <span class=\"part-formula\">${targetRoll.formula}</span>\n                             <span class=\"part-total\">${targetRoll.total}</span>\n                         </header>\n                     </div>\n                 </div>\n                 <h4 class=\"dice-total ${targetWin}\">${targetRoll.total}</h4>\n             </div>\n         </div>\n     </div>\n     \n </div>`;\n        jez.trc(2, trcLvl, \" Built damage results string\");\n        const chatMessage = game.messages.get(args[0].itemCardId);\n        let content = duplicate(chatMessage.data.content);\n        const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n        const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${damage_results}`;\n        content = content.replace(searchString, replaceString);\n        await chatMessage.update({ content: content });\n        await ui.chat.scrollBottom();\n    }\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    jez.trc(1, trcLvl, `--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(2, trcLvl, \"postResults Parameters\", \"msg\", msg)\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    jez.trc(1, trcLvl, `--- Finished --- ${MACRONAME} ${FUNCNAME} ---`);\n}\n/************************************************************************\n * Verify exactly one target selected, boolean return\n*************************************************************************/\nfunction oneTarget() {\n    if (!game.user.targets) return jez.badNews(\n        `Targeted nothing, must target single token to be acted upon`, \"info\")\n    if (game.user.targets.ids.length != 1)\n        return jez.badNews(`Target a single token to be acted upon. Targeted \n        ${game.user.targets.ids.length} tokens`);\n    return (true);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "core": {
      "sourceId": "Item.pa3fbg8Xh41bnLkL"
    },
    "gm-notes": {},
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}