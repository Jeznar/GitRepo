{
  "name": "Demo Get Target Level",
  "type": "feat",
  "img": "Icons_JGB/Misc/Demo/Demo_purple.jpg",
  "data": {
    "description": {
      "value": "",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 120,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Demo Get Target Level",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Demo_Get_My_Target.js\"\n/*****************************************************************************************\n * Macro to find the level of the targeted token and print it.\n * \n * 05/05/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n   if (args[0].targets.length !== 1) {     // If not exactly one target, return\n       msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n       postResults(msg);\n       return (false);\n   }\n   return(true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(\"tToken.actor\", tToken.actor)\n    jez.log(\"tToken.actor.data.data.classes\", tToken.actor.data.data.classes)\n    /*let charLevel = 0\n    for (const CLASS in tToken.actor.data.data.classes) {\n        jez.log(CLASS, tToken.actor.data.data.classes[CLASS].levels)\n        charLevel += tToken.actor.data.data.classes[CLASS].levels\n    }\n    if (!charLevel) {  // NPC's don't have classes, use CR instead\n        charLevel =  tToken.actor.data.data.details.cr\n    }*/\n    jez.log(\"by Actor\", jez.getCharacterLevel(tActor))\n    jez.log(\"by Token\", jez.getCharacterLevel(tToken))\n    jez.log(`by Token.id ${tToken.id}`, jez.getCharacterLevel(tToken.id))\n    msg = `${tToken.name} is level: ${jez.getCharacterLevel(tToken)}`\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Obtain and return the character level of the passed token, actor or token.id\n ***************************************************************************************************/\nfunction getCharacterLevel(subject) {\n    //----------------------------------------------------------------------------------------------\n    // Convert the passed parameter to Actor5e\n    //\n    let actor5e = null\n    if (typeof (subject) === \"object\") { // Hopefully we have a Token5e or Actor5e\n        if (subject.constructor.name === \"Token5e\") actor5e = subject.actor\n        else if (subject.constructor.name === \"Actor5e\") actor5e = subject\n        else {\n            let msg = `Object passed to jez.getCharacterLevel(subject) is type '${typeof (subject)}' \n            must be a Token5e or Actor5e`\n            ui.notifications.error(msg)\n            console.log(msg)\n            return (false)\n        }\n    } else if ((typeof (subject) === \"string\") && (subject.length === 16)) \n        actor5e = jez.getTokenById(subject).actor\n    else {\n        let msg = `Parameter passed to jez.getCharacterLevel(subject) is not a Token5e, Actor5e, or \n        Token.id: ${subject}`\n        ui.notifications.error(msg)\n        console.log(msg)\n        return (false)\n    }\n    //----------------------------------------------------------------------------------------------\n    // Find the Actor5e's character level.\n    //\n    let charLevel = 0\n    // PC's can have multiple classes, add them all up\n    for (const CLASS in actor5e.data.data.classes) charLevel += actor5e.data.data.classes[CLASS].levels\n    // NPC's don't have classes, use CR instead\n    if (!charLevel) charLevel = actor5e.data.data.details.cr\n    return(charLevel)\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.d3q6kOG3ksLqo93Q"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}