{
  "name": "Demo Flag Mgmt",
  "type": "feat",
  "img": "Icons_JGB/Misc/Demo/Demo_red.jpg",
  "data": {
    "description": {
      "value": "<div>Demonstrate the use of three FoundryVTT flag management calls for storing and using DAE calls. Target some number of tokens, execute this itemMacro and look at console output.</div>\n<ol>\n<li>DAE.unsetFlag(actor5e, flag) -- Clears \"flag\" from \"actor5e\" data object</li>\n<li>DAE.getFlag(actor5e, flag) -- Returns the contents of \"actor5e's\" \"flag\"</li>\n<li>DAE.setFlag(actor5e, flag, value) -- stores \"value\" to \"flag\" on \"actor5e\"</li>\n</ol>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Demo Flag Mgmt",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Demo_Flag_Mgmt\"\n/*****************************************************************************************\n * Demonstrate the use of three FoundryVTT flag management calls for storing and using\n * DAE calls. Target some number of tokens, execute this as an itemMacro and look at \n * console output.\n * \n *  DAE.unsetFlag(actor5e, flag) -- Clears \"flag\" from \"actor5e\" data object\n *  DAE.getFlag(actor5e, flag) -- Returns the contents of \"actor5e's\" \"flag\"\n *  DAE.setFlag(actor5e, flag, value) -- stores \"value\" to \"flag\" on \"actor5e\"\n * \n * 03/05/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nconst LAST_ARG = args[args.length - 1];\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet currentValue = \"\"\n//-----------------------------------------------------------------------------------------\n// Display flag object for our actor\n//\nconsole.log(`${aToken.name} current DAE flagObj content`,aToken.actor.data.flags.dae)\n//-----------------------------------------------------------------------------------------\n// Clear any prexisting value of the flag\n//\nawait DAE.unsetFlag(aToken.actor, MACRONAME);\n//-----------------------------------------------------------------------------------------\n// Display the value of the flag\n//\ncurrentValue = await DAE.getFlag(aToken.actor, MACRONAME);\nconsole.log(\"Value of flag after clear\",currentValue)\n//-----------------------------------------------------------------------------------------\n// Add the token.id of our invoking token to the flag\n//\nawait DAE.setFlag(aToken.actor, MACRONAME, aToken.id);\n//-----------------------------------------------------------------------------------------\n// Display the value of the flag\n//\ncurrentValue = await DAE.getFlag(aToken.actor, MACRONAME);\nconsole.log(\"Value of flag after originator\",currentValue)\n//-----------------------------------------------------------------------------------------\n// Loop through the targets, adding them to the flag value, getting and displaying as we go\n//\nfor (let i = 0; i < args[0].targets.length; i++) {\n    let flagValue = await DAE.getFlag(aToken.actor, `${MACRONAME}`)\n    flagValue += ` ${args[0].targets[i].id}`\n    await DAE.setFlag(aToken.actor, MACRONAME, flagValue);\n    currentValue = await DAE.getFlag(aToken.actor, MACRONAME);\n    console.log(`Value of flag after target ${i+1}`,currentValue)\n}\n//-----------------------------------------------------------------------------------------\n// Imagine we've done some useful things and then want to use that flag info to do...\n//\ncurrentValue = await DAE.getFlag(aToken.actor, MACRONAME);  // Get the flag value\nlet tokenIdArray = currentValue.split(\" \")                      // Populate array \n//-----------------------------------------------------------------------------------------\n// Obtain the token data for our acting token based on the ID transferred via the flag\n//\nlet actingToken = canvas.tokens.placeables.find(ef => ef.id === tokenIdArray[0])\nconsole.log(`${actingToken.name} started this fine mess and targeted ${tokenIdArray.length-1} tokens`)\n//-----------------------------------------------------------------------------------------\n// Loop through the targetted tokens, if any, and print out their names\n//\nfor (let i = 1; i < tokenIdArray.length; i++) {\n    let targetToken = canvas.tokens.placeables.find(ef => ef.id === tokenIdArray[i])\n    console.log(` ${i}) ${targetToken.name}`)\n}\n//-----------------------------------------------------------------------------------------\n// Display flag object for our actor\n//\nconsole.log(`${aToken.name} current DAE flagObj content`,aToken.actor.data.flags.dae)\n//-----------------------------------------------------------------------------------------\n// Clear the flag so we don't pollute\n//\nawait DAE.unsetFlag(aToken.actor, MACRONAME);",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.LieMZf0fuZL8mBQx"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}