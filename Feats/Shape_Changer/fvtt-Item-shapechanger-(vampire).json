{
  "name": "Shapechanger (Vampire)",
  "type": "feat",
  "img": "Tokens/CoS_NPC/Ravenloft/Strahd_von_Zarovich/Strahd_Avatar.png",
  "data": {
    "description": {
      "value": "<p>If not in running water or sunlight, they can use an <strong>action</strong> to polymorph into:</p>\n<ul>\n<li>Tiny bat,</li>\n<li>Medium wolf,</li>\n<li>Medium cloud of mist,</li>\n<li>back into humanoid form.</li>\n</ul>\n<p>While in <strong>bat</strong> or <strong>wolf form</strong>, can’t speak.</p>\n<p>In <strong>bat</strong> form, walking speed is 5 feet, flying speed is 30 feet.</p>\n<p>In <strong>wolf</strong> form, walking speed is 40 feet.</p>\n<p>Statistics, other than size and speed, are unchanged. Anything worn transforms as well, but nothing carried does. Revert to true form on death.</p>\n<p>While in <strong>mist</strong> form:</p>\n<ul>\n<li>can’t take any actions, speak, or manipulate objects,</li>\n<li>weightless,</li>\n<li>flying speed of 20 feet, can hover, and can enter a hostile creature’s space and stop there, </li>\n<li>if air can pass through a space, the mist can do so without squeezing, but can’t pass through water.</li>\n<li>Advantage on STR, DEX, and CON saving throws, and is</li>\n<li>immune to all nonmagical damage, except the damage from sunlight.</li>\n</ul>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": 0,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.YjBhOTVhZDdiNjQ0"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Shapechanger (Vampire)",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Shape_Changer_Dask.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Macro that manages the changing of appearance and naming of a token to automate the shape change ability of a Vampires\n * \n * o Build arrays of information that define\n *   - Names of Shapes\n *   - Short Descriptions\n *   - Location of file tyo use as the token image\n * o Present player with a list of the names & descriptions to choose from\n * o Start an animation to play for the transformation\n * o Rename the token per name selected\n * o Update the token image\n * o Post a chat log message\n * \n * 03/21/23 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 5;                               // Trace Level for this macro\nconst WAIT = 2500;                          // Time to play the VFX in ms\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\nconst OLD_NAME = aToken.name\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst BASE_NAME = aActor.data.token.name\nconst BASE_IMG = aActor.data.token.img\nconst SHAPE_NAMES = [BASE_NAME, \"Bat\", \"Wolf\", \"Mist\"]\nconst SHAPE_DESC = [\n    `${BASE_NAME}'s natural form`,\n    \"appear to be mundane animal\",\n    \"appear to be mundane animal\",\n    \"become a cloud of mist\"\n]\nconst WOLF_INDEX = Math.floor(Math.random() * 9) // Assumes there are 9 wolf image files that match naming.\nconst SHAPE_IMAGE = [\n    BASE_IMG,\n    `Tokens/CoS_NPC/Ravenloft/Vampire_Shape_Shifts/Bat_Small.png`,\n    `Tokens/CoS_NPC/Ravenloft/Vampire_Shape_Shifts/Wolf_0${WOLF_INDEX}.png`,\n    `Tokens/CoS_NPC/Ravenloft/Vampire_Shape_Shifts/mist.png`,\n]\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Function Variables\n    //\n    let shapeLines = []\n    const FILTERID = 'ShapeChange'\n    function dummyFunction(itemSelected) { return } // RadioList requires a function...\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build array containing: Index, Name, Description for each persona\n    //\n    for (let i = 0; i < SHAPE_NAMES.length; i++) {\n        if (TL > 1) jez.trace(`${TAG}  Building line ${i + 1} for ${SHAPE_NAMES[i]}`);\n        shapeLines.push(`${i + 1}. ${SHAPE_NAMES[i]} - ${SHAPE_DESC[i]}`)\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Ask for new form to be selected from a Radio dialog\n    //\n    const queryTitle = \"Select New Appearance/Form\"\n    const queryText = \"Pick one from the list (or I'll do it for you!)\"\n    let selection = await jez.pickRadioListArray(queryTitle, queryText, dummyFunction, shapeLines);\n    const SEL = selection ? selection.match(/[0-9]+/) - 1 : Math.floor(Math.random() * SHAPE_NAMES.length)\n    if (TL > 1) jez.trace(`${TAG} Shape selected: ${SEL}`, SHAPE_NAMES[SEL])\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Play VFX on the transforming token\n    //\n    await applyTokenMagic(aToken, FILTERID, {traceLvl: TL})\n    await jez.wait(WAIT)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the token with new name and image file\n    //\n    let updates = [];\n    updates.push({\n        _id: aToken.id,\n        name: SHAPE_NAMES[SEL],\n        img: SHAPE_IMAGE[SEL],\n    });\n    if (TL > 1) jez.trace(`${TAG}  Updating Token to ${SEL}`, 'Name', SHAPE_NAMES[SEL], 'Image', SHAPE_IMAGE[SEL]);\n    await jez.updateEmbeddedDocs(\"Token\", updates)\n    if (TL > 3) jez.trace(`${TAG} More Detailed Trace Info.`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Remove VFX from the transforming token\n    //\n    await removeTokenMagic(aToken, FILTERID, {traceLvl: TL}) \n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Exit message\n    //\n    msg = `${OLD_NAME} has shifted appearance to ${SHAPE_NAMES[SEL]}`\n    postResults(msg)\n    if (TL > 0) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Apply VFX to token using TokenMagic\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function applyTokenMagic(TARGET, FILTERID, options = {}) {\n    const FUNCNAME = \"applyTokenMagic(TARGET, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, 'TARGET', TARGET, 'FILTERID', FILTERID, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the TokenMagic VFX Data object\n    //\n    let params =\n        [{\n            filterId: FILTERID,\n            filterType: \"distortion\",\n            maskPath: \"modules/tokenmagic/fx/assets/waves-2.png\",\n            maskSpriteScaleX: 7,\n            maskSpriteScaleY: 7,\n            padding: 50,\n            animated:\n            {\n                maskSpriteX: { active: true, speed: 0.05, animType: \"move\" },\n                maskSpriteY: { active: true, speed: 0.07, animType: \"move\" }\n            }\n        },\n        {\n            filterId: FILTERID,\n            filterType: \"ray\",\n            time: 0,\n            color: 0xEF9000,\n            alpha: 0.25,\n            divisor: 32,\n            anchorY: 1,\n            animated:\n            {\n                time:\n                {\n                    active: true,\n                    speed: 0.0005,\n                    animType: \"move\"\n                }\n            }\n        },\n        {\n            filterId: FILTERID,\n            filterType: \"glow\",\n            distance: 10,\n            outerStrength: 8,\n            innerStrength: 0,\n            color: 0xB03000,\n            quality: 0.5,\n            animated:\n            {\n                color:\n                {\n                    active: true,\n                    loopDuration: 3000,\n                    animType: \"colorOscillation\",\n                    val1: 0xB03000,\n                    val2: 0xFFD010\n                }\n            }\n        }\n        ];\n    let result = await TokenMagic.addFilters(TARGET, params); // addFilters: async addFilters(placeable, paramsArray, replace = false)\n    console.log(`result:`, result)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return result;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Apply VFX to token using TokenMagic\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function removeTokenMagic(TARGET, FILTERID, options = {}) {\n    const FUNCNAME = \"removeTokenMagic(TARGET, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, 'TARGET', TARGET, 'FILTERID', FILTERID, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the TokenMagic VFX Data object\n    //\n    await TokenMagic.deleteFilters(TARGET, FILTERID); // deleteFilters: async deleteFilters(placeable, filterId = null)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}