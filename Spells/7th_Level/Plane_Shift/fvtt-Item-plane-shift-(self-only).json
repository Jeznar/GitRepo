{
  "name": "Plane Shift (Self Only)",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/runes-royal-3.jpg",
  "data": {
    "description": {
      "value": "<p>You are transported to a different plane of existence. You can specify a target destination in general terms, such as the City of Brass on the Elemental Plane of Fire or the palace of Dispater on the second level of the Nine Hells, and you appear in or near that destination. If you are trying to reach the City of Brass, for example, you might arrive in its Street of Steel, before its Gate of Ashes, or looking at the city from across the Sea of Fire, at the DM's discretion.</p>\n<p>Alternatively, if you know the sigil sequence of a teleportation circle on another plane of existence, this spell can take you to that circle. If the teleportation circle is too small to hold all the creatures you transported, they appear in the closest unoccupied spaces next to the circle.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 7,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A forked, metal rod worth at least 250 gp, attuned to a particular plane of existence",
      "consumed": false,
      "cost": 250,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "J6KpQAMsazq2xI2E",
      "changes": [
        {
          "key": "flags.gm-notes.notes",
          "mode": 0,
          "value": "Plane Shifted",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 9999
      },
      "icon": "systems/dnd5e/icons/spells/runes-royal-3.jpg",
      "label": "Plane Shift (Self Only)",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "flags.gm-notes.notes",
        "macro.itemMacro"
      ]
    }
  ],
  "sort": 0,
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.M2M2ZDdiZjhiMTlm"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Plane Shift (Self Only)",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Plane_Shift_Self_Only\"\n/*****************************************************************************************\n * Basic Structure for a rather complete macro\n * \n * 02/11/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n// but only for OnUse invocation.\n/*if ((args[0]?.tag === \"OnUse\") && !preCheck()) {\n    msg = `Please target `\n    return;\n}*/\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE removal\nif (args[0]?.tag === \"DamageBonus\") doBonusDamage();    // DAE Damage Bonus\njez.log(`============== Finishing === ${MACRONAME} =================`);\njez.log(\"\")\nreturn;\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n* Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    // COOL_THING: Make sure only one target was targeted.\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        ui.notifications.warn(msg)\n        jez.log(msg)\n        return(false);\n    }\n    /*if (LAST_ARG.hitTargets.length === 0) {  // If target was missed, return\n        msg = `Target was missed.`\n        // ui.notifications.info(msg)\n        return(false);\n    }*/\n    return (true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n * \n * https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki/Sequencer-Effect-Manager#end-effects\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    await aToken.update({ \"hidden\": false });\n    await jez.wait(1000)\n    aToken.refresh()\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n  }\n  \n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n ***************************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(\"A place for things to be done\");\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    // let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    // let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //jez.log(`First Targeted Token (tToken) of ${args[0].targets?.length}, ${tToken?.name}`, tToken);\n    //jez.log(`First Targeted Actor (tActor) ${tActor?.name}`, tActor)\n    //---------------------------------------------------------------------------------------------\n    // Run the visual effects\n    runVFX(aToken)\n    //---------------------------------------------------------------------------------------------\n    // Hide the plane shifting token\n    aToken.update({ \"hidden\": true });\n    await jez.wait(1000)\n    aToken.refresh()\n    //---------------------------------------------------------------------------------------------\n    // Post good bye message\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    msg = `${aToken.name} blinks out of existance.`\n    jez.addMessage(chatMsg, { color: \"steelblue\", fSize:16, msg:msg, tag:\"saves\", icon:aItem.img })\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doBonusDamage() {\n    const FUNCNAME = \"doBonusDamage()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(\"The do On Use code\")\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Perform the VFX code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function runVFX(token1) {\n    jez.log(\"Launch VFX\")\n    jez.log(\"args[0]\", args[0])\n    const FUNCNAME = \"runVFX(token1)\";\n    const VFX_NAME = `${MACRO}`\n    // COOL-THING: Wildcard selection of graphic file.\n    const VFX_LOOP = \"modules/jb2a_patreon/Library/Generic/Portals/Portal_Vortex_Red_H_400x400.webm\"\n    const VFX_OPACITY = 1.0;\n    const VFX_SCALE = 1.0;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    new Sequence()\n    .effect()\n        .file(VFX_LOOP)\n        .atLocation(token1) // COOL-THING: Effect will appear at  template, center\n        .scale(VFX_SCALE)\n        .scaleIn(0.25, 1000)    // Expand from 0.25 to 1 size over 1 second\n        .rotateIn(180, 1000)    // 1/2 Rotation over 1 second \n        .scaleOut(0.25, 1000)   // Contract from 1 to 0.25 size over 1 second\n        .rotateOut(180, 1000)   // 1/2 Counter Rotation over 1 second\n        .opacity(VFX_OPACITY)\n        .duration(6000)\n        .name(VFX_NAME)         // Give the effect a uniqueish name\n        .fadeIn(10)             // Fade in for specified time in milliseconds\n        .fadeOut(1000)          // Fade out for specified time in milliseconds\n        .extraEndDuration(1200) // Time padding on exit to connect to Outro effect\n    .play();\n    await jez.wait(100)         // Don't delete till VFX established\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}