{
  "name": "Call Lightning (Jez)",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/lighting-sky-2.jpg",
  "data": {
    "description": {
      "value": "<p>A storm cloud appears in the shape of a cylinder that is 10 feet tall with a 60-foot radius, centered on a point you can see within range above you. The spell fails if you can’t see a point in the air where the storm cloud could appear (for example, if you are in a room that can’t accommodate the cloud).</p>\n<p>When you cast the spell, choose a point you can see under the cloud. A bolt of lightning flashes down from the cloud to that point. Each creature within <strong>5 feet</strong> of that point must make a <strong>Dexterity saving</strong> throw. A creature takes <strong>3d10 lightning </strong>damage on a failed save, or <span style=\"text-decoration:underline\">half as much</span> damage on a successful one.</p>\n<p>On each of your turns until the spell ends, you can use your action to call down lightning in this way again, targeting the same point or a different one.</p>\n<p>If you are outdoors in stormy conditions when you cast this spell, the spell gives you control over the existing storm instead of creating a new one. Under such conditions, the spell’s damage increases by 1d10.</p>\n<p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 4th or higher level, the damage increases by 1d10 for each slot level above 3rd.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 10,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": 120,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 15,
      "scaling": "spell"
    },
    "level": 3,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d10"
    }
  },
  "effects": [
    {
      "_id": "eZFAZPpk4AaLhERg",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 600
      },
      "icon": "/systems/dnd5e/icons/spells/lighting-sky-2.jpg",
      "label": "Call Lightning Testbed",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "macro.itemMacro"
    }
  ],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.ZTllYTNkY2IzZWYz"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Call Lightning (Jez)",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Call_Lighning.0.3.js\"\n/*****************************************************************************************\n * Create a temporary attack item to use against the victims of Call Lighting\n * \n * 01/05/22 0.1 Creation of Macro\n * 05/17/22 0.3 FoundryVTT 9.x Update, also this macro is no longer used\n *****************************************************************************************/\nconst DEBUG = true;\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`------- Starting ${MACRONAME} ---------------`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\nconst ATTACK_ITEM = \"Lighting Strike\";\njez.log(\"------- Global Values Set -------\",\n    `Active Token (aToken) ${aToken?.name}`, aToken,\n    `Active Actor (aActor) ${aActor?.name}`, aActor,\n    `Active Item (aItem) ${aItem?.name}`, aItem)\nlet msg = \"\";\nlet errorMsg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`------Finishing ${MACRONAME}---------------------`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(\"--------------Off---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    jez.log(`doOff ---> Delete ${ATTACK_ITEM} from ${aToken.name} if it exists`)\n    await jez.deleteItems(ATTACK_ITEM, \"spell\", aActor);\n    jez.log(\"--------------Off---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n  }\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    jez.log(\"--------------OnUse-----------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        `First Targeted ID`, tActor?.data._id,   // <== This is needed ID -JGB\n        `First Targeted Token (tToken) of ${args[0].targets?.length}, ${tToken?.name}`, tToken,\n        `First Targeted Actor (tActor) ${tActor?.name}`, tActor);\n\n    await CreateTemporaryAbility();\n\n    jez.log(\"--------------OnUse-----------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return (true);\n\n    //----------------------------------------------------------------------------------\n    // Function to create a new spell attack to invoke damage on our victim\n    //\n    async function CreateTemporaryAbility() {\n        const numDice = args[0].spellLevel;\n\n        let damageType = \"lightning\"\n        let spellDC = aActor.data.data.attributes.spelldc;\n        jez.log(` spellDC ${spellDC}`);\n        jez.log(` args[0].item.img ${args[0].item.img}`);\n        let value = `As a bonus action, this attack may be used to inflict <b>${numDice}d10 lighting</b>\n         damage to targets in a 5 foot radius, within the 60 foot radius storm.<br><br>\n         Targets are allowed a DC${spellDC} DEX save for half damage.`;\n\n        let itemData = [{\n            \"name\": ATTACK_ITEM,\n            \"type\": \"spell\",\n            \"img\": args[0].item.img,\n            \"effects\": [],\n            \"data\": {\n                \"ability\": \"\",\n                \"actionType\": \"save\",\n                \"activation\": {\n                    \"cost\": 1,\n                    \"type\": \"action\"\n                },\n                \"damage\": {\n                    \"parts\": [\n                        [\n                            `${numDice}d10`,\n                            `${damageType}`\n                        ]\n                    ],\n                    \"versatile\": \"\"\n                },\n                \"description\": { \"value\": value },\n                \"formula\": \"\",\n                \"level\": 0,\n                \"preparation\": {\n                    \"mode\": \"innate\",\n                    \"prepared\": false\n                },\n                \"range\": {\n                    \"units\": \"ft\",\n                    \"value\": 150\n                },\n                \"save\": {\n                    \"ability\": \"dex\",\n                    \"dc\": `${spellDC}`,\n                    \"scaling\": \"spell\"\n                },\n                \"school\": \"con\",\n                \"source\": \"Call Lightning\",\n                \"target\": {\n                    \"type\": \"cylinder\",\n                    \"units\": \"ft\",\n                    \"value\": 5\n                },\n            },\n            \"flags\": {\n                \"autoanimations\": {\n                    \"animType\": \"t8\",\n                    \"animLevel\": false,\n                    \"killAnim\": false,\n                    \"options\": { \"ammo\": false}, \n                    \"override\": true,\n                    \"sourceToken\": { \"enable\": false },\n                    \"targetToken\": { \"enable\": false },\n                    \"templates\": {\n                        \"customAnim\": false,\n                        \"customPath\": \"\",\n                        \"loopDelay\": 250,\n                        \"persistent\": false,\n                        \"removeTemplate\": true,\n                        \"tempAnim\": \"ex03\",\n                        \"tempColor\": \"yellowblue\",\n                        \"tempLoop\": 3,\n                        \"tempType\": \"circle\",\n                    }\n                }\n\n            }\n        }];\n\n        let itemData1 = [{\n            \"name\": ATTACK_ITEM,\n            \"type\": \"spell\",\n            \"data\": {\n                \"source\": \"Casting Flaming Sphere\",\n                \"ability\": \"\",\n                \"description\": {\"value\": value},\n                \"actionType\": \"save\",\n                \"attackBonus\": 0,\n                \"damage\": {\n                    \"parts\": [\n                        [\n                            `${numDice}d6`,\n                            `${damageType}`\n                        ]\n                    ],\n                },\n                \"formula\": \"\",\n                \"save\": {\n                    \"ability\": \"dex\",\n                    \"dc\": spellDC,\n                    \"scaling\": \"spell\"\n                },\n                \"level\": 0,\n                \"school\": \"abj\",\n                \"preparation\": {\n                    \"mode\": \"innate\",\n                    \"prepared\": false\n                },\n            },\n            \"img\": args[0].item.img,\n            \"effects\": []\n    \n        }];\n\n        jez.log()\n        jez.log()\n        jez.log(\"itemData\", itemData)\n        jez.log()\n        jez.log()\n\n        await aActor.createEmbeddedDocuments(\"Item\", itemData);\n\n        msg = `<p style=\"color:DarkSlateBlue;font-size:14px;\">\n        <b>${tToken.name}</b> summons forth a 60ft radius storm cloud and can command lightning \n        strikes each round. Strikes will do ${numDice}d10 lightning damage to those within 5 feet \n        of each <b>Lightning Strike</b>, DC${spellDC} DEX save allowed for half damage.</p><br><br>\n        <p font-size:14px;\">\n        <b>FoundryVTT</b>: Use temporary <b>Lightning Strike</b> spell to do damage.</p>`;\n\n        postResults(msg);\n    }\n}\n\n/***************************************************************************************\n * Function to delete an item from actor\n *\n * Parameters\n *  - itemName: A string naming the item to be found in actor's inventory\n *  - actor: Optional actor to be searched, defaults to actor launching this macro\n ***************************************************************************************/\n /*async function deleteItem(itemName, actor) {\n    const FUNCNAME = \"deleteItem(itemName, actor)\";\n    jez.log(\"-------------------------------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        \"itemName\", itemName,\n        `actor ${actor?.name}`, actor);\n\n    // If actor was not passed, pick up the actor invoking this macro\n    actor = actor ? actor : canvas.tokens.get(args[0].tokenId).actor;\n\n    let item = actor.items.find(item => item.data.name === itemName && item.type === \"spell\")\n    jez.log(\"*** Item to be deleted:\", item);\n    if (item == null || item == undefined) {\n        jez.log(`${actor.name} does not have \"${itemName}\"`);\n        jez.log(`${FUNCNAME} returning false`);\n        return (false);\n    }\n    jez.log(`${actor.name} had \"${item.name}\"`, item);\n    let returnCode = await actor.deleteOwnedItem(item._id);\n    \n    if (returnCode) {\n        jez.log(`${FUNCNAME} returning true, item deleted`,returnCode);\n        jez.log(\"-----------------------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n        return (true);\n    } else {\n        jez.log(`${FUNCNAME} returning false, item delete failed`);\n        jez.log(\"-----------------------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n        return (false);  \n    }\n}*/\n/***************************************************************************************************\n * Post the results to chat card\n ***************************************************************************************************/\n async function postResults(resultsString) {\n    const lastArg = args[args.length - 1];\n\n    let chatMessage = game.messages.get(lastArg.itemCardId);\n    let content = await duplicate(chatMessage.data.content);\n    jez.log(`chatMessage: `,chatMessage);\n    const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n    const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${resultsString}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    await ui.chat.scrollBottom();\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "gm-notes": {},
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}