{
  "name": "Fireball",
  "type": "spell",
  "img": "Icons_JGB/Spells/3rd_Level/Fireball/fireball-orange-2.jpg",
  "data": {
    "description": {
      "value": "<p>A bright streak flashes from your pointing finger to a point you choose within range then blossoms with a low roar into an explosion of flame. Each creature in a 20-foot radius sphere centered on that point must make a Dexterity saving throw. A target takes 8d6 fire damage on a failed save, or half as much damage on a successful one.</p>\n<p>The fire spreads around corners. It ignites flammable objects in the area that aren't being worn or carried.</p>\n<p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot level above 3rd.</p>\n<p><strong>FoundryVTT: </strong>The color of the fire visuals is controlled by a color substring in the spell  icon name.  Supported colors are: orange, blue, purple.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "sphere"
    },
    "range": {
      "value": 150,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "8d6",
          "fire"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "dex",
      "dc": 17,
      "scaling": "spell"
    },
    "level": 3,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A tiny ball of bat guano and orange sulfur",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d6"
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.MjAyYjM5ZmI2ZTU3"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Fireball",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Fireball\"\n/*****************************************************************************************\n * All this macro needs is a runVFX function triggered as an OnUse ItemMacro\n * \n * 02/11/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst TEMPLATE_ID = args[0].templateId\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg, color) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    //jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    jez.addMessage(chatMsg, { color: `dark${color}`, fSize: 14, msg: msg, tag: \"saves\" });\n\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // COOL-THING: Set color for fireball based on keyword in image name\n    //\n    let color = \"\"\n    const IMAGE = aItem.img.toLowerCase()\n    if(IMAGE.includes(\"orange\")) color = \"orange\"\n    else if(IMAGE.includes(\"blue\")) color = \"blue\"\n    else if(IMAGE.includes(\"purple\")) color = \"purple\"\n    else if(IMAGE.includes(\"red\")) color = \"orange\"\n    else if(IMAGE.includes(\"eerie\")) color = \"blue\"\n    else if(IMAGE.includes(\"sky\")) color = \"blue\"\n    else if(IMAGE.includes(\"acid\")) color = \"purple\"\n    if (!color) color = \"orange\"\n    runVFX(aToken, color)\n    // https://www.w3schools.com/tags/ref_colornames.asp\n    msg = `${aToken.name}'s fireball burst in a ball of ${color} flames`\n    postResults(msg, color)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Allowed Colors: orange, blue, purple\n ***************************************************************************************************/\n// COOL-THING: Run the VFX -- Beam from originator to the target\nasync function runVFX(token1, color) {\n    const FUNCNAME = \"runVFX(color)\";\n    const VFX_BOLT = `modules/jb2a_patreon/Library/3rd_Level/Fireball/FireballBeam_01_${color}_30ft_1600x400.webm`\n    const VFX_BURST = `modules/jb2a_patreon/Library/3rd_Level/Fireball/FireballExplosion_01_${color}_800x800.webm`\n    const VFX_SMOKE = `modules/jb2a_patreon/Library/Generic/Smoke/SmokePuff01_*_Regular_Grey_400x400.webm`\n    const VFX_OPACITY = 1.0;\n    const VFX_SCALE = 1.1;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let templateCenter = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID).center;\n    jez.log(\"templateCenter\",templateCenter)\n    canvas.templates.get(TEMPLATE_ID).document.delete()\n    new Sequence()\n    .effect()\n        .file(VFX_BOLT)\n        .atLocation(token1) \n        .reachTowards(templateCenter)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .waitUntilFinished(-500) \n    .effect()\n        .file(VFX_BURST)\n        .atLocation(templateCenter)\n        .scale(VFX_SCALE*1.2)\n        .opacity(VFX_OPACITY)\n        .waitUntilFinished(-1200) \n    .effect()\n        .file(VFX_SMOKE)\n        .scale(VFX_SCALE*1.5)\n        .opacity(VFX_OPACITY)\n        .atLocation(templateCenter)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_SMOKE)\n        .scale(VFX_SCALE*2.5)\n        .opacity(VFX_OPACITY*0.75)\n        .atLocation(templateCenter)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_SMOKE)\n        .scale(VFX_SCALE*3.5)\n        .opacity(VFX_OPACITY*0.50)\n        .atLocation(templateCenter)\n        .waitUntilFinished(-1000) \n    .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": {
      "version": 3,
      "killAnim": false,
      "options": {
        "ammo": false
      },
      "override": true,
      "autoOverride": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animLevel": false,
      "animType": "t1"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}