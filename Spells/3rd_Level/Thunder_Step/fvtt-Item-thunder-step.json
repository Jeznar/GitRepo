{
  "name": "Thunder Step",
  "type": "spell",
  "img": "icons/skills/ranged/projectile-explosion-black-orange.webp",
  "data": {
    "description": {
      "value": "<p class=\"p1\" style=\"margin-top:0px;margin-bottom:6.5px;font-variant-numeric:normal;font-variant-east-asian:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:Helvetica;color:#131310\">Teleport yourself up to 90 feet. A thunderous boom sounds, each creature within 10 feet of where you left must make a CON Save, taking <strong>3d10 thunder </strong>damage on a failure half as much damage on a success. The thunder can be heard from up to 300 feet away.</p>\n<p class=\"p1\" style=\"margin-top:0px;margin-bottom:6.5px;font-variant-numeric:normal;font-variant-east-asian:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:Helvetica;color:#131310\">You can also<span class=\"s1\" style=\"text-decoration-line:underline\"> bring along one willing adjacent creature of your size or smaller.</span> </p>\n<p class=\"p1\" style=\"margin-top:0px;margin-bottom:6.5px;font-variant-numeric:normal;font-variant-east-asian:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:Helvetica;color:#131310\">See <a href=\"https://www.dndbeyond.com/spells/thunder-step\" target=\"_blank\" rel=\"noopener\">D&amp;D Beyond</a> for details.</p>\n<p class=\"p1\" style=\"margin-top:0px;margin-bottom:6.5px;font-variant-numeric:normal;font-variant-east-asian:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:Helvetica;color:#131310\"><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 4th level or higher, the damage <strong>increases by 1d10 </strong>for each slot level above 3rd.</p>\n<hr />\n<h2 class=\"Core-Styles_Core-Body\"><strong>FoundryVTT</strong></h2>\n<p class=\"Core-Styles_Core-Body\">This spell is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 260",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 3,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.YzgyZjBlMzdkNDdm"
    },
    "autoanimations": {
      "killAnim": false,
      "below": false,
      "override": false,
      "targetToken": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Thunder Step",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Thunder_Step.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Total rewrite of what was a macro less, two step Thunder Step implementation.  \n * This is now just one step and is highly automated.\n * \n * 12/04/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set standard variables\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst DAM_DICE = '3d10'\nconst DAM_TYPE = 'thunder'\nconst SAVE_TYPE = 'con'\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\nconst ITEM_RANGE = jez.getRange(aItem, [\"\", \"ft\", \"any\"])\nconst MAX_DISTANCE = (ITEM_RANGE) ? ITEM_RANGE : 90\nconst VFX_DAMAGE = \"modules/jb2a_patreon/Library/Generic/Marker/MusicMarker_01_Regular_GreenOrange_400x400.webm\"\nconst VFX_OUT    = \"modules/jb2a_patreon/Library/Generic/Impact/ImpactMusicNote01_01_Regular_GreenYellow_400x400.webm\"\nconst VFX_OPACITY = 1.0;\nconst VFX_SCALE = 1.4;\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    // Set function variables\n    //\n    const DAM_LOCATION = aToken.center\n    //-----------------------------------------------------------------------------------------------\n    // Pick a teleportation buddy\n    //\n    let bToken = await pickTeleportBuddy({traceLvl: 0});\n    if (bToken && TL > 1) jez.trace(`${TAG} Our teleport buddy is ${bToken.name}`, bToken)\n    else jez.trace(`${TAG} We have no teleport buddy.`)\n    //-----------------------------------------------------------------------------------------------\n    // Build list of tokens that can be damaged, exclude the caster and buddy\n    //\n    let damTokens = []\n    let damageableTokens = await jez.inRangeTargets(aToken, 10, { direction: \"o2t\", chkMove: true, traceLvl:0 });\n    if (TL > 1) jez.trace(`${TAG} ${damageableTokens.length} Damageable Token Objects`, damageableTokens);\n    for (let i = 0; i < damageableTokens.length; i++) {\n        if (damageableTokens[i].name !== bToken?.name) {\n            if (TL > 2) jez.trace(`${TAG} Tokens`,\n                `Candidate ${damageableTokens[i].name}`,damageableTokens[i],\n                `Buddy     ${bToken?.name}             `,bToken)\n            damTokens.push(damageableTokens[i])\n            if (TL > 1) jez.trace(`${TAG} Damageable: ${damageableTokens[i]?.name}`);\n        }\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Perform the teleport\n    //\n    if (TL > 2) jez.trace(`${TAG} ${aToken.name} before ==> {${aToken.x}, ${aToken.y}} center`, aToken.center)\n    const  NEW_LOC = await doTeleport(aToken, bToken, {traceLvl: TL})\n    if (!NEW_LOC) {\n        jez.refundSpellSlot(aToken, L_ARG.spellLevel, { traceLvl: TL, quiet: false, spellName: aItem.name })\n        msg = `No valid teleport location selected.`\n        postResults(msg)\n        return null\n    }\n    if (TL > 2) jez.trace(`${TAG} ${aToken.name} after ===> {${NEW_LOC?.x}, ${NEW_LOC?.y}} center`, NEW_LOC)\n    //-----------------------------------------------------------------------------------------------\n    // Fire off the damage element at the DAM_LOCATION\n    //\n    damageVFX(DAM_LOCATION)\n    inflictDamage(damTokens, {traceLvl: TL})\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    if (bToken) msg = `With the rumble of thunder in a 300 foot area, <b>${aToken.name}</b> has  \n    teleported away bringing <b>${bToken.name}</b> along and damaging creatures that had been within \n    10 feet.`\n    else msg = `With the rumble of thunder in a 300 foot area, <b>${aToken.name}</b> has teleported \n    away, damaging creatures that had been within 10 feet.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Pick a teleportation buddy, returning the buddy token object or null\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function pickTeleportBuddy(options = {}) {\n    const FUNCNAME = \"pickTeleportBuddy(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // \n    //\n    const queryTitle = \"Select Willing Creature to Teleport\";\n    const queryText = \"A willing creature may be selected from the list below.\";\n    let adjTokNames = [];\n    let buddyObject = null\n    //-----------------------------------------------------------------------------------------------\n    // \n    //\n    let ADJ_TOK_OBJS = await jez.inRangeTargets(aToken, 8, { direction: \"o2t\", chkSight: true });\n    if (TL > 1)\n        jez.trace(`${TAG} ${ADJ_TOK_OBJS.length} Adjacent Token Objects`, ADJ_TOK_OBJS);\n    if (ADJ_TOK_OBJS.length === 0) {\n        if (TL > 1)\n            jez.trace(`${TAG} No effectable targets in range`, \"i\");\n    }\n    else {\n        for (let i = 0; i < ADJ_TOK_OBJS.length; i++) {\n            adjTokNames.push(ADJ_TOK_OBJS[i].name);\n            if (TL > 1)\n                jez.trace(`${TAG} Adjacent: ${adjTokNames[i]}`);\n        }\n    }\n    if (TL > 1) jez.trace(`${TAG} ${adjTokNames.length} Potential Teleportation Buddies`);\n    if (adjTokNames.length !== 0) { // Optionally pick teleportation buddy if one available\n        const BUDDY_NAME = await jez.pickRadioListArray(queryTitle, queryText, jez.wait, adjTokNames.sort());\n        if (TL > 1) jez.trace(`${TAG} Buddy selected`, BUDDY_NAME);\n        if (BUDDY_NAME) {   // If we picked a buddy by name, loop through ADJ_TOK_OBJS for a match\n            for (let i = 0; i < ADJ_TOK_OBJS.length; i++) {\n                if (TL > 2) jez.trace(`${TAG} Checking ${BUDDY_NAME} against ${ADJ_TOK_OBJS[i].name}`);\n                if (BUDDY_NAME === ADJ_TOK_OBJS[i].name) {\n                    buddyObject = ADJ_TOK_OBJS[i]\n                    break\n                }\n            }\n        }\n    }\n    return buddyObject\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * requires Warpgate, Sequencer, and JB2A patreon module\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doTeleport(aToken, bToken, options = {}) {\n    const FUNCNAME = \"runVFX(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, 'aToken',aToken,\n        'bToken',bToken, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // Pick spot for the active token\n    //\n    let destination = await teleport(aToken, aToken.center, MAX_DISTANCE)\n    if (TL > 1) jez.trace(`${TAG} First teleport spot picked`, destination)\n    if (!destination) return null\n    //-----------------------------------------------------------------------------------------------\n    // Pick spot for the buddy token, if any\n    //\n    if (!bToken) return(destination)\n    let bDestination = await teleport(bToken, destination, 5)\n    if (TL > 1) jez.trace(`${TAG} Second teleport spot picked`, bDestination)\n    return(destination)\n    //-----------------------------------------------------------------------------------------------\n    // Local teleport function\n    //\n    async function teleport(token5e, origin, range) {\n        if (TL > 1) jez.trace(`${TAG} origin ==>`, origin)\n        let cachedDistance = 0;\n        const checkDistance = async (crosshairs) => {\n            while (crosshairs.inFlight) {\n                //wait for initial render\n                await jez.wait(100);\n                const ray = new Ray(origin, crosshairs);\n                const distance = canvas.grid.measureDistances([{ ray }], { gridSpaces: true })[0];\n                //only update if the distance has changed\n                if (cachedDistance !== distance) {\n                    cachedDistance = distance;\n                    if (distance > range) crosshairs.icon = 'Icons_JGB/Misc/Warning.webm';\n                    else crosshairs.icon = token5e.data.img;\n                    crosshairs.draw();\n                    crosshairs.label = `${distance} ft`;\n                }\n            }\n        }\n        const SNAP = token5e.data.width % 2 === 0 ? 1 : -1\n        if (TL > 1) jez.trace(`${TAG} SNAP`, SNAP)\n        const location = await warpgate.crosshairs.show(\n            {\n                // swap between targeting the grid square vs intersection based on token5e's size\n                interval: SNAP,\n                size: token5e.data.width,\n                icon: token5e.data.img,\n                label: '0 ft.',\n            },\n            { show: checkDistance },\n        );\n        if (TL > 1) jez.trace(`${TAG} location ==>`, location)\n        if (location.cancelled || cachedDistance > range) {\n            return;\n        }\n        runVFX(token5e, location, { traceLvl: TL })\n        return location\n    }\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked each round by DAE\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function runVFX(token, location, options = {}) {\n    const FUNCNAME = \"runVFX(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,'token', token, \n        'location', location, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    const COLOR = 'dark_green'\n    const seq = new Sequence().effect()\n        .scale(.25)\n        .endTime(400)\n        .file(`jb2a.magic_signs.circle.02.conjuration.intro.${COLOR}`)\n        .playbackRate(1.5)\n        .waitUntilFinished(-500)\n        .atLocation(token)\n    seq.animation()\n        .on(token)\n        .fadeOut(500)\n        .duration(500)\n        .waitUntilFinished();\n    seq.animation()\n        .on(token)\n        .teleportTo(location, { relativeToCenter: false })\n        .snapToGrid()\n        .waitUntilFinished();\n    seq.animation()\n        .on(token)\n        .fadeIn(1000)\n        .waitUntilFinished(-999);\n    seq.effect()\n        .file('jb2a.impact.003.blue')\n        .atLocation(token)\n    seq.effect()\n        .scale(.25)\n        .startTime(400)\n        .file(`jb2a.magic_signs.circle.02.conjuration.outro.${COLOR}`)\n        .atLocation(token)\n    await seq.play();\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Play the damage VFX \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\n async function damageVFX(coords) {\n    await jez.wait(1000)\n    new Sequence()\n        .effect()\n        .file(VFX_DAMAGE)\n        .attachTo(coords)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .duration(4000)\n        // .name(VFX_NAME)          // Give the effect a uniqueish name\n        .fadeIn(1000)            // Fade in for specified time in milliseconds\n        .fadeOut(1000)           // Fade out for specified time in milliseconds\n        .play()\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked each round by DAE\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function inflictDamage(targetTokens,  options={}) {\n    const FUNCNAME = \"doEach(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,'targetTokens',targetTokens,\n        \"options\",options);\n    //-----------------------------------------------------------------------------------------------\n    // Some handy function variables and constant\n    //\n    const FLAVOR = \"Does this provide flavor?\"\n    let failSaves = []  // Array to contain the tokens that failed their saving throws\n    let madeSaves = []  // Array to contain the tokens that made their saving throws\n    let damaged = [] \n    let madeNames = \"\"\n    let failNames = \"\"\n    //----------------------------------------------------------------------------------\n    // Roll saves weeding out any immunes\n    //\n    let targetCount = targetTokens.length\n    if (TL > 1) jez.trace(`${TAG} ${targetCount} Targeted Token`)\n    msg = `Total of ${targetCount} target(s) within area of effect of ${aItem.name}<br>`\n    for (let i = 0; i < targetCount; i++) {\n        let tToken = targetTokens[i];\n        let tActor = tToken?.actor;\n        let save = (await tActor.rollAbilitySave(SAVE_TYPE,\n            { flavor: FLAVOR, chatMessage: false, fastforward: true }));\n        if (save.total < SAVE_DC) {\n            failSaves.push(tToken)\n            damaged.push(tToken)\n            failNames += `+ <b>${tToken.name}</b> ${save.total} (${save._formula})<br>`\n        } else {\n            madeNames += `- <b>${tToken.name}</b> ${save.total} (${save._formula})<br>`\n            damaged.push(tToken)\n            madeSaves.push(tToken)\n        }\n    } \n    if (TL > 1) jez.trace(`${TAG} Results`,\"Made Saves\", madeSaves,\"Failed Saves\", failSaves)\n    //----------------------------------------------------------------------------------\n    // Roll the damage Dice\n    //\n    let damRoll = new Roll(`${DAM_DICE}`).evaluate({ async: false });\n    if (TL > 1) jez.trace(`${TAG} Damage Rolled ${damRoll.total}`,damRoll)\n    game.dice3d?.showForRoll(damRoll);\n    //----------------------------------------------------------------------------------\n    // Apply damage to those that failed saving throws\n    //\n    if (TL > 2) jez.trace(`${TAG} Applying damage to failed saves`)\n    new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damRoll, DAM_TYPE, [], damRoll,\n                                   {flavor: `Damage from ${aItem.name}`, itemCardId: args[0].itemCardId });\n    const FULL_DAM = damRoll.total\n    MidiQOL.applyTokenDamage([{damage:FULL_DAM, type:DAM_TYPE}], FULL_DAM, new Set(failSaves), aItem, new Set());\n    //----------------------------------------------------------------------------------\n    // Apply damage to those that made saving throws\n    //\n    if (TL > 2) jez.trace(`${TAG} Applying damage to made saves`)\n    const HALF_DAM = Math.floor(damRoll.total/2)\n    MidiQOL.applyTokenDamage([{damage:HALF_DAM, type:DAM_TYPE}], HALF_DAM, new Set(madeSaves), aItem, new Set());\n    //----------------------------------------------------------------------------------\n    // Add results to chat card\n    //\n    let chatMessage = await game.messages.get(args[args.length - 1].itemCardId);\n    await jez.wait(100)\n    let msg1 = \"\";\n    if (madeNames) {\n        msg1 = `<b><u>Successful Save</u></b><br>${madeNames}`\n        await jez.wait(100)\n        jez.addMessage(chatMessage, { color: \"darkgreen\", fSize: 14, msg: msg1, tag: \"saves\" })\n    }\n    if (failNames) {\n        msg1 = `<b><u>Failed Save</u></b><br>${failNames}`\n        await jez.wait(100)\n        jez.addMessage(chatMessage, { color: \"darkred\", fSize: 14, msg: msg1, tag: \"saves\" })\n    }\n    await jez.wait(100)\n    jez.addMessage(chatMessage, { color: \"darkblue\", fSize: 14, msg: msg, tag: \"saves\" })\n \n\n\n    if (TL>3) jez.trace(`${TAG} More Detailed Trace Info.`)\n\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}