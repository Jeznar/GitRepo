{
  "name": "Fey Step",
  "type": "spell",
  "img": "icons/magic/control/debuff-energy-snare-brown.webp",
  "data": {
    "description": {
      "value": "<p>As a <strong>Bonus Action</strong>, the fey magically teleports up to 30 feet to an unoccupied space it can see. Then one of the following effects occurs, based on the fey’s chosen mood:</p>\n<p><strong>Fuming</strong>. The fey has advantage on the next attack roll it makes before the end of this turn.</p>\n<p><strong>Mirthful</strong>. The fey can force one creature it can see within 10 feet of it to make a Wisdom saving throw against your spell save DC. Unless the save succeeds, the target is <a href=\"https://www.dndbeyond.com/compendium/rules/basic-rules/appendix-a-conditions#Charmed\" data-tooltip-href=\"//www.dndbeyond.com/conditions/2-tooltip?disable-webm=1&amp;disable-webm=1\">charmed</a> by you and the fey for 1 minute or until the target takes any damage.</p>\n<p><strong>Tricksy</strong>. The fey can fill a 5-foot cube within 5 feet of it with magical darkness, which lasts until the end of its next turn.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 260",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "space"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 2,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "innate",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [],
  "flags": {
    "autoanimations": {
      "killAnim": false,
      "options": {
        "ammo": false,
        "overrideAuto": false,
        "autoVariant": "01",
        "autoColor": "blue",
        "autoRepeat": 1,
        "autoDelay": 500,
        "autoScale": 1,
        "hideTemplate": false,
        "enableCustom01": false,
        "scale": 1.5
      },
      "override": true,
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "animLevel": false,
      "animType": "t12",
      "animName": "mistystep",
      "color": "green",
      "teleDist": 30
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.YzgyZjBlMzdkNDdm"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Fey Step",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Fey_Step.0.2\"\nconsole.log(MACRONAME)\n/*****************************************************************************************\n * Create a temporary attack item to use against the victim of Heat Metal\n * \n * 01/13/22 0.1 Creation of Macro\n * 01/14/22 0.2 Add Fuming self buff\n *****************************************************************************************/\nconst DEBUG = true;\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlog(\"\")\nlog(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nlog(\"------- Global Values Set -------\",\n    `Active Token (aToken) ${aToken?.name}`, aToken,\n    `Active Actor (aActor) ${aActor?.name}`, aActor,\n    `Active Item (aItem) ${aItem?.name}`, aItem)\nlet msg = \"\";\nlet errorMsg = \"\";\n\nlet nameParts = aToken.name.split(\" \")\nlet mood = nameParts[nameParts.length - 2]\nlog(`${aToken.name} is a in a ==>${mood}<== mood.`)\n\nPerformMoodSpecificSteps();\n\nlog(`============== Finishing === ${MACRONAME} =================`);\nlog(\"\")\nreturn;\n\nasync function PerformMoodSpecificSteps() {\n        log(\"Starting Async Function\");\n        switch (mood) {\n            case \"Fuming\":\n                log(\"Do fuming stuff\");\n\n                const buff = `Fuming Feystep Advantage`\n                let gameRound = game.combat ? game.combat.round : 0;\n                let effectData = {\n                    label: buff,\n                    icon: aItem.img,\n                    origin: aActor.uuid,\n                    disabled: false,\n                    duration: { turns: 1, startRound: gameRound },\n                    flags: { dae: { macroRepeat: \"none\", specialDuration: [\"turnStart\", \"1Attack\"] } },\n                    changes: [\n                        { key: `flags.midi-qol.advantage.attack.all`, mode: ADD, value: 1, priority: 20 },\n                    ]\n                };\n                await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: [effectData] });\n                break;\n            case \"Mirthful\":\n                log(\"do mirthful stuff\");\n                /* \n                 * Mirthful. The fey can force one creature it can see within 10 feet of it to make a Wisdom saving \n                 * throw against your spell save DC. Unless the save succeeds, the target is charmed by you and the \n                 * fey for 1 minute or until the target takes any damage.\n                 */\n                break;\n            case \"Tricksy\":\n                log(\"do tricksy stuff\");\n\n\n\n                // code block\n                break;\n            default:\n                errorMsg = `Summoned Fey does not have an allowed \"mood\" (Fuming, Mirthful, or Tricksy)`;\n                log(errorMsg);\n                ui.notifications.error(errorMsg);\n                return (false);\n\n            // code block\n        }\n\n        return;\n}\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************/\n\n/***************************************************************************************************\n * DEBUG Logging\n * \n * If passed an odd number of arguments, put the first on a line by itself in the log,\n * otherwise print them to the log seperated by a colon.  \n * \n * If more than two arguments, add numbered continuation lines. \n ***************************************************************************************************/\nfunction log(...parms) {\n    if (!DEBUG) return;             // If DEBUG is false or null, then simply return\n    let numParms = parms.length;    // Number of parameters received\n    let i = 0;                      // Loop counter\n    let lines = 1;                  // Line counter \n\n    if (numParms % 2) {  // Odd number of arguments\n        console.log(parms[i++])\n        for ( i; i<numParms; i=i+2) console.log(` ${lines++})`, parms[i],\":\",parms[i+1]);\n    } else {            // Even number of arguments\n        console.log(parms[i],\":\",parms[i+1]);\n        i = 2;\n        for ( i; i<numParms; i=i+2) console.log(` ${lines++})`, parms[i],\":\",parms[i+1]);\n    }\n}\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}