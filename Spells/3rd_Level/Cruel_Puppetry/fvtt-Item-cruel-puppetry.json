{
  "name": "Cruel Puppetry",
  "type": "spell",
  "img": "Icons_JGB/Spells/3rd_Level/Cruel_Puppetry/Puppet.png",
  "data": {
    "description": {
      "value": "<p>You attempt to bind a creatures soul to a doll, linking the creature to the doll in a sympathetic link. The target must make a <strong>Charisma saving throw</strong>. On failure, the creature becomes bound to the doll. No effect on a successful save.</p>\n<p>As part of casting the spell when the creature fails the save, and on subsequent turns using your action until the spell ends, you can perform one of the following actions:</p>\n<ul>\n<li><strong>Hold the doll still</strong>, causing the creature to be @JournalEntry[CZWEqV2uG9aDWJnD]{Restrained} until start of your next turn.</li>\n<li><strong>Force the doll to move</strong>, causing the creature to <span style=\"text-decoration:underline\">move up to 15 feet </span>in a direction of your choice that it can move. Creature may not move further than its current speed.</li>\n<li><strong>Smash the doll,</strong> causing it take<span style=\"text-decoration:underline\"> 3d6 bludgeoning</span> damage.</li>\n<li><strong>Rip the doll in half</strong>, ending the spell, destroying the doll,  and dealing 3<span style=\"text-decoration:underline\">d12 necrotic</span> damage.</li>\n</ul>\n<p>Each time after the first you use an action to manipulate the doll, after the effect takes place, the creature can <strong>repeat the Charisma with disadvantage</strong>, ending the effect on a successful save.</p>\n<p>Once a creature has been targeted by this spell, they cannot be targeted again for 24 hours.</p>\n<p><strong>At Higher Levels</strong>: When cast with a <strong>7th level spell slot </strong>or above, the range of the spell becomes unlimited, as long as the target is on the same plane as the caster. Forced movement increases by 5 feet per level.  The number of damage dice increase by one per level.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 120,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "material",
      "target": "",
      "amount": 1
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "cha",
      "dc": null,
      "scaling": "spell"
    },
    "level": 3,
    "school": "nec",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": true,
      "concentration": true
    },
    "materials": {
      "value": "a small humanoid doll worth at least 5 gp and something from the target creature (such as blood, hair, or scales) both of which the spell consumes",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "c8a5sF2RvTUjMmJa",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "Cruel_Puppetry Parm1",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "turns": 10,
        "rounds": 10
      },
      "icon": "Icons_JGB/Spells/3rd_Level/Cruel_Puppetry/Puppet.png",
      "label": "Cruel Puppetry",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false,
          "selfTarget": false,
          "durationExpression": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false,
          "displayTemp": false
        },
        "core": {
          "statusId": ""
        }
      },
      "tint": "",
      "selectedKey": "macro.itemMacro"
    }
  ],
  "flags": {
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "core": {
      "sourceId": "Item.uFIvytbMJkxXUNXh"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Cruel Puppetry",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Cruel_Puppetry.0.5.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Create a temporary attack item to use against the victim of Cruel Puppetry.\n * \n * This macro needs to be in the macro folder and attached as an Item Macro.\n *\n * 01/15/22 0.1 Creation of Macro\n * 01/16/22 0.2 Finishing up.  Still has issue with multiple targets\n * 05/17/22 0.3 FoundryVTT 9.x compatibility\n * 08/02/22 0.4 Add convenientDescription\n * 12/17/22 0.5 Update logging and general style\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //-----------------------------------------------------------------------------------------------------------------------------------\n if (TL > 0) jez.trace(`${TAG} === Starting ===`);\n if (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set standard variables\n //\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor;\n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set Macro specific globals\n //\nlet msgTitle = \"\";\nconst SMASH_IMG = \"Icons_JGB/Spells/3rd_Level/Cruel_Puppetry/Puppet.png\"\nconst RIP_IMG = \"Icons_JGB/Spells/3rd_Level/Cruel_Puppetry/Puppet_Broken.png\"\nconst FORCE_IMG = \"Icons_JGB/Spells/3rd_Level/Cruel_Puppetry/Puppet_Moved.png\"\nconst HOLD_IMG = \"Icons_JGB/Spells/3rd_Level/Cruel_Puppetry/Puppet_Restrained.png\"\nconst FAIL_ICON = \"Icons_JGB/Misc/Failure.png\"\nconst RESTRAINED_JOURNAL = \"<b>@JournalEntry[CZWEqV2uG9aDWJnD]{restrained}</b>\"\nconst RESTRAINED_ICON = \"modules/combat-utility-belt/icons/restrained.svg\"\nconst RESTRAINED_NAME = \"Restrained\" // aItem.name || \"Nature's Wraith\";\nconst ERROR_ICON = \"Icons_JGB/Misc/Error.png\"\nconst ATTACK_ITEM = \"Cruel Puppetry Repeat Effect\";\nlet distance = 15\nlet numDice = 3\n// let repeatExe = false\n// if (args[0]?.item?.name.toLowerCase().includes(\"repeat\")) repeatExe = true // e.g. \"Cruel Puppetry Repeat Effect\"\nconst REPEAT_EXE = (args[0]?.item?.name.toLowerCase().includes(\"repeat\")) ? true : false\nif (TL > 1) jez.trace(`${TAG} Repeat execution`, REPEAT_EXE) \n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach({ traceLvl: TL });\t\t\t\t\t     // DAE everyround\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif ((args[0]?.tag === \"OnUse\") && (!REPEAT_EXE)) { // Only check on first doOnUse run\n    if (!(await preCheck())) {\n        if (TL > 1) jez.trace(`${TAG} `, errorMsg)\n        return;\n    }\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n async function preCheck() {\n    if (args[0].targets.length !== 1)\n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    let originID = L_ARG.origin.split(\".\")[1] // aqNN90V6BjFcJpI5 (Origin  ID)\n    if (TL > 1) jez.trace(`${TAG} originID`, originID);\n    let oToken = canvas.tokens.objects.children.find(e => e.data.actorId === originID)\n    if (TL > 1) jez.trace(`${TAG} oToken`, oToken)\n    let oActor = oToken.actor\n    if (TL > 1) jez.trace(`${TAG} oActor`, oActor)\n    if (TL > 1) jez.trace(`${TAG} doOff ---> Delete ${ATTACK_ITEM} from ${oToken.data.name} if it exists`)\n    //await jezDeleteItem(ATTACK_ITEM, oActor);\n    await jez.deleteItems(ATTACK_ITEM, \"spell\", oActor);\n    await DAE.unsetFlag(oActor, `${MACRO}.spellData`);\n    if (TL > 1) jez.trace(`${TAG} Actor to remove concentration from`, oActor)\n    let concentrating = await oActor.effects.find(ef => ef.data.label === \"Concentrating\");\n    if (TL > 1) jez.trace(`${TAG} Concentration effect`, concentrating)\n    if (concentrating) await concentrating.delete();\n    // await deleteItem(ATTACK_ITEM, oActor);\n    if (TL > 1) jez.trace(`${TAG} -------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    let spellData;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // On repeat execution, get target and level info from data flag\n    //\n    if (REPEAT_EXE) { \n        spellData = await DAE.getFlag(aActor, `${MACRO}.spellData`);\n        if (TL > 1) jez.trace(`${TAG} ___Flag Data___`,\n            \"targetID\", spellData.targetID,\n            \"spellLevel\", spellData.spellLevel);\n        tToken = canvas.tokens.objects.children.find(e => e.data.actorId === spellData.targetID);\n        tActor = tToken?.actor;\n        // set spell effects based on flag data\n        distance = Math.min(tActor.data.data.attributes.movement.walk, 5 * spellData.spellLevel)\n        numDice = spellData.spellLevel;\n        if (TL > 1) jez.trace(`${TAG} Have Target Roll Save Again`)\n        let saveDC = aActor.data.data.attributes.spelldc;\n        const SAVE_TYPE = \"cha\"\n        const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${saveDC}</b> to end <b>Cruel Puppetry</b>`;\n        let save = (await tActor.rollAbilitySave(SAVE_TYPE,\n            { FLAVOR, chatMessage: true, fastforward: true, disadvantage: true }));\n        if (TL > 1) jez.trace(`${TAG} save`, save);\n        msgTitle = \"Cruel Puppetry - \"\n        if (save.total > saveDC) {\n            if (TL > 1) jez.trace(`${TAG} save was made with a ${save.total}`);\n            let concentrating = await aActor.effects.find(ef => ef.data.label === \"Concentrating\");\n            if (concentrating) await concentrating.delete();\n            msg = `${tToken.name} has broken the Cruel Pupptry spell, with a CHA save of ${save.total}\n            against a DC${saveDC}.  The doll used to cast the spell has been destroyed.`\n            msgTitle += \"Spell Broken\"\n            jez.postMessage({ color: \"BlueViolet\", fSize: 14, msg: msg, title: msgTitle, icon: FAIL_ICON })\n            return;\n        } else {\n            if (TL > 1) jez.trace(`${TAG} save failed with a ${save.total}`);\n\n            // Post results to game chat\n            msg = `${tToken.name} failed to save against the Cruel Pupptry spell, with a CHA save of \n            ${save.total} against a DC${saveDC}.  ${aToken.name} may choose an effect.`\n            msgTitle += \"Save Failed\"\n            jez.postMessage({ color: \"DarkGreen\", fSize: 14, msg: msg, title: msgTitle, icon: FAIL_ICON })\n        }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // First time execution\n    //\n    } else { // First time execution\n        await createItem({traceLvl: TL})\n        // calculate spell effects based on level and target\n        distance = Math.min(tActor.data.data.attributes.movement.walk, 5 * args[0].spellLevel)\n        numDice = args[0].spellLevel;\n        // Store info in a DAE flag on the caster\n        spellData = {\n            targetID: tActor?.id,\n            spellLevel: args[0].spellLevel,\n        }\n        await DAE.unsetFlag(aActor, `${MACRO}.spellData`);\n        await DAE.setFlag(aActor, `${MACRO}.spellData`, spellData);\n    }\n    //---------------------------------------------------------------------------------------------------------------------------------\n    await pickFlavor({traceLvl: TL})\n    //---------------------------------------------------------------------------------------------------------------------------------\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n    /*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n     * \n     *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n    async function createItem(options = {}) {\n        const FUNCNAME = \"createItem(options={})\";\n        const FNAME = FUNCNAME.split(\"(\")[0]\n        const TAG = `${MACRO} ${FNAME} |`\n        const TL = options.traceLvl ?? 0\n        if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n        if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n        //-------------------------------------------------------------------------------------------------------------------------------\n        // \n        //\n        let descValue = `As an action, this innate spell may be used to repeat one of the \n        effects of <b>Cruel Puppetry<b> to <b>${tToken.name}</b>.  \n       <br><br>\n       <b>FoundryVTT</b>: The target does not need to be targeted to use this ability.`;\n        let itemData = [{\n            \"name\": ATTACK_ITEM,\n            \"type\": \"spell\",\n            \"flags\": {\n                \"midi-qol\": {\n                    \"onUseMacroName\": \"Cruel_Puppetry\"\n                }\n            },\n            \"data\": {\n                \"ability\": \"\",\n                \"actionType\": \"other\",\n                \"activation\": {\n                    \"cost\": 1,\n                    \"type\": \"action\"\n                },\n                \"description\": { \"value\": descValue },\n                \"formula\": \"\",\n                \"level\": args[0].spellLevel,\n                \"preparation\": {\n                    \"mode\": \"innate\",\n                    \"prepared\": false\n                },\n                \"source\": `${tToken.name}'s Cruel Puppetry`,\n                \"school\": \"nec\",\n\n            },\n            \"img\": SMASH_IMG,\n            \"effects\": []\n        }];\n        await aActor.createEmbeddedDocuments(\"Item\", itemData);\n        if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    }\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Select Flavor of Spell this Round and Initiate Callback\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function pickFlavor(options = {}) {\n    const FUNCNAME = \"createItem(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    const queryTitle = \"Select How to Use Doll\"\n    const queryText = \"Pick one from drop down list\"\n    const flavors = [\n        \"Hold the doll still: Restrains the victim.\",\n        `Force the doll to move: Victim moves ${distance} feet as you like.`,\n        `Smash the doll: causing it take ${numDice}d6 bludgeoning damage.`,\n        `Rip the doll in half: ends spell and does ${numDice}d12 necrotic damage.`\n    ]\n    pickFromListArray(queryTitle, queryText, pickFlavorCallBack, flavors);\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Create and process selection dialog, passing it onto specified callback function\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction pickFromListArray(queryTitle, queryText, pickCallBack, queryOptions) {\n    const FUNCNAME = \"pickFromList(queryTitle, queryText, ...queryOptions)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, 'queryTitle', queryTitle, 'queryText', queryText, \n        'pickCallBack', pickCallBack, 'queryOptions', queryOptions);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (typeof (pickCallBack) != \"function\") {\n        msg = `pickFromList given invalid pickCallBack, it is a ${typeof (pickCallBack)}`\n        ui.notifications.error(msg);\n        if (TL > 1) jez.trace(`${TAG} ${msg}`);\n        return\n    }\n    if (!queryTitle || !queryText || !queryOptions) {\n        msg = `pickFromList arguments should be (queryTitle, queryText, pickCallBack, [queryOptions]),\n                   but yours are: ${queryTitle}, ${queryText}, ${pickCallBack}, ${queryOptions}`;\n        ui.notifications.error(msg);\n        if (TL > 1) jez.trace(`${TAG} ${msg}`);\n        return\n    }\n    let template = `\n    <div>\n    <div class=\"form-group\">\n        <label>${queryText}</label>\n        <select id=\"selectedOption\">`\n    for (let option of queryOptions) {\n        template += `<option value=\"${option}\">${option}</option>`\n    }\n    template += `</select>\n    </div></div>`\n    new Dialog({\n        title: queryTitle,\n        content: template,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: 'OK',\n                callback: async (html) => {\n                    const selectedOption = html.find('#selectedOption')[0].value\n                    if (TL > 1) jez.trace(`${TAG} selected option`, selectedOption)\n                    pickCallBack(selectedOption)\n                },\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel',\n                callback: async (html) => {\n                    if (TL > 1) jez.trace(`${TAG} canceled`)\n                    pickCallBack(null)\n                },\n            },\n        },\n        default: 'cancel',\n    }).render(true)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Callback function to handle menu choice.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function pickFlavorCallBack(selection) {\n    const FUNCNAME = \"pickFlavorCallBack(selection)\"\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, 'selection', selection);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (!selection) {\n        if (TL > 1) jez.trace(`${TAG} No selection`, selection)\n        return;\n    }\n    let choice = selection.split(\" \")[0];     // Obtain first token from the selection\n    if (TL > 1) jez.trace(`${TAG} Choice made: ${choice}!`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    msgTitle = \"Cruel Puppetry - \"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    switch (choice) {\n        case \"Hold\":\n            if (TL > 1) jez.trace(`${TAG} Hold Case: ${selection}`)\n            applyRestrained(tActor.uuid)\n            msg = `${tToken.name} is affected by the ${RESTRAINED_JOURNAL} condition until\n                    ${aToken.name}'s next turn`\n            msgTitle += \"Hold Still\"\n            jez.postMessage({ color: \"purple\", fSize: 14, msg: msg, title: msgTitle, icon: HOLD_IMG })\n            msg = `Drat! ${aToken.name}'s cruel puppet has restrained me.`\n            bubbleForAll(tToken.id, msg, true, true)\n            break;\n        case \"Force\":\n            if (TL > 1) jez.trace(`${TAG} Force Case: ${selection}`)\n            msg = `<b>${tToken.name}</b> is forced to move up to ${distance} feet.\n                   <b>${aToken.name}</b> chooses path and destination.`\n            msgTitle += \"Forced Move\"\n            if (TL > 1) jez.trace(`${TAG} ${msg}`)\n            jez.postMessage({ color: \"purple\", fSize: 14, msg: msg, title: msgTitle, icon: FORCE_IMG })\n            msg = `Run Away! ${aToken.name} has forced me to move.`\n            bubbleForAll(tToken.id, msg, true, true)\n            break;\n        case \"Smash\":\n            if (TL > 1) jez.trace(`${TAG} Smash Case: ${selection}`)\n            applySmash()\n            msg = `Ouch! ${aToken.name} is abusing that doll, and it hurts me.`\n            bubbleForAll(tToken.id, msg, true, true)\n            break;\n        case \"Rip\":\n            if (TL > 1) jez.trace(`${TAG} Rip Case: ${selection}`)\n            await applyRip()\n            if (TL > 1) jez.trace(`${TAG} Force Case: ${selection}`)\n            msg = `Double Ouch! ${aToken.name} has destroyed that doll, and it really hurts.`\n            bubbleForAll(tToken.id, msg, true, true)\n            break;\n        default:\n            if (TL > 1) jez.trace(`${TAG} Default Case: ${selection}`)\n            jez.badNews(`Disturbingly, reached end of switch without a match for ==>${choice}<==`,'e')\n            return (choice)\n    }\n    return (choice)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply Restrained Condition to specified UUID\n    //\n    function applyRestrained(actorUUID) {\n        const FUNCNAME = \"applyRestrained(actorUUID)\";\n        const FNAME = FUNCNAME.split(\"(\")[0]\n        const TAG = `${MACRO} ${FNAME} |`\n        if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n        if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"actorUUID\", actorUUID);\n        //---------------------------------------------------------------------------------------------------------------------------\n        //jezcon.add({ effectName: RESTRAINED_NAME, uuid: actorUUID, traceLvl: TL });\n        const CE_DESC = `Speed is 0, no bonuses to speed, grants advantage to attacks, disadvantage on attacks and DEX Saves`\n        let effectData = [{\n            label: RESTRAINED_NAME,\n            icon: RESTRAINED_ICON,\n            origin: aActor.uuid,\n            disabled: false,\n            flags: { \n                dae: { itemData: aItem }, \n                convenientDescription: CE_DESC\n            },\n            duration: { rounds: 1, startRound: GAME_RND },\n            changes: [\n                { key: `flags.VariantEncumbrance.speed`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `data.attributes.movement.walk`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `data.attributes.movement.swim`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `data.attributes.movement.fly`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `data.attributes.movement.climb`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `data.attributes.movement.burrow`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `flags.midi-qol.disadvantage.attack.all`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.all`, mode: jez.OVERIDE, value: 1, priority: 20 },\n                { key: `flags.midi-qol.disadvantage.ability.save.dex`, mode: jez.OVERIDE, value: 1, priority: 20 },\n            ]\n        }]\n        MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: actorUUID, effects: effectData });\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply Smash Damage\n    //\n    function applySmash() {\n        let DAMAGETYPE = \"bludgeoning\";\n        let damageDice = `${numDice}d6`;\n        let damageRoll = new Roll(`${damageDice}`).evaluate({ async: false });\n        new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageRoll.total, DAMAGETYPE, [tToken], damageRoll,\n            { flavor: `${tToken.name} suffers from ${aItem.name} <b>Smash</b>`, itemCardId: args[0].itemCardId });\n\n        msg = `<b>${aToken.name}</b> smashes the focused doll, inflicting ${damageRoll.total} ${DAMAGETYPE} \n               damage on <b>${tToken.name}</b>.`\n        msgTitle += \"Smash Doll\"\n        if (TL > 1) jez.trace(`${TAG} ${msg}`)\n        jez.postMessage({ color: \"Maroon\", fSize: 14, msg: msg, title: msgTitle, icon: SMASH_IMG })\n\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply Rip Damage & End Spell\n    //\n    async function applyRip() {\n        let DAMAGETYPE = \"necrotic\";\n        let damageDice = `${numDice}d12`;\n        let damageRoll = new Roll(`${damageDice}`).evaluate({ async: false });\n        new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageRoll.total, DAMAGETYPE, [tToken], damageRoll,\n            { flavor: `${tToken.name} suffers from ${aItem.name} <b>Rip</b>`, itemCardId: args[0].itemCardId });\n        //---------------------------------------------------------------------------------------------------------------------------\n        msg = `<b>${aToken.name}</b> rips the focused doll in twain, inflicting ${damageRoll.total} ${DAMAGETYPE} \n               damage on <b>${tToken.name}</b> and ending the spell effect.`\n        msgTitle += \"Rip Doll\"\n        if (TL > 1) jez.trace(`${TAG} ${msg}`)\n        jez.postMessage({ color: \"FireBrick\", fSize: 14, msg: msg, title: msgTitle, icon: RIP_IMG })\n        //---------------------------------------------------------------------------------------------------------------------------\n        let concentrating = await aActor.effects.find(ef => ef.data.label === \"Concentrating\");\n        if (concentrating) await concentrating.delete();\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}