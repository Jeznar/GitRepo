{
  "name": "Blinding Smite",
  "type": "spell",
  "img": "Icons_JGB/Conditions/Blind.png",
  "data": {
    "description": {
      "value": "<p>The next time you hit a creature with a melee weapon attack during this spell&rsquo;s duration, you weapon flares with a bright light, and the attack deals an <strong>extra 3d8 radiant damage</strong> to the target. Additionally, the target must succeed on a <strong>Constitution saving</strong> throw <strong>or be @JournalEntry[lIPpTxLdMS9z2G94]{Blinded}</strong> until the spell ends.</p>\n<p>A creature blinded by this spell<span style=\"text-decoration: underline;\"> makes another Constitution saving throw at the end of each of its turns</span>. On a successful save, it is no longer blinded.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This spell is automated</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 3,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Blinding Smite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Blinding_Smite.0.3\"\njez.log(MACRONAME)\n/*****************************************************************************************\n * Implment Branding Smite!\n * \n * 01/25/22 0.1 Creation of Macro\n * 01/26/22 0.2 Add VFX\n * 08/01/22 0.3 Fix to accomodate change in Midi (flags.midi-qol.itemDetails needs OVERIDE)\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(\"\")\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\njez.log(\"------- Global Values Set -------\",\n    `Active Token (aToken) ${aToken?.name}`, aToken,\n    `Active Actor (aActor) ${aActor?.name}`, aActor,\n    `Active Item (aItem) ${aItem?.name}`, aItem)\nlet msg = \"\";\nlet errorMsg = \"\";\nconst GAME_RND = game.combat ? game.combat.round : 0;\nconst SAVE_DC = aToken.actor.data.data.attributes.spelldc;\nconst SAVE_TYPE = \"con\";\nconst COND_APPLIED = \"Blinded\"\nconst COND_ICON = aItem.img\nconst DAM_TYPE = \"radiant\";\nconst SPELL_LVL = LAST_ARG?.spellLevel ? LAST_ARG.spellLevel : 2\njez.log(\"CONSTANTS Set\", \"GAME_RND\", GAME_RND, \"SAVE_DC\", SAVE_DC, \"SAVE_TYPE\", SAVE_TYPE,\n    \"COND_ICON\", COND_ICON, \"DAM_TYPE\", DAM_TYPE, \"SPELL_LVL\", SPELL_LVL)\n// VFX Settings -------------------------------------------------------------------\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_TARGET = \"modules/jb2a_patreon/Library/2nd_Level/Divine_Smite/DivineSmite_01_Regular_YellowWhite_Target_400x400.webm\"\nconst VFX_CASTER = \"modules/jb2a_patreon/Library/2nd_Level/Divine_Smite/DivineSmite_01_Regular_YellowWhite_Caster_400x400.webm\"\nconst VFX_OPACITY = 1.0;\nconst VFX_SCALE = 0.70;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nlet returnFunc = null\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0]?.tag === \"DamageBonus\") {\n    let returnFunc = await doBonusDamage();    // DAE Damage Bonus\n    return(returnFunc)\n}\n\njez.log(`============== Finishing === ${MACRONAME} =================`);\njez.log(\"\")\nreturn;\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************/\n\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_CASTER)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------\n    // Define and apply the effect\n    // \n    const CE_DESC = `Next weapon hit does extra damage and forces a DC${SAVE_DC} CON save or Blinded.`\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: jez.CUSTOM, value: `ItemMacro.${aItem.name}`, priority: 20 },\n            { key: \"flags.midi-qol.itemDetails\", mode: jez.OVERRIDE, value: `${LAST_ARG.uuid}`, priority: 20 },\n        ],\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        duration: { rounds: 1, seconds: 6, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { \n            dae: { itemData: aItem, specialDuration: [\"DamageDealt\"] },\n            convenientDescription: CE_DESC\n        },\n        icon: aItem.img,\n        label: aItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: effectData });\n    msg = `${aToken.name}'s weapon flashes briefly in anticiapation of landing a blinding smite.`\n    await jez.addMessage(game.messages.get(args[args.length - 1].itemCardId),\n                   {color:\"darkblue\",fSize:14,msg:msg,tag:\"saves\"})\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"doBonusDamage\"\n ***************************************************************************************************/\n async function doBonusDamage() {\n     const FUNCNAME = \"doBonusDamage()\";\n     jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n     if (args[0].tag === \"DamageBonus\") {\n         if (![\"mwak\"].includes(LAST_ARG.item.data.actionType)) return {};\n        //  let conc = aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n        //  jez.log(\"conc\", conc);\n         let tToken = canvas.tokens.get(LAST_ARG.hitTargets[0].id);\n         jez.log(\"tToken\",tToken)\n         let itemUuid = getProperty(LAST_ARG.actor.flags, \"midi-qol.itemDetails\");\n         let itemN = await fromUuid(itemUuid);\n         jez.log(\"itemN =====>\", itemN)\n         let numDice = LAST_ARG.isCritical ? 6 : 3;\n        //  await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: aToken.actor.uuid, effects: [conc.id] });\n        //  await jez.wait(500);\n         //-------------------------------------------------------------------------------------------------------------\n         // Launch VFX on target\n         // \n         new Sequence()\n        .effect()\n            .file(VFX_TARGET)\n            .attachTo(tToken)\n            .scale(VFX_SCALE)\n            .opacity(VFX_OPACITY)  \n            .belowTokens(false)\n            .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n        //-------------------------------------------------------------------------------------------------------------\n        // If already Blinded, remove previous condition\n        //        \n        let existingEffect = tToken.actor.effects.find(ef => ef.data.label === COND_APPLIED)\n        if (existingEffect) {\n            jez.log(`${tToken.name} was already ${COND_APPLIED} clearing that now.`,existingEffect)\n            await existingEffect.delete();\n        }\n        //-------------------------------------------------------------------------------------------------------------\n        // Apply Blinded condition\n        //   \n        const CE_DESC = `Blinded until DC${SAVE_DC} CON save at end of turn.`\n        let effectData = [{\n            label: COND_APPLIED,\n            icon: itemN.img,\n            origin: \"\",\n            disabled: false,\n            flags: { \n                dae: {stackable: false, macroRepeat: \"none\" },\n                convenientDescription: CE_DESC\n            },\n            duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n            changes: [\n                { key: `flags.midi-qol.grants.advantage.attack.all`, mode: ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.disadvantage.attack.all`, mode: ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.OverTime`, mode: OVERRIDE, \n                        value: `turn=end,label=${COND_APPLIED},saveDC=${SAVE_DC},saveAbility=${SAVE_TYPE},saveRemove=true`, \n                        priority: 20 }\n            ]\n        }];\n        let blinded = tToken.actor.effects.find(i => i.data.label === COND_APPLIED);\n        if (!blinded) applyEffect(tToken, effectData);\n        //----------------------------------------------------------------------------------------------------------\n        // Chill a bit and then pair the effects\n        //\n        await jez.wait(100);\n        jez.pairEffects(aActor, \"Concentrating\", tToken.actor, \"Blinded\")\n        //-------------------------------------------------------------------------------------------------------------\n        // Dig through the chat history, to find the message that should have new message added...but don't use it?\n        //\n        let msgHistory = [];\n        game.messages.reduce((list, message) => {\n            if (message.data?.flags[\"midi-qol\"]?.itemId === aItem._id && message.data.speaker.token === aToken.id) list.push(message.id);\n            return list;\n        }, msgHistory);\n        //-------------------------------------------------------------------------------------------------------------\n        // Return Extra Damage function\n        //\n        jez.log(`-------------- Finishing(Extra Damage))--- ${MACRONAME} ${FUNCNAME} -----------------`,\n            \"numDice\", numDice, \"DAM_TYPE\", DAM_TYPE, \"itemN.name\", itemN.name);\n        return { damageRoll: `${numDice}d8[${DAM_TYPE}]`, flavor: `(${itemN.name} (${CONFIG.DND5E.damageTypes[DAM_TYPE]}))` };\n    }\n    jez.log(`-------------- Finished(Bottom)--- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\nasync function applyEffect(target, effectData){\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.actor.uuid, effects: effectData });\n}\n// async function updateEffect(aToken, target, conc){\n//     let frightened = target.actor.effects.find(i => i.data.label === COND_APPLIED);        \n//     await MidiQOL.socket().executeAsGM(\"updateEffects\", { actorUuid: aToken.actor.uuid, updates: [{ _id: conc.id, changes: [{ key: `flags.dae.deleteUuid`, mode: 5, value: frightened.uuid, priority: 20 }] }] });\n// }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.DgWR85rS6HmbYHJY"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}