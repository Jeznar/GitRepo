{
  "name": "Fear",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/horror-eerie-2.jpg",
  "data": {
    "description": {
      "value": "<p>You project a phantasmal image of a creature's worst fears. Each creature in a 30-foot cone must succeed on a <strong>Wisdom saving throw</strong> or drop whatever it is holding and become @JournalEntry[tjg0x0jXlwvbdI9h]{Frightened} for the duration.</p>\n<p>While Frightened by this spell, a creature <strong>must take the Dash action</strong> and move away from you by the safest available route on each of its turns, unless there is nowhere to move.</p>\n<p>If the creature ends its turn in a location where it <strong>doesn't have line of sight</strong> to you, the creature can make a <strong>Wisdom saving throw</strong>. On a successful save, the spell ends for that creature.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This spell is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 239",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 30,
      "width": null,
      "units": "ft",
      "type": "cone"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "level": 3,
    "school": "ill",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A white feather or the heart of a hen.",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "dynamiceffects": {
      "equipActive": true,
      "alwaysActive": false,
      "effects": [
        {
          "modSpecKey": "flags.dnd5e.conditions",
          "value": "Frightened",
          "mode": "+",
          "targetSpecific": false,
          "id": 1,
          "itemId": "QDrZkRDh3yKlVjlf",
          "active": true,
          "_targets": []
        }
      ]
    },
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "core": {
      "sourceId": "Compendium.Dynamic-Effects-SRD.DAE SRD Spells.HVWI8wdLs54LkhUX"
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "autoanimations": {
      "version": 4,
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false,
        "menuType": "cone",
        "variant": "",
        "enableCustom": true,
        "repeat": null,
        "delay": null,
        "scaleX": null,
        "scaleY": null,
        "opacity": null,
        "removeTemplate": true,
        "persistent": false,
        "customPath": "modules/jb2a_patreon/Library/Generic/Template/Cone/Breath_Weapon/BreathWeapon_Poison01_Regular_Purple_30ft_Cone_Burst_600x600.webm"
      },
      "override": true,
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animType": "template",
      "animation": "",
      "color": "",
      "audio": {
        "a01": {
          "enable": false
        }
      },
      "preview": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Fear",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Fear.0.2.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Does some house keeping for the Fear Force Spell.  Specifically:\n * \n * 1. If no targets failed their save, remove concentration and display a message\n * 2. Update the convenientDescription of concentrating on caster\n * 3. Process Tokens that Failed Saves, giving them EFFECT_NAME\n * \n * 10/20/22 0.1 Creation of Macro\n * 10/21/22 0.2 Add doEach for subsequent saving throws when out of Line of Sight (LoS)\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = \"Fear\"\nlet ceDesc = \"\"\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });     // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach({ traceLvl: TL });\nif (TL > 1) jez.trace(`=== Finished === ${MACRONAME} ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    // let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    // let tActor = tToken?.actor;\n    const SAVE_TYPE = \"wis\"\n    const SAVE_DC = aActor.data.data.attributes.spelldc;\n    let failSaves = args[0].failedSaves\n    //----------------------------------------------------------------------------------\n    // 1. Make sure at least one target failed its saving throw \n    //\n    if (LAST_ARG.failedSaves.length === 0) {                // All targets made saves\n        clearEffect(aToken.id, \"Concentrating\")\n        if (TL > 2) jez.trace(`${TAG} All targets made successful saving throws`);\n        msg = `No targets are affected by <b>${aToken.name}</b>'s spell.`\n        postResults(msg)\n        return;\n    }\n    //-----------------------------------------------------------------------------------------------\n    // 2. Update the convenientDescription of concentrating on caster\n    //\n    ceDesc = `Maintaining ${EFFECT_NAME} effect on those that failed saves`\n    await jez.setCEDesc(aActor, \"Concentrating\", ceDesc, { traceLvl: TL });\n    //---------------------------------------------------------------------------------------------\n    // 3. Process Tokens that Failed Saves, giving them EFFECT_NAME\n    //\n    if (TL > 2) jez.trace(`${TAG} ${failSaves.length} Tokens failed saves, need '${EFFECT_NAME}' added`)\n    for (let i = 0; i < failSaves.length; i++) {\n        if (TL > 2) jez.trace(`${TAG}  ${i + 1}) ${failSaves[i].name}`, failSaves[i])\n        applyFear(failSaves[i], SAVE_TYPE, SAVE_DC);\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    msg = `${aToken.name} projects a phantasmal image of her/his target's worst fears.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Remove an effect from passed subject\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function clearEffect(subject, effectName, options = {}) {\n    const TL = options.traceLvl ?? 0\n    sActor = jez.getActor5eDataObj(subject)\n    const EFFECT = await aToken.actor.effects.find(i => i.data.label === effectName);\n    if (TL > 1) jez.trace(`${TAG} Attempting to clear ${effectName} from ${subject.name}`, EFFECT)\n    if (EFFECT) await EFFECT.delete()\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * When the effect ends, remove the token represented the phantasm on the scene\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n    if (TL > 1) jez.trace(\"Token to dismiss\", args[1])\n    warpgate.dismiss(args[1], game.scenes.viewed.id)\n    return;\n}\n/***************************************************************************************************\n * Apply the Fear condition to a token, adding CEDesc and save data for use by doEach()\n ***************************************************************************************************/\nasync function applyFear(token, saveType, saveDC) {\n    const CE_DESC = `Afflicted by ${aToken.name}'s ${EFFECT_NAME}, must DASH away if possible.`\n    let effectData = [{\n        label: EFFECT_NAME,\n        icon: aItem.img,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        flags: {\n            dae: { stackable: false, macroRepeat: \"endEveryTurn\" },\n            convenientDescription: CE_DESC\n        },\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [\n            { key: `macro.CE`, mode: jez.CUSTOM, value: \"Frightened\", priority: 20 },\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `${aToken.id} Save_DC ${saveDC} ${saveType}`, priority: 20 },\n        ]\n    }];\n    // let horrified = token.actor.effects.find(i => i.data.label === HORRIFIED_COND);\n    // if (!horrified) applyEffect(token, effectData);\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: token.actor.uuid, effects: effectData });\n}\n/***************************************************************************************************\n * Perform the code that runs every turn on the afflicted. This code is fired by DAE's itemMacro \n * on the applied affect, which must provide required arguments:\n * \n * - \"each\":    5th from last arg (aka first), string literal \"each\" from DAE\n * - OriginId:  4th from last arg, a 16 character string providing the origin ID of the effect\n * - \"Save_DC\": 3rd from last arg, string literal \"Save_DC\" -- documentation only\n * - SAVE_DC:   2nd from last argument, interger value of saving throw\n * - SAVE_TYPE: 1st from last argument, string value of save type\n * - onUseObj:  Last argument\n * \n ***************************************************************************************************/\nasync function doEach(options = {}) {\n    const FUNCNAME = \"doEach(options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // Parse the passed arguments setting some constants, arguments passed of this form:\n    //  Save_DC ${saveDC} ${saveType}\n    //\n    let save = null;\n    const ORIGIN_TOKENID = args[args.length - 5]\n    const SAVE_DC = args[args.length - 3]\n    const SAVE_TYPE = args[args.length - 2]\n    if (TL > 1) jez.trace(`${TAG} ${aToken.name} perhaps attempts DC${SAVE_DC} ${SAVE_TYPE} save to remove ${EFFECT_NAME} effect.`);\n    //-----------------------------------------------------------------------------------------------\n    // Parse the passed DAE provided origin data to find the origin token, etc.  It will be of form: \n    //    Scene.MzEyYTVkOTQ4NmZk.Token.4k8NyJnKNvjALfja.Item.MTI3MDA4YzllNTZh (for unlinked tokens?)\n    //-OR-\n    //    Actor.qvVZIQGyCMvDJFtG.Item.aEqDbQmGc462BSNV (for linked tokens?)\n    //\n    let origin = LAST_ARG.origin\n    if (TL > 1) jez.trace(`${TAG} Origin data`, origin);\n    let noLoS = false;\n    const ORIGIN_TOKENS = origin.split(\".\")\n    // let ORIGIN_TOKENID = ORIGIN_TOKENS[3];\n    let oItemId = ORIGIN_TOKENS[5];\n    let oToken = await canvas.tokens.placeables.find(ef => ef.id === ORIGIN_TOKENID)\n    if (ORIGIN_TOKENS.length === 6) {\n        if (TL > 1) jez.trace(`${TAG} Origin Token ID ${ORIGIN_TOKENID}, Item ID ${oItemId}`)\n    }\n    else if (ORIGIN_TOKENS.length === 4) {\n        let oActorId = ORIGIN_TOKENS[1]\n        oItemId = ORIGIN_TOKENS[3];\n        if (TL > 1) jez.trace(`${TAG} Origin IDs Actor ${oActorId}, Token ${ORIGIN_TOKENID}, Item ${oItemId}`)\n    }\n    else return jez.badNews(`${TAG} Could not parse origin information from ${origin}`,\"e\")\n    if (TL > 1) jez.trace(`${TAG} Origin token (${ORIGIN_TOKENID}): ${oToken?.name}`, oToken)\n    let oItem = oToken.actor.data.items.get(oItemId)\n    if (TL > 1) jez.trace(`${TAG} Origin item ${oItem?.name}`, oItem)\n    //-----------------------------------------------------------------------------------------\n    // Grab the EFFECT_NAME condition info\n    //\n    let condition = aActor.effects.find(ef => ef.data.label === EFFECT_NAME)\n    if (condition) {\n        if (TL > 1) jez.trace(`${TAG} ${EFFECT_NAME} Condition`, condition)\n        // Does the afflicted have a clear LoS to the originator?\n        noLoS = canvas.walls.checkCollision(new Ray(aToken.center, oToken.center), { type: \"sight\", mode: \"any\" })\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} LoS to ${oToken.name} blocked?`, noLoS)\n    } else return jez.badNews(`Somehow ${aToken.name} lacks ${EFFECT_NAME} condition.  HeLp!`, \"w\")\n    //-----------------------------------------------------------------------------------------\n    // Execute the save, only if there is no LOS to origin of effect.\n    //\n    if (noLoS) {\n        let flavor = `${aToken.name} attempts ${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> \n            save to remove <b>${aItem.name}</b> normally as ${oToken.name} can not be seen.`;\n        save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: flavor, chatMessage: true, fastforward: true }));\n    } else {\n        bubbleForAll(aToken.id, `I am terrified of ${oToken.name} and must DASH away!`, true, true)\n        return\n    }\n    if (TL > 1) jez.trace(`${TAG} Save results`, save)\n    //-----------------------------------------------------------------------------------------\n    // Apply the save results\n    //\n    if (save.total < SAVE_DC) {\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} failed with a ${SAVE_TYPE} save with ${save.total} vs ${SAVE_DC}`)\n        bubbleForAll(aToken.id, `I remain terrified of ${oToken.name} and must DASH away!`, true, true)\n    } else {\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} made a ${SAVE_TYPE} save with ${save.total} vs ${SAVE_DC}`)\n        // aActor.deleteEmbeddedEntity(\"ActiveEffect\", LAST_ARG.effectId); // deleteEmbeddedEntity not a function\n        aActor.deleteEmbeddedDocuments(\"ActiveEffect\",[LAST_ARG.effectId]);\n        bubbleForAll(aToken.id, `I no longer live in fear of ${oToken.name}!`, true, true)\n    }\n    if (TL > 1) jez.trace(`${TAG} -------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}