{
  "name": "Time Stop",
  "type": "spell",
  "img": "icons/magic/time/clock-stopwatch-white-blue.webp",
  "data": {
    "description": {
      "value": "<p>You briefly stop the flow of time for everyone but yourself. No time passes for other creatures, while you take <strong>1d4+1</strong> turns in a row, during which you can use actions and move as normal.</p>\n<p>This spell ends if one of the actions you use during this period, or any effects that you create during this period, <strong>affects a creature other than you or an object being worn or carried by someone other than you</strong>. In addition, the spell ends if you move to a place more than 1,000 feet from the location where you cast it.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Early end conditions for this spell should be monitored, duration is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 9,
    "school": "trs",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Item.NTZmMWMzZmRkNDkw"
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Time Stop",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Timestop\"\n/*****************************************************************************************\n * This macro implments VFX and a widespread DAE effect for timestop. \n * \n * 04/13/22 0.1 Creation of Macro\n * 07/09/22 Replace CUB.addCondition with CE\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst VFX_NAME = `${MACRO}-${aToken.name}`\nconst VFX_PULSE = 'jb2a.extras.tmfx.outpulse.circle.02.slow';\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(\"Something could have been here\")\n    Sequencer.EffectManager.endEffects({ name: VFX_NAME, object: aToken }); // End VFX\n\n    //----------------------------------------------------------------------------------------------\n    // Remove the STOP (No_Actions) condition that isn't the current token\n    //\n    let tokenArrayOff = await getTokenArray(aToken)\n    for (const element of tokenArrayOff) {\n        jez.log(\"element\", element)\n        await jezcon.remove(\"No_Actions\", element, {traceLvl: 5});    \n        await jez.wait(100)    \n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n  \n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n ***************************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    runVFX(aToken)\n    let actorUuidArrayOn = await getTokenArray(aToken)\n    let options = {\n        allowDups: false, \n        replaceEx: true, \n        origin: aActor.uuid, \n        overlay: true, \n        traveLvl: 4\n    }\n    await jezcon.addCondition(\"No_Actions\", actorUuidArrayOn ,options)\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const GAME_RND = game.combat ? game.combat.round : 0; // Added missing initilization -JGB\n    //----------------------------------------------------------------------------------------------\n    // Deternine how many round timestop will be up, silently.\n    //\n    let duration = getRandomInt(4) + 2 // 1d4+1 rounds -- Need one more to allow correct action cnt\n    jez.log(\"duration\", duration)\n    //----------------------------------------------------------------------------------------------\n    // Define the main effect that will be applied to active token\n    //\n    let effectData = [\n        {\n            label: aItem.name,\n            icon: aItem.img,\n            origin: args[0].uuid,\n            disabled: false,\n            duration: { rounds: duration, startRound: GAME_RND },\n            flags: { dae: { specialDuration: [\"DamageDealt\"] } },\n            changes: [\n                { key: `macro.itemMacro`, mode: jez.CUSTOM, value: 0, priority: 20 },\n            ]\n        }];\n    jez.log(\"effectData\", effectData)\n    MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: effectData });\n\n    msg = `<b>${aToken.name}</b> briefly stops the flow of time for everyone else for a brief time. \n    ${aToken.name} may act normally while time is frozen.<br><br>\n    Effect ends if affect a creature other than yourself or an object being worn or carried by \n    someone other than you. Or if you move to a place more than 1,000 feet from the location where you \n    cast it.`\n    postResults(msg)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\n async function runVFX(token5e) {\n    jez.runRuneVFX(token5e, jez.getSpellSchool(aItem))\n    new Sequence()\n    .effect()\n        .file(VFX_PULSE)\n        .attachTo(token5e)\n        .scale(5)\n        .opacity(1)\n        .persist()\n        .belowTokens(false)  \n        .duration(5000)\n        .name(VFX_NAME)\n    .play()\n    return (true);\n}\n/***************************************************************************************************\n * Return a random integer from 1 to max\n ***************************************************************************************************/\n function getRandomInt(max) {\n    return (Math.floor(Math.random() * max) + 1);\n}\n/***************************************************************************************************\n * Build and return an array of all in scene tokens that are not the passed token.  Returning an \n * array of actor.uuid's.\n ***************************************************************************************************/\nasync function getTokenArray(aToken) {\n    let tokenArray = []\n    for (const element of game.scenes.viewed.data.tokens) {\n        if (aToken.id === element.id) {\n            jez.log(`===> ${element.name}`, element)\n        } else {\n            jez.log(`==> ${element.name}`, element)\n            tokenArray.push(element.actor.uuid)\n        }\n    }\n    return (tokenArray);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}