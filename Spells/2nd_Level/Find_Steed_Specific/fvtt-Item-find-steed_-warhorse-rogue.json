{
  "name": "Find Steed: Warhorse - Rogue",
  "type": "spell",
  "img": "icons/magic/nature/wolf-paw-glow-teal-blue.webp",
  "data": {
    "description": {
      "value": "<p>You summon a spirit that assumes the form of an unusually intelligent, strong, and loyal steed, creating a long-lasting bond with it.</p>\n<p>Appearing in an unoccupied space within range, the steed takes on a form that you choose: a <em>warhorse</em>, a <em>pony</em>, a <em>camel</em>, an <em>elk</em>, or a <em>mastiff</em>. (Your DM might allow other animals to be summoned as steeds.)</p>\n<p>The steed has the statistics of the chosen form, though it is a celestial, fey, or fiend (your choice) instead of its normal type. Additionally, if your steed has an Intelligence of 5 or less, its <strong>Intelligence becomes 6</strong>, and it gains the <strong>ability to understand one language</strong> of your choice that you speak.</p>\n<p>Your steed serves you as a mount, both in combat and out, and you have an instinctive bond with it that allows you to fight as a seamless unit. While mounted on your steed, you can make<strong> any spell you cast that targets only you also target your steed.</strong></p>\n<p>When the steed <strong>drops to 0 hit points, it disappears</strong>, leaving behind no physical form. You can also dismiss your steed at any time as an action, causing it to disappear. In either case, casting this spell again summons the same steed, <strong>restored to its hit point maximum</strong>.</p>\n<p>While your steed is <strong>within 1 mile of you, you can communicate with each other telepathically.</strong> You can’t have more than one steed bonded by this spell at a time. As an action, you can release the steed from its bond at any time, causing it to disappear.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This spell will summon a steed from the <strong>Actors Directory</strong> whose name matches (exactly) the name after the colon following the spell name.  It will name the summoned steed with the string following the dash in the item name; otherwise, it will remain as defined in the sidebar. </p>\n<p>For <strong>%TOKENNAME%</strong>, the summoned actor is: @Actor[0hQkTpgafj0bAdRW]{Warhorse - Rogue} </p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "minute",
      "cost": 10,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "space"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.YzZiMDVjYmNmNzhk"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Find Steed: Warhorse - Rogue",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Find_Steed_Specific.0.2.js\"\n/*****************************************************************************************\n * This macro implmenets Find Steed in a manor rquested by our friendly Paladin.  It does\n * the following.\n * \n * 1. Parse the aItem.name to find the name of the creature to be summoned.  The name needs\n *    to be of the form: Find Steed: <Actor Name> - <Steed Name>.  It must contain one and \n *    only one colon (:) and dash (-)\n * 2. Verify the Actor named in the aItem.name exists \n * 3. Define warpgate updates, options and callbacks \n * 4. Fire off warpgate\n * 5. Post a completion message\n * \n * 03/23/22 0.1 Creation from Flaming_spehere.0.4.js\n * 07/17/22 0.2 Update to use jez.spawnAt (v2) for summoning\n ******************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlet msg = \"\";\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \n   else aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \n   else aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \n   else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst TL = 0;\n\njez.log(`Beginning ${MACRONAME}`);\ndoIt()\nasync function doIt() {\n    //-------------------------------------------------------------------------------------\n    // 1. Parse the aItem.name to find the name of the creature to be summoned.  The name \n    //    needs to be of the form: <Spell Name>: <Generic Name> - <Steed Name>\n    //    It must contain one and only one colon (:) and dash (-)\n    //\n    if ((aItem.name.match(/:/g) || []).length != 1) {\n        msg = `Item name must contain a single colon (:) used to seperate the generic name\n    from the specific actor name to be summoned.<br><br>\n    Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (false);\n    }\n    if ((aItem.name.match(/-/g) || []).length != 1) {\n        msg = `Item name must contain a single dash (-) used to seperate the generic steed\n    name from the token's intended name.<br><br>\n    Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (false);\n    }\n    let summonedSteedName = aItem.name.split(\":\")[1].trim()\n    jez.log(`summonedSteedName: \"${summonedSteedName}\"`)\n    let specificSteedName = summonedSteedName.split(\"-\")[1].trim()\n    if (!specificSteedName) {\n        msg = `Could not parse steed name from \"<b>${summonedSteedName}</b>\". <br><br>\n    Can not complete the ${aItem.name} action.  Expected steed name to follow a dash (-)`;\n        postResults(msg);\n        return (false);\n    }\n    jez.log(`specificSteedName: \"${specificSteedName}\"`,)\n    const MINION = summonedSteedName\n    //-----------------------------------------------------------------------------------------------\n    // Build our data object\n    let argObj = {\n        defaultRange: 30,\n        duration: 3000,                     // Duration of the intro VFX\n        introTime: 1000,                    // Amount of time to wait for Intro VFX\n        introVFX: '~Energy/SwirlingSparkles_01_Regular_${color}_400x400.webm', // default introVFX file\n        minionName: MINION,\n        name: aItem.name,                   // Name of action (message only), typically aItem.name\n        outroVFX: '~Fireworks/Firework*_02_Regular_${color}_600x600.webm', // default outroVFX file\n        scale: 0.9,\t\t\t\t\t\t\t// Default value but needs tuning at times\n        source: aToken,                     // Coords for source (with a center), typically aToken\n        templateName: MINION,               // Name of the actor in the actor directory\n        updates: {},\n        width: 2,                           // Width of token to be summoned\n        traceLvl: TL\n    }\n    //--------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    let summonData = await game.actors.getName(MINION)\n    argObj.img = summonData ? summonData.img : aItem.img\n    //--------------------------------------------------------------------------------------------------\n    // Do the actual summon\n    //\n    let returned = await jez.spawnAt(MINION, aToken, aActor, aItem, argObj)\n    jez.log(\"returned\", returned)\n    //--------------------------------------------------------------------------------------\n    // 5. Post a completion message\n    //\n    msg = `<b>${aToken.name}</b> has summoned <b>${specificSteedName}</b>`\n    postResults(msg);\n    return;\n}\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n   * \n   ***************************************************************************************************/\n//  async function preEffects(template) {\n//     //const VFX_FILE = \"jb2a.explosion.orange.0\"\n//     const VFX_FILE = \"jb2a.swirling_sparkles.01.bluepink\"\n//     new Sequence()\n//       .effect()\n//       .file(VFX_FILE)\n//       .atLocation(template)\n//       .center()\n//       .opacity(1.0)\n//       .scale(1.0)\n//       .play()\n//   }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n//    async function postEffects(template) {\n//     const VFX_OPACITY = 1.0\n//     const VFX_SCALE = 0.8\n//     const VFX_FILE = \"jb2a.firework.02.bluepink.03\"\n//     new Sequence()\n//       .effect()\n//         .file(VFX_FILE)\n//         .atLocation(template)\n//         .center()\n//         .scale(VFX_SCALE)\n//         .opacity(VFX_OPACITY)\n//         //.waitUntilFinished(-1000) \n//     .play()\n//   }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}