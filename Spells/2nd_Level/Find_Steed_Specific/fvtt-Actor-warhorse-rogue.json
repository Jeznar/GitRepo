{
  "name": "Warhorse - Rogue",
  "type": "npc",
  "img": "Tokens/Beasts/Equine/War_Horse/Avatar_Horse_War_01.png",
  "data": {
    "abilities": {
      "str": {
        "value": 18,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "min": 3,
        "mod": 4,
        "save": 0
      },
      "dex": {
        "value": 12,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "min": 3,
        "mod": 1,
        "save": 0
      },
      "con": {
        "value": 13,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "min": 3,
        "mod": 1,
        "save": 0
      },
      "int": {
        "value": 6,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "min": 3,
        "mod": -4,
        "save": 0
      },
      "wis": {
        "value": 12,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "min": 3,
        "mod": 1,
        "save": 0
      },
      "cha": {
        "value": 7,
        "proficient": 1,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "min": 3,
        "mod": -2,
        "save": 0
      }
    },
    "attributes": {
      "ac": {
        "flat": 11,
        "calc": "natural",
        "formula": ""
      },
      "hp": {
        "value": 19,
        "min": 0,
        "max": 19,
        "temp": null,
        "tempmax": 0,
        "formula": "3d10 + 3"
      },
      "init": {
        "value": 0,
        "bonus": 0,
        "mod": 1,
        "prof": 0,
        "total": 1
      },
      "movement": {
        "burrow": 0,
        "climb": 0,
        "fly": 0,
        "swim": 0,
        "walk": 60,
        "units": "ft",
        "hover": false
      },
      "attunement": {
        "max": 3
      },
      "senses": {
        "darkvision": 0,
        "blindsight": 0,
        "tremorsense": 0,
        "truesight": 0,
        "units": "ft",
        "special": "Passive Perception 11"
      },
      "spellcasting": "",
      "prof": 2,
      "spelldc": 10,
      "spellLevel": 0,
      "bar1": {
        "value": 19,
        "min": 0,
        "max": 19
      },
      "bar2": {
        "value": 11,
        "min": 0,
        "max": 0
      }
    },
    "details": {
      "biography": {
        "value": "<h2>Found Steed: Rogue</h2>\n<p>@Actor[DkcLVyoD3wFx7nzx]{Cai'Lee}'s summoned mount vua her @Item[MGM0ZGZjZmQwOTRl]{Find Steed} spell.</p>",
        "public": ""
      },
      "alignment": "Unaligned",
      "race": "",
      "type": {
        "value": "beast",
        "subtype": "",
        "swarm": "",
        "custom": ""
      },
      "environment": "",
      "cr": 0.5,
      "spellLevel": 0,
      "xp": {
        "value": 100
      },
      "source": "Roll 20",
      "class": " 1"
    },
    "traits": {
      "size": "lg",
      "di": {
        "value": [],
        "custom": ""
      },
      "dr": {
        "value": [],
        "custom": ""
      },
      "dv": {
        "value": [],
        "custom": ""
      },
      "ci": {
        "value": [],
        "custom": ""
      },
      "languages": {
        "value": [
          "common"
        ],
        "custom": "Understands but can not speak"
      }
    },
    "currency": {
      "pp": 0,
      "gp": 0,
      "ep": 0,
      "sp": 0,
      "cp": 0
    },
    "skills": {
      "acr": {
        "value": 0,
        "ability": "dex",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "ani": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "arc": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -4,
        "passive": 6
      },
      "ath": {
        "value": 0,
        "ability": "str",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 4,
        "passive": 14
      },
      "dec": {
        "value": 0,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -2,
        "passive": 8
      },
      "his": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -4,
        "passive": 6
      },
      "ins": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "itm": {
        "value": 0,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -2,
        "passive": 8
      },
      "inv": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -4,
        "passive": 6
      },
      "med": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "nat": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -4,
        "passive": 6
      },
      "prc": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "prf": {
        "value": 0,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -2,
        "passive": 8
      },
      "per": {
        "value": 0,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -2,
        "passive": 8
      },
      "rel": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -4,
        "passive": 6
      },
      "slt": {
        "value": 0,
        "ability": "dex",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "ste": {
        "value": 0,
        "ability": "dex",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      },
      "sur": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11
      }
    },
    "spells": {
      "spell1": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell2": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell3": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell4": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell5": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell6": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell7": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell8": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell9": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "pact": {
        "value": 0,
        "override": null
      },
      "spell0": {
        "value": 0,
        "max": 0
      }
    },
    "bonuses": {
      "mwak": {
        "attack": "",
        "damage": ""
      },
      "rwak": {
        "attack": "",
        "damage": ""
      },
      "msak": {
        "attack": "",
        "damage": ""
      },
      "rsak": {
        "attack": "",
        "damage": ""
      },
      "abilities": {
        "check": "",
        "save": "",
        "skill": ""
      },
      "spell": {
        "dc": ""
      }
    },
    "resources": {
      "legact": {
        "value": 0,
        "max": 0
      },
      "legres": {
        "value": 0,
        "max": 0
      },
      "lair": {
        "value": false,
        "initiative": 0
      }
    }
  },
  "token": {
    "flags": {
      "splatter": {
        "bloodColor": ""
      },
      "token-hud-wildcard": {
        "default": ""
      },
      "token-auras": {
        "aura1": {
          "permission": "all",
          "colour": "#ffffff",
          "opacity": 0.5,
          "distance": null,
          "square": false
        },
        "aura2": {
          "permission": "all",
          "colour": "#ffffff",
          "opacity": 0.5,
          "distance": null,
          "square": false
        }
      },
      "tagger": {
        "tags": ""
      },
      "monks-little-details": {
        "token-combat-animation": "",
        "token-highlight": ""
      }
    },
    "name": "Rogue",
    "displayName": 20,
    "img": "Tokens/Beasts/Equine/War_Horse/Horse_War_03.png",
    "width": 2,
    "height": 2,
    "mirrorX": false,
    "scale": 1,
    "rotation": 0,
    "lockRotation": false,
    "dimLight": 0,
    "brightLight": 0,
    "dimSight": 1,
    "brightSight": 0,
    "sightAngle": 0,
    "lightAngle": 0,
    "lightAlpha": 1,
    "lightAnimation": {
      "speed": 5,
      "intensity": 5
    },
    "vision": true,
    "actorId": "ZmJjMDBkNzJkYTJk",
    "actorLink": false,
    "disposition": 1,
    "displayBars": 30,
    "bar1": {
      "attribute": "attributes.hp"
    },
    "bar2": {
      "attribute": ""
    },
    "tint": null,
    "actorData": {
      "data": {
        "attributes": {
          "bar1": {
            "value": 19,
            "max": 19
          },
          "bar2": {
            "value": 11,
            "max": 0
          }
        }
      }
    },
    "randomImg": true,
    "mirrorY": false,
    "alpha": 1,
    "lightColor": null,
    "lockCamera": false,
    "x": null,
    "y": null,
    "elevation": null,
    "light": {
      "alpha": 0.5,
      "angle": 0,
      "bright": 0,
      "coloration": 1,
      "dim": 0,
      "gradual": true,
      "luminosity": 0.5,
      "saturation": 0,
      "contrast": 0,
      "shadows": 0,
      "animation": {
        "speed": 5,
        "intensity": 5,
        "reverse": false
      },
      "darkness": {
        "min": 0,
        "max": 1
      },
      "color": null
    },
    "actor": {
      "data": {
        "flags": {
          "conditional-visibility": {
            "blindsight": {
              "visionLevelValue": 0
            },
            "blinded": {
              "visionLevelValue": 0
            },
            "darkvision": {
              "visionLevelValue": 0
            },
            "devilssight": {
              "visionLevelValue": 0
            },
            "seeinvisible": {
              "visionLevelValue": 0
            },
            "tremorsense": {
              "visionLevelValue": 0
            },
            "truesight": {
              "visionLevelValue": 0
            },
            "dataforcevisible": false,
            "datausestealthpassive": false,
            "hidden": {
              "visionLevelValue": 0
            },
            "indarkness": {
              "visionLevelValue": 0
            },
            "invisible": {
              "visionLevelValue": 0
            },
            "obscured": {
              "visionLevelValue": 0
            }
          }
        }
      }
    }
  },
  "items": [
    {
      "name": "Hooves",
      "flags": {
        "midi-qol": {
          "criticalThreshold": "20",
          "onUseMacroName": ""
        },
        "magicitems": {
          "enabled": false,
          "equipped": false,
          "attuned": false,
          "charges": "0",
          "chargeType": "c1",
          "destroy": false,
          "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
          "rechargeable": false,
          "recharge": "0",
          "rechargeType": "t1",
          "rechargeUnit": "r1",
          "sorting": "l"
        }
      },
      "type": "weapon",
      "img": "worlds/travels-in-barovia/characters/081_-_Warhorse/avatar.png",
      "data": {
        "description": {
          "value": "<p><p><strong>Hooves.</strong><em>Melee Weapon Attack: </em>+6, Reach 5 ft.,  one target. <em>Hit : </em>11 (2d6 + 4) bludgeoning damage</p></p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "quantity": 1,
        "weight": 1,
        "price": 0,
        "attunement": 0,
        "equipped": true,
        "rarity": "",
        "identified": true,
        "activation": {
          "type": "action",
          "cost": 1,
          "condition": ""
        },
        "duration": {
          "value": 0,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": 5,
          "long": null,
          "units": "ft"
        },
        "uses": {
          "value": 0,
          "max": "0",
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "str",
        "actionType": "mwak",
        "attackBonus": "0",
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": ""
        },
        "damage": {
          "parts": [
            [
              "2d6 + 4",
              "bludgeoning"
            ]
          ],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "armor": {
          "value": 10
        },
        "hp": {
          "value": 0,
          "max": 0,
          "dt": null,
          "conditions": ""
        },
        "weaponType": "natural",
        "baseItem": "",
        "properties": {
          "amm": false,
          "hvy": false,
          "fin": false,
          "fir": false,
          "foc": false,
          "lgt": false,
          "rch": false,
          "rel": false,
          "ret": false,
          "spc": false,
          "thr": false,
          "two": false,
          "ver": false,
          "ada": false,
          "lod": false,
          "mgc": false,
          "sil": false,
          "nodam": false,
          "fulldam": false,
          "halfdam": false,
          "critOther": false
        },
        "proficient": true
      },
      "sort": 20000,
      "effects": [],
      "_id": "YWQyMzY2MmY0MmU3",
      "folder": null,
      "permission": {
        "default": 0
      }
    },
    {
      "_id": "aUr5Sp6Erq3Xqofa",
      "name": "Trampling Charge",
      "type": "weapon",
      "img": "Tokens/Beasts/Equine/War_Horse/Avatar_Horse_War_01.png",
      "data": {
        "description": {
          "value": "<p><span style=\"color:#191813;font-size:13px\">If the horse moves at least 20 ft. straight toward a creature and then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked </span><span style=\"color:#191813;font-size:13px\">@JournalEntry[FBPUaHRxNyNXAOeh]{prone}</span><span style=\"color:#191813;font-size:13px\">. If the target is prone, the horse can make another attack with its hooves against it as a bonus action.</span></p>\n<p><strong>Hooves.</strong><em>Melee Weapon Attack: </em>+6, Reach 5 ft., one target. <em>Hit : </em>11 (2d6 + 4) bludgeoning damage</p>\n<p> </p>\n<p> </p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "quantity": 1,
        "weight": 1,
        "price": 0,
        "attunement": 0,
        "equipped": true,
        "rarity": "",
        "identified": true,
        "activation": {
          "type": "action",
          "cost": 1,
          "condition": ""
        },
        "duration": {
          "value": 0,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": 5,
          "long": null,
          "units": "ft"
        },
        "uses": {
          "value": 0,
          "max": "0",
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "str",
        "actionType": "mwak",
        "attackBonus": "0",
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": ""
        },
        "damage": {
          "parts": [
            [
              "2d6 + 4",
              "bludgeoning"
            ]
          ],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "str",
          "dc": null,
          "scaling": "str"
        },
        "armor": {
          "value": 10
        },
        "hp": {
          "value": 0,
          "max": 0,
          "dt": null,
          "conditions": ""
        },
        "weaponType": "natural",
        "baseItem": "",
        "properties": {
          "amm": false,
          "hvy": false,
          "fin": false,
          "fir": false,
          "foc": false,
          "lgt": false,
          "rch": false,
          "rel": false,
          "ret": false,
          "spc": false,
          "thr": false,
          "two": false,
          "ver": false,
          "ada": false,
          "lod": false,
          "mgc": false,
          "sil": false,
          "nodam": false,
          "fulldam": false,
          "halfdam": false,
          "critOther": false
        },
        "proficient": true
      },
      "effects": [],
      "folder": "Qn8cvWIVjBiyiGxo",
      "sort": 646875,
      "permission": {
        "default": 0,
        "ZjFlOWYxZjM5ZTZj": 3
      },
      "flags": {
        "core": {
          "sourceId": "Item.bs1hXTttQ080vB2Z"
        },
        "enhancedcombathud": {
          "set1p": false,
          "set2p": false,
          "set3p": false,
          "set1s": false,
          "set2s": false,
          "set3s": false
        },
        "midi-qol": {
          "criticalThreshold": "20",
          "onUseMacroName": "ItemMacro"
        },
        "magicitems": {
          "enabled": false,
          "equipped": false,
          "attuned": false,
          "charges": "0",
          "chargeType": "c1",
          "destroy": false,
          "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
          "rechargeable": false,
          "recharge": "0",
          "rechargeType": "t1",
          "rechargeUnit": "r1",
          "sorting": "l"
        },
        "betterCurses": {
          "isCurse": false,
          "curseName": "",
          "formula": "",
          "mwak": false,
          "rwak": false,
          "msak": false,
          "rsak": false
        },
        "itemacro": {
          "macro": {
            "data": {
              "_id": null,
              "name": "Trampling Charge",
              "type": "script",
              "author": "ZjFlOWYxZjM5ZTZj",
              "img": "icons/svg/dice-target.svg",
              "scope": "global",
              "command": "const MACRONAME = \"Trampling_Charge_0.1\"\n/*****************************************************************************************\n * Implement the knockdown portion of trampling charge\n * \n * Action Description: If the horse moves at least 20 ft. straight toward a creature and \n * then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 \n * Strength saving throw or be knocked prone. If the target is prone, the horse can make \n * another attack with its hooves against it as a bonus action.\n * \n * 12/11/21 0.1 Creation of Macro\n *****************************************************************************************/\nconst DEBUG = true;\nlet msg = \"\";\nconst CONDITION = \"Prone\";\nlet actorID = canvas.tokens.get(args[0].tokenId);\n\nif (DEBUG) {\n    console.log(`************ Executing ${MACRONAME} ****************`)\n    console.log(`args[0]: `,args[0]);\n}\n\n// ---------------------------------------------------------------------------------------\n// Make sure exactly one target.\n//\nif (args[0].targets.length !== 1) {\n    msg = `Funny business going on, one and only one target is allowed.  \n           Tried to hit ${args[0].targets.length} targets.`;\n    await postResults(msg);\n    if (DEBUG) {\n        console.log(` ${msg}`, args[0].saves); \n        console.log(`************ Ending ${MACRONAME} ****************`)\n    }\n    return;\n}\n\n// ---------------------------------------------------------------------------------------\n// If no target was hit, post result and terminate \n//\nif (args[0].hitTargets.length === 0) {\n    msg = `${args[0].hitTargets[0]} avoids the knockdown by making its save.`;\n    await postResults(msg);\n    if (DEBUG) {\n        console.log(` ${msg}`, args[0].saves); \n        console.log(`************ Ending ${MACRONAME} ****************`)\n    }\n    return;\n}\n// let targetID = args[0].hitTargets[0];\nlet targetID = canvas.tokens.get(args[0].targets[0].id);\n\n// ---------------------------------------------------------------------------------------\n// Make sure the target is the same size or smaller as the charger \n//\nif (DEBUG) console.log(`actorID, targetID:`, actorID, targetID)\nlet sizeDiff = sizeDelta(actorID, targetID);\nif (DEBUG) console.log(`sizeDiff ${sizeDiff}`);\nif (sizeDiff === -99) {\n    msg = `Something went sideways comparing the size of actor and target`;\n    await postResults(msg);\n    ui.notifications.error(message);\n    return;\n}\nif (sizeDiff < 0) {\n    msg = `${targetID.name} is larger than ${actorID.name} and can not be knocked @JournalEntry[FBPUaHRxNyNXAOeh]{prone}. \n    If ${targetID.name} is already prone, ${actorID.name} may make an extra attack as a \n    bonus action.`;\n    await postResults(msg);\n    return;\n}\n\n// ---------------------------------------------------------------------------------------\n// If the target saved post that and exit \n//\nlet failCount = args[0].failedSaves.length \nif (DEBUG) console.log(`${failCount} args[0].failedSaves: `,args[0].failedSaves)\nif (failCount === 0) {\n    msg = `${targetID.name} made its saving throw. It is unaffected by knockdown.`\n    await postResults(msg);\n    if (DEBUG) {\n        console.log(` ${msg}`, args[0].saves); \n        console.log(`************ Ending ${MACRONAME} ****************`)\n    }\n    return;\n}\n\n// ---------------------------------------------------------------------------------------\n// Check to make sure the target isn't already prone\n//\nif (DEBUG) console.log(`targetID.actor.effects: `,targetID.actor.effects);\nlet proneEffect = targetID.actor.effects.find(ef => ef.data.label === CONDITION);\nif (DEBUG) console.log(`proneEffect: `, proneEffect);\nif (proneEffect) {\n    if (DEBUG) console.log(`${targetID.name} is already ${CONDITION}.`);\n    postResults(msg);\n    return;\n} else {\n    msg = `${targetID.name} is knocked @JournalEntry[FBPUaHRxNyNXAOeh]{Prone} by the charge.`\n}\n\n// ---------------------------------------------------------------------------------------\n// Add prone condition to target\n//\nconst CUSTOM=0, MULTIPLY=1, ADD=2, DOWNGRADE=3, UPGRADE=4, OVERRIDE=5;\nlet gameRound = game.combat ? game.combat.round : 0;\n\nlet effectData = {\n    label: CONDITION,\n    icon: \"modules/combat-utility-belt/icons/prone.svg\",\n    // origin: player.uuid,\n    disabled: false,\n    duration: { rounds: 99, startRound: gameRound },\n    changes: [\n        { key: `flags.midi-qol.disadvantage.attack.all`, mode: ADD, value: 1, priority: 20 },\n        { key: `flags.midi-qol.grants.advantage.attack.mwak`, mode: ADD, value: 1, priority: 20 },\n        { key: `flags.midi-qol.grants.advantage.attack.msak`, mode: ADD, value: 1, priority: 20 },\n        { key: `flags.midi-qol.grants.disadvantage.attack.rwak`, mode: ADD, value: 1, priority: 20 },\n        { key: `flags.midi-qol.grants.disadvantage.attack.rsak`, mode: ADD, value: 1, priority: 20 }\n    ]\n};\nawait MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: targetID.uuid, effects: [effectData] });\n\n// ---------------------------------------------------------------------------------------\n// Create and post success message.\n//\nmsg = `${targetID.name} has been knocked @JournalEntry[FBPUaHRxNyNXAOeh]{Prone}. The trampler may make\n        an extra attack as a bonus action.`\npostResults(msg);\nconsole.log(`************ Terminating ${MACRONAME} ****************`)\n\nreturn;\n\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************\n * Post the results to chat card\n ***************************************************************************************/\n async function postResults(resultsString) {\n    const lastArg = args[args.length - 1];\n\n    /***************************************** \n     * Some Special div's per Posney's docs\n     *  - midi-qol-attack-roll\n     *  - midi-qol-damage-roll\n     *  - midi-qol-hits-display\n     *  - midi-qol-saves-display\n     * \n     * One other that I have been using\n     *  - midi-qol-other-roll\n    ******************************************/\n\n    const DIV = \"midi-qol-damage-roll\"; \n\n    let chatMessage = game.messages.get(lastArg.itemCardId);\n    let content = await duplicate(chatMessage.data.content);\n    if (DEBUG) console.log(`chatMessage: `,chatMessage);\n    //const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n    //const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${resultsString}`;\n    const searchString = /<div class=\"end-midi-qol-saves-display\">/g;\n    const replaceString = `<div class=\"end-midi-qol-saves-display\">${resultsString}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    await ui.chat.scrollBottom();\n    return;\n}\n\n/************************************************************************\n * Determine the number of size category first argument is larger than \n * second and return that. Send back a -99 on error conditions.\n ***********************************************************************/\nfunction sizeDelta(entity1, entity2) {\n    class CreatureSizes {\n        constructor(size) {\n            this.SizeString = size;\n\n            switch (size) {\n                case \"tiny\": this.SizeInt = 1; break;\n                case \"sm\": this.SizeInt = 2; break;\n                case \"med\": this.SizeInt = 3; break;\n                case \"lg\": this.SizeInt = 4; break;\n                case \"huge\": this.SizeInt = 5; break;\n                case \"grg\": this.SizeInt = 6; break;\n                default: this.SizeInt = 0;  // Error Condition\n            }\n        }\n    }\n\n    if (DEBUG) console.log(` entity1: `,entity1);\n    let entity1SizeString = entity1.document._actor.data.data.traits.size;\n    let entity1SizeObject = new CreatureSizes(entity1SizeString);\n    let entity1Size = entity1SizeObject.SizeInt;  // Returns 0 on failure to match size string\n    if (!entity1Size) {\n        let message = `Size of ${entity1.name}, ${entity1SizeString} failed to parse.`;\n        if (debug) console.log(message);\n        ui.notifications.error(message);\n        return(-99);\n    }\n\n    if (DEBUG) console.log(` entity2: `,entity2);\n    let entity2SizeString = entity2.document._actor.data.data.traits.size;\n    let entity2SizeObject = new CreatureSizes(entity2SizeString);\n    let entity2Size = entity2SizeObject.SizeInt;  // Returns 0 on failure to match size string\n    if (!entity2Size) {\n        let message = `Size of ${entity2.name}, ${entity1SizeString} failed to parse.`;\n        if (debug) console.log(message);\n        ui.notifications.error(message);\n        return(-99);\n    }\n\n    if (DEBUG) console.log(`${entity1.name} ${entity1SizeString} ${entity1Size} - ${entity2.name} ${entity2SizeString} ${entity2Size} `);\n    return(entity1Size - entity2Size);\n}",
              "folder": null,
              "sort": 0,
              "permission": {
                "default": 0
              },
              "flags": {}
            }
          }
        }
      }
    }
  ],
  "effects": [],
  "flags": {
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}