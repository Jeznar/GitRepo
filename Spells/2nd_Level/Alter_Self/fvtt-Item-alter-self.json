{
  "name": "Alter Self",
  "type": "spell",
  "img": "Icons_JGB/Spells/2nd_Level/Alter_Self.png",
  "data": {
    "description": {
      "value": "<p>You assume a different form. When you cast the spell, choose one of the following options, the effects of which last for the duration of the spell. While the spell lasts, <span style=\"text-decoration: underline;\">you can end one option as an action to gain the benefits of a different one.</span></p>\n<h3><strong>Aquatic Adaptation</strong></h3>\n<p>You adapt your body to an aquatic environment, sprouting gills and growing webbing between your fingers. You can <strong>breathe underwater</strong> and gain a <strong>swimming speed</strong> equal to your walking speed.</p>\n<h3><strong>Change Appearance</strong></h3>\n<p>&nbsp;You transform your appearance. You decide what you look like, including your:</p>\n<ul>\n<li>height,</li>\n<li>weight,</li>\n<li>facial features,</li>\n<li>sound of your voice,</li>\n<li>hair length,</li>\n<li>coloration, and</li>\n<li>distinguishing characteristics, if any.</li>\n</ul>\n<p>You can make yourself appear as a member of <strong>another race,</strong> though none of your statistics change. You also <strong>can't appear as a creature of a different size </strong>than you, and your <strong>basic shape stays the same</strong>; if you're bipedal, you can't use this spell to become quadrupedal, for instance. At any time for the duration of the spell, you can use your action to change your appearance in this way again.</p>\n<h3><strong>Natural Weapons</strong></h3>\n<p>You grow claws, fangs, spines, horns, or a different natural weapon of your choice. Your unarmed strikes deal <strong>1d6 bludgeoning, piercing, or slashing damage,</strong> as appropriate to the natural weapon you chose, and you are proficient with your unarmed strikes. Finally, the <strong>natural weapon is magic</strong> and you have a <strong>+1 bonus</strong> to the <strong>attack</strong> and <strong>damage</strong> rolls you make using it.</p>\n<hr />\n<p><strong>FoundryVTT:&nbsp;</strong>This is automated except forchange of token appearance.&nbsp; A temporary spell item is added to allow changing of effect.</p>",
      "chat": "<p>You assume a different form. When you cast the spell, choose one of the following options, the effects of which last for the duration of the spell. While the spell lasts, you can end one option as an action to gain the benefits of a different one.</p>\n<p><strong>Aquatic Adaptation.</strong> You adapt your body to an aquatic environment, sprouting gills and growing webbing between your fingers. You can breathe underwater and gain a swimming speed equal to your walking speed.</p>\n<p><strong>Change Appearance.</strong> You transform your appearance. You decide what you look like, including your height, weight, facial features, sound of your voice, hair length, coloration, and distinguishing characteristics, if any. You can make yourself appear as a member of another race, though none of your statistics change. You also can't appear as a creature of a different size than you, and your basic shape stays the same; if you're bipedal, you can't use this spell to become quadrupedal, for instance. At any time for the duration of the spell, you can use your action to change your appearance in this way again.</p>\n<p><strong>Natural Weapons.</strong> You grow claws, fangs, spines, horns, or a different natural weapon of your choice. Your unarmed strikes deal 1d6 bludgeoning, piercing, or slashing damage, as appropriate to the natural weapon you chose, and you are proficient with your unarmed strikes. Finally, the natural weapon is magic and you have a +1 bonus to the attack and damage rolls you make using it.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 211",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 60,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "trs",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "lphUfYcGqCRL8BYY",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "turns": 60,
        "seconds": 3600
      },
      "icon": "Icons_JGB/Spells/2nd_Level/Alter_Self.png",
      "label": "Alter Self",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false,
          "selfTarget": false,
          "durationExpression": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Short Rest"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false,
          "displayTemp": false
        },
        "core": {
          "statusId": ""
        }
      },
      "tint": null,
      "selectedKey": "macro.itemMacro"
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 136028,
      "definitionId": 1992,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 211,
          "sourceType": 1
        }
      ],
      "tags": [
        "Shapechanging"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro,[postActiveEffects]Run_RuneVFX_onSelf",
      "effectActivation": false,
      "forceCEOn": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Alter Self",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Alter_Self.0.6.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Alter Self\n * \n * Present a dialog that allows caster to choose one of the three effects, one has three \n * sub choices, so 5 options on dialog.\n *  - Aquatic Adaptation: Active effect granting a swim speed equal to walking\n *  - Change Appearance: Active effect with notation about appearance change.\n *  - Natural Weapon: Create a temporary item giving a proficient 1d6+1 damage, magical, \n *    and +1 to hit, weapon of \n *    - bludgeoning, \n *    - piercing, or \n *    - slashing damage type.\n *  - Each turn at start of turn present another dialog that asks if actor wants to spend \n *    an action to repeat the choice.  If they repeat, present same dialog choice.  \n * \n * 01/14/22 0.1 Creation of Macro\n * 01/15/22 0.2 Another Day Another Version\n * 05/02/22 0.3 Update for Foundry 9.x\n * 05/16/22 0.4 Update (again) for Foundry 9.x\n * 08/01/22 0.5 Added convenientDescriptions\n * 12/17/22 0.6 Update logging and general style\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst FIRST_BUFF = aItem.name;\nconst AQUATIC_BUFF = \"Acquatic Adaptation\"\nconst AQUATIC_IMG = \"Icons_JGB/Spells/2nd_Level/Aquatic_Adaptation.png\"\nconst CHANGE_BUFF = \"Change Appearance\"\nconst CHANGE_IMG = \"Icons_JGB/Spells/1st_Level/Disguised.png\"\nconst WEAP_BUFF = \"Natural Weapons\"\nconst WEAP_IMG = \"Icons_JGB/Monster_Features/claws.png\"\nconst WEAP_NAME = \"Natural Weapon (Alter Self)\"\nconst MACRO_HELPER = \"Alter_Self_Helper\"\nconst UPDATE_EFFECT_NAME = \"Update Alter Self Effect\"\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"on\") await doOn({ traceLvl: TL });                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    let oldEffect = null;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (TL > 1) jez.trace(`${TAG} Removing: >${AQUATIC_BUFF}< if present`)\n    oldEffect = aActor.effects.find(ef => ef.data.label === AQUATIC_BUFF) ?? null; // Added a null case.\n    await oldEffect?.delete();\n    if (TL > 1) jez.trace(`${TAG} Removing: >${CHANGE_BUFF}< if present`)\n    oldEffect = aActor.effects.find(ef => ef.data.label === CHANGE_BUFF) ?? null; // Added a null case.\n    await oldEffect?.delete();\n    if (TL > 1) jez.trace(`${TAG} Removing: >${WEAP_BUFF}< if present`)\n    oldEffect = aActor.effects.find(ef => ef.data.label === WEAP_BUFF) ?? null; // Added a null case.\n    await oldEffect?.delete();\n    if (TL > 1) jez.trace(`${TAG} Deleting: >${WEAP_NAME}< if present`)\n    await jez.deleteItems(WEAP_NAME, \"weapon\", aActor);\n    if (TL > 1) jez.trace(`${TAG} Deleting: >${UPDATE_EFFECT_NAME}< if present`)\n    await jez.deleteItems(UPDATE_EFFECT_NAME, \"spell\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set On\n * This runs on actor that has the affected applied to it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOn(options = {}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (TL > 1) jez.trace(`${TAG} Deleting: >${WEAP_NAME}< if present`)\n    await jez.deleteItems(WEAP_NAME, \"weapon\", aActor);\n    if (TL > 1) jez.trace(`${TAG} Deleting: >${UPDATE_EFFECT_NAME}< if present`)\n    await jez.deleteItems(UPDATE_EFFECT_NAME, \"spell\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build the dialog variables\n    //\n    const alterOptions = [\n        \"Aquatic Adaptation: Grants swim speed and water breathing.\",\n        \"Change Appearance: Visual (only) changes to appearance.\",\n        \"Slashing Natural Weapon, with +1 magical bonus.\",\n        \"Piercing Natural Weapon, with +1 magical bonus.\",\n        \"Bludgeoning Natural Weapon, with +1 magical bonus.\"\n    ]\n    const queryTitle = \"Select Item in Question\"\n    const queryText = \"Pick one from drop down list\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Pop the dialog and connect to callback\n    //\n    pickFromListArray(queryTitle, queryText, pickItemCallBack, alterOptions);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Modify recently created effect to have a convenientDescription\n    //\n    let effect = await aToken.actor.effects.find(i => i.data.label === FIRST_BUFF);\n    if (!effect) return jez.badNews(`Could not find ${FIRST_BUFF} effect on ${aToken.name}`, \"e\")\n    const C_DESC = `With an Action may alter certain elements of body or appearance`\n    await effect.update({ flags: { convenientDescription: C_DESC } });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    createEffectUpdate()\n    // https://www.w3schools.com/tags/ref_colornames.asp\n    msg = `<p style=\"color:blue;font-size:14px;\"> \n    ${aToken.name} is using magic to change appearance and some features.<br><br>\n    ${aToken.name} will be able to change this effect each turn at the cost of an action.`\n    postResults(msg);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Callback function to handle menu choice.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function pickItemCallBack(selection, options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, 'selection', selection, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    if (!selection) return;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    let choice = selection.split(\" \")[0];     // Trim off the version number and extension\n    if (TL > 1) jez.trace(`${TAG} Selection: ${choice}!`)\n    let concEffect = aActor.effects.find(ef => ef.data.label === \"Concentrating\");\n    let remainingSecs = concEffect ? concEffect?.data.duration.seconds : 3600\n    if (TL > 1) jez.trace(`${TAG} Proceed with ${choice} for ${remainingSecs} seconds`, concEffect)\n    let effectData = null;\n    let cardImg = null;\n\n    let ceDesc\n    switch (choice) {\n        case \"Aquatic\":\n            if (TL > 1) jez.trace(`${TAG} acquire gills and fins`)\n            ceDesc = `Now has gills and fins, can breathe underwater and gains swimming speed equal to walking.`\n            let swimSpeed = aActor.data.data.attributes.movement?.walk || 1;\n            effectData = {\n                label: AQUATIC_BUFF,\n                icon: AQUATIC_IMG,\n                origin: L_ARG.uuid,\n                disabled: false,\n                duration: { seconds: remainingSecs, startTime: game.time.worldTime },\n                flags: { convenientDescription: ceDesc },\n                changes: [\n                    { key: `data.attributes.movement.swim`, mode: jez.UPGRADE, value: swimSpeed, priority: 20 },\n                    { key: `flags.gm-notes.notes`, mode: jez.CUSTOM, value: \"Water Breathing\", priority: 20 },\n                ]\n            };\n            if (TL > 1) jez.trace(`${TAG} Add effect ${aItem.name} to ${aToken.name}`)\n            await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });\n            msg = `${aToken.name} has alterered shape to adapt to an aquatic environment.  ${aToken.name} now has water \n            breathing and a swim speed equal to walking speed.`;\n            cardImg = AQUATIC_IMG;\n            break;\n        case \"Change\":\n            if (TL > 1) jez.trace(`${TAG} Change visual appearance`)\n            ceDesc = `Altered visual appearance`\n            effectData = {\n                label: CHANGE_BUFF,\n                icon: CHANGE_IMG,\n                origin: L_ARG.uuid,\n                disabled: false,\n                duration: { seconds: remainingSecs, startTime: game.time.worldTime },\n                flags: { convenientDescription: ceDesc },\n                changes: [\n                    { key: `flags.gm-notes.notes`, mode: jez.CUSTOM, value: \"Physical Appearance Changed\", priority: 20 },\n                ]\n            };\n            if (TL > 1) jez.trace(`${TAG} Add effect ${aItem.name} to ${aToken.name}`)\n            await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });\n            msg = `${aToken.name} has altered various aspects of physical appearance.`;\n            cardImg = CHANGE_IMG;\n            break;\n        case \"Slashing\":\n        case \"Piercing\":\n        case \"Bludgeoning\":\n            if (TL > 1) jez.trace(`${TAG} Natural Weapon with damage type: ${choice.toLowerCase()}`)\n            ceDesc = `Has sprouted natural weapons`\n            effectData = {\n                label: WEAP_BUFF,\n                icon: WEAP_IMG,\n                origin: L_ARG.uuid,\n                disabled: false,\n                duration: { seconds: remainingSecs, startTime: game.time.worldTime },\n                flags: { convenientDescription: ceDesc },\n                changes: [\n                    { key: `flags.gm-notes.notes`, mode: jez.CUSTOM, value: `Natural ${choice} Weapon Added`, priority: 20 },\n                    { key: `data.traits.weaponProf.custom`, mode: jez.CUSTOM, value: `${WEAP_NAME}`, priority: 20 },\n                ]\n            };\n            if (TL > 1) jez.trace(`${TAG} Add effect ${aItem.name} to ${aToken.name}`)\n            await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });\n            createWeapon(choice)\n            msg = `${aToken.name} has created a ${choice} natural weapon.<br><br>\n            <b>FoundryVTT:</b> A new temporary item has been created in Inventory:Weapons, on ${aToken.name}'s sheet, \n            that can be used for attacks.`;\n            cardImg = WEAP_IMG;\n            break;\n        default:\n            jez.badNews(`Disturbingly, reached end of switch without a match for ==>${choice}<==`,'e')\n            return (choice)\n    }\n    msg += \"<br><br>This effect may be altered each turn at the cost of an action.\"\n    // jezPostMessage({ color: \"purple\", fSize: 14, msg: msg, title: \"Alter Self Effect\", icon: cardImg })\n    jez.postMessage({color: jez.randomDarkColor(), fSize: 14, icon: cardImg, msg: msg, title: \"Alter Self Effect\", token: aToken})\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (choice)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Create an instant and rather temprary item in inventory to represent the natural weap\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function createWeapon(damType, options = {}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    let strMod = aActor.data.data.abilities.str.mod\n    let dexMod = aActor.data.data.abilities.dex.mod\n    let bestMod = \"str\"\n    if (dexMod > strMod) bestMod = \"dex\"\n    if (TL > 1) jez.trace(`${TAG} Pick skill type`, \"strMod\", strMod, \"dexMod\", dexMod, \"bestMod ==>\", bestMod)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    let descValue = `Use claws, fangs, spines, horns, or a different natural weapon \n    of your choice.<br><br>\n    Your unarmed strike with this weapon deals <b>1d6+1 ${damType}</b> damage, you are \n    proficient with this weapon. Finally, the natural weapon is <b>magic</b> and you \n    have a <b>+1 bonus</b> to attack rolls you make using it.`\n    let itemData = [{\n        \"name\": WEAP_NAME,\n        \"type\": \"weapon\",\n        \"data\": {\n            \"ability\": `${bestMod}`,\n            \"actionType\": \"mwak\",\n            \"activation\": {\n                \"cost\": 1,\n                \"type\": \"action\"\n            },\n            \"attackBonus\": 1,\n            \"damage\": {\n                \"parts\": [[`1d6 +1 +@mod`, `${damType.toLowerCase()}`]],  // Set base damage\n\n            },\n            \"description\": { \"value\": descValue },\n            \"equipped\": true,\n            \"prof\": { \"hasProficiency\": true },\n            \"proficient\": true,\n            \"properties\": {\n                \"mgc\": \"true\",  // Mark the new item as magic\n            },\n            \"source\": `Alter Self: ${damType} Weapon`,\n            \"weaponType\": \"natural\"\n\n        },\n        \"img\": WEAP_IMG,\n        \"effects\": []\n    }];\n    await aActor.createEmbeddedDocuments(\"Item\", itemData);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Create and instant and rather temprary item in inventory to represent the natural weap\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function createEffectUpdate(options = {}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    let descValue = `<b>${aToken.name}</b> may spend an action to update the effect(s) of their current <b>Alter Self</b> spell.`\n    if (TL > 1) jez.trace(`${TAG} descValue`, descValue)\n    let itemData = [{\n        \"data\": {\n            \"ability\": \"\",\n            \"actionType\": \"util\",\n            \"activation\": {\n                \"condition\": \"Must have pre-existing Alter Self effect.\",\n                \"type\": \"action\",\n                \"cost\": 1,\n            },\n            \"description\": { \"value\": descValue },\n            \"formula\": \"\",\n            \"level\": 0,\n            \"preparation\": {\n                \"mode\": \"innate\",\n                \"prepared\": false\n            },\n            \"school\": \"trs\",\n            \"source\": \"Alter Self Spell\",\n        },\n        \"effects\": [],\n        \"flags\": {\n            \"midi-qol\": {\n                \"onUseMacroName\": \"Alter_Self_Helper\"\n            }\n        },\n        \"img\": args[0].item.img,\n        \"name\": UPDATE_EFFECT_NAME,\n        \"type\": \"spell\",\n    }];\n    if (TL > 1) jez.trace(`${TAG} itemData`, itemData)\n    await aActor.createEmbeddedDocuments(\"Item\", itemData);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Create and process selection dialog, passing it onto specified callback function\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction pickFromListArray(queryTitle, queryText, pickCallBack, queryOptions, options = {}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, `queryTitle  `, queryTitle, `queryText   `, queryText,\n        `pickCallBack`, pickCallBack, `queryOptions`, queryOptions, \"options     \", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (typeof (pickCallBack) != \"function\") {\n        let msg = `pickFromList given invalid pickCallBack, it is a ${typeof (pickCallBack)}`\n        ui.notifications.error(msg);\n        if (TL > 1) jez.trace(`${TAG} ${msg}`);\n        return\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (!queryTitle || !queryText || !queryOptions) {\n        let msg = `pickFromList arguments should be (queryTitle, queryText, pickCallBack, [queryOptions]),\n                   but yours are: ${queryTitle}, ${queryText}, ${pickCallBack}, ${queryOptions}`;\n        ui.notifications.error(msg);\n        if (TL > 1) jez.trace(`${TAG} ${msg}`);\n        return\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    let template = `\n    <div>\n    <div class=\"form-group\">\n        <label>${queryText}</label>\n        <select id=\"selectedOption\">`\n    for (let option of queryOptions) {\n        template += `<option value=\"${option}\">${option}</option>`\n    }\n    template += `</select>\n    </div></div>`\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    new Dialog({\n        title: queryTitle,\n        content: template,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: 'OK',\n                callback: async (html) => {\n                    const selectedOption = html.find('#selectedOption')[0].value\n                    if (TL > 1) jez.trace(`${TAG} selected option`, selectedOption)\n                    pickCallBack(selectedOption)\n                },\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel',\n                callback: async (html) => {\n                    if (TL > 1) jez.trace(`${TAG} canceled`)\n                    pickCallBack(null)\n                },\n            },\n        },\n        default: 'cancel',\n    }).render(true)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/***************************************************************************************************\n * Post a new chat message -- msgParm should be a string for a simple message or an object with \n * some or all of these fields set below for the chat object.  \n * \n * Example Calls:\n *  jezPostMessage(\"Hi there!\")\n *  jezPostMessage({color:\"purple\", fSize:18, msg:\"Bazinga\", title:\"Sheldon says...\" })\n * \n ***************************************************************************************************/\n// async function jezPostMessage(msgParm) {\n//     const FUNCNAME = \"postChatMessage(msgParm)\";\n//     if (TL > 1) jez.trace(`${TAG} --------------${FUNCNAME}-----------`, \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n//         \"msgParm\", msgParm);\n//     let typeOfParm = typeof (msgParm)\n//     switch (typeOfParm) {\n//         case \"string\":\n//             await ChatMessage.create({ content: msgParm });\n//             break;\n//         case \"object\":\n//             let chat = {}\n//             chat.title = msgParm?.title || \"Generic Chat Message\"\n//             chat.fSize = msgParm?.fSize || 12\n//             chat.color = msgParm?.color || \"black\"\n//             chat.icon = msgParm?.icon || \"icons/vtt-512.png\"\n//             chat.msg = msgParm?.msg || \"Maybe say something useful...\"\n//             chatCard = `\n//             <div class=\"dnd5e chat-card item-card midi-qol-item-card\">\n//                 <header class=\"card-header flexrow\">\n//                     <img src=\"${chat.icon}\" title=\"${chat.title}\" width=\"36\" height=\"36\">\n//                     <h3 class=\"item-name\">${chat.title}</h3>\n//                 </header>\n//                 <div class=\"card-buttons\">\n//                     <p style=\"color:${chat.color};font-size:${chat.fSize}px\">\n//                         ${chat.msg}</p>\n//                 </div>\n//             </div>`\n//             await ChatMessage.create({ content: chatCard });\n//             break;\n//         default:\n//             ui.notifications.error('Bas Stuff')\n//     }\n//     await jez.wait(100);\n//     await ui.chat.scrollBottom();\n//     if (TL > 1) jez.trace(`${TAG} --------------${FUNCNAME}-----------`, \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n//     return;\n// }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "cf": {
      "id": "temp_kw1jjhsz8u"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.Pr5yxZRZBb2I4qbk"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}