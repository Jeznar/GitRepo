{
  "name": "Flaming Sphere",
  "type": "spell",
  "img": "modules/jb2a_patreon/Library/2nd_Level/Flaming_Sphere/FlamingSphere_02_Orange_Thumb.webp",
  "data": {
    "description": {
      "value": "<p>A 5-foot-diameter sphere of fire appears in an unoccupied space of your choice within range and lasts for the duration.</p>\n<p>Any creature that <strong>ends its turn within 5 feet</strong> of the sphere must make a Dexterity saving throw. The creature takes <strong>2d6 fire damage on a failed save</strong>, or <strong>half as much damage on a successful one</strong>.</p>\n<p>As a bonus action, you can move the sphere up to 30 feet. When you move the sphere, you can direct it over barriers up to 5 feet tall and jump it across pits up to 10 feet wide. </p>\n<p>If you ram the sphere into a creature, that <strong>creature must make the saving throw </strong>against the sphere’s damage, and the sphere stops moving this turn.</p>\n<p>The sphere ignites flammable objects not being worn or carried, and it sheds <strong>bright light</strong> in a 20-foot radius and <strong>dim light </strong>for an additional 20 feet.</p>\n<p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d6 for each slot level above 2nd.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 2.5,
      "width": null,
      "units": "ft",
      "type": "cylinder"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 15,
      "scaling": "spell"
    },
    "level": 2,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A bit of tallow, a pinch of brimstone, and a dusting of powdered iron",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d6"
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.blKH3vBO3ZNdDzI8"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Flaming Sphere",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Flaming_Sphere.0.4.js\"\njez.log(MACRONAME)\n/*****************************************************************************************\n * Implements Flaming Sphere, based on Moonbeam.0.8 and its Helper_DAE script\n * \n * 01/01/22 0.1 Creation of Macro\n * 03/16/22 0.2 Move into GitRepo chasing what appears to be permissions issue\n *****************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\n jez.log(`============== Starting === ${MACRONAME} =================`);\n for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n const LAST_ARG = args[args.length - 1];\n let aActor;         // Acting actor, creature that invoked the macro\n let aToken;         // Acting token, token for creature that invoked the macro\n let aItem;          // Active Item information, item invoking this macro\n if (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\n if (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\n if (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n let msg = \"\";\n\nconst ATTACK_ITEM = \"Flaming Sphere Attack\";\nconst MINION_NAME = \"*Flaming_Sphere*\"\nconst MINION_UNIQUE_NAME = `${aToken.name}'s Sphere`\nconst MACRO_HELPER = `${MACRO}_Helper_DAE`;\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_LOOP = \"modules/jb2a_patreon/Library/2nd_Level/Flaming_Sphere/FlamingSphere_02_Orange_200x200.webm\";\nconst VFX_OPACITY = 0.7;\nconst VFX_SCALE = 0.6;   \nconst DeleteAsGM_MACRO = \"DeleteTokenMacro\";\nconst SummonAsGM_MACRO = \"SummonCreatureMacro\";\nconst VIEWED_SCENE = game.scenes.viewed;\nconst SQUARE_WIDTH = VIEWED_SCENE.data.grid;\nconst TEMPLATE_ID = args[0]?.templateId\nlet sphereID = null     // The token.id of the summoned fire sphere\nlet sphereToken = null  // Variable to hold the token5e for the Sphere\njez.log(\"------- Obtained Global Values -------\",\n    `Active Token (aToken) ${aToken?.name}`, aToken,\n    `Active Actor (aActor) ${aActor?.name}`, aActor,\n    `Active Item (aItem) ${aItem?.name}`, aItem,\n    \"ATTACK_ITEM\", ATTACK_ITEM,\n    \"MINION_UNIQUE_NAME\", MINION_UNIQUE_NAME);\n\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif (!preCheck()) {\n    jez.log(msg)\n    ui.notifications.error(msg)\n    return;\n}\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0].tag === \"OnUse\") await doOnUse(); // Midi ItemMacro On Use\n\nmsg = `<b>${aActor.name}</b> now has an ability named: <b>Flaming Sphere Attack</b> that can be used \nto inflict damage on creatures that start their turn in the beam or enter it.<br><br>\nThe owner can use their <b>Action</b> to move the tile respesenting the beam up to <b>60 feet</b>.\nThe tile and the Flaming_Sphere Attack require manual cleanup after spell completion.`\npostResults(msg);\njez.log(`Ending ${MACRONAME} ================================================`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post the results to chat card\n ***************************************************************************************************/\n async function postResults(resultsString) {\n    const LAST_ARG = args[args.length - 1];\n\n    let chatMessage = game.messages.get(LAST_ARG.itemCardId);\n    let content = await duplicate(chatMessage.data.content);\n    jez.log(`chatMessage: `,chatMessage);\n    const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n    const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${resultsString}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    await ui.chat.scrollBottom();\n    return;\n}\n/***************************************************************************************************\n * Check the setup of things.  Setting the global msg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (!game.modules.get(\"advanced-macros\")?.active) {\n        msg = \"Please enable the Advanced Macros module\"\n        return (false)\n    }\n    if (!runAsGM_Check(SummonAsGM_MACRO)) return (false);\n    if (!runAsGM_Check(DeleteAsGM_MACRO)) return (false);\n    if (!game.macros.getName(MACRO_HELPER)) {\n        msg = `Could not locate required macro: ${MACRO_HELPER}`\n        return (false)\n    }\n    //----------------------------------------------------------------------------------\n    // Make sure the GM_MACRO exists and is configured to run as GM\n    //\n    // \n    function runAsGM_Check(GM_MACRO) {\n        const checkFunc = game.macros.getName(GM_MACRO);\n        if (!checkFunc) {\n            msg = `Cannot locate ${GM_MACRO} run as GM Macro`;\n            return (false);\n        }\n        if (!checkFunc.data.flags[\"advanced-macros\"].runAsGM) {\n            msg = `${GM_MACRO} \"Execute as GM\" needs to be checked.`;\n            return (false);\n        }\n        jez.log(` Found ${GM_MACRO}, verified Execute as GM is checked`);\n        return (true);\n    }\n    jez.log('All looks good, to quote Jean-Luc, \"MAKE IT SO!\"')\n    return (true)\n}\n/***************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(\"--------------OnUse-----------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    await deleteItem(ATTACK_ITEM, aActor);\n    const numDice = args[0].spellLevel;\n    const damageType = \"fire\"; \n    let spellDC = aActor.data.data.attributes.spelldc\n    jez.log(` spellDC ${spellDC}`);\n    jez.log(` args[0].item.img ${args[0].item.img}`)\n     //-------------------------------------------------------------------------------\n     // Build the item data for the action to be creater\n     //\n     let value = \n      `Use this attack to attempt to damage any creature that ends its turn within 5 \n      feet of the sphere. The creature takes ${numDice}d6 fire damage, \n      or half damage on save.\n   \n      If you ram the sphere into a creature, that creature is subject to an immediate \n      attack with this item and the sphere stops moving for this turn.`\n    let itemData = [{\n        \"name\": ATTACK_ITEM,\n        \"type\": \"spell\",\n        \"data\": {\n            \"source\": \"Casting Flaming Sphere\",\n            \"ability\": \"\",\n            \"description\": {\"value\": value},\n            \"actionType\": \"save\",\n            \"attackBonus\": 0,\n            \"damage\": {\n                \"parts\": [\n                    [\n                        `${numDice}d6`,\n                        `${damageType}`\n                    ]\n                ],\n            },\n            \"formula\": \"\",\n            \"save\": {\n                \"ability\": \"dex\",\n                \"dc\": spellDC,\n                \"scaling\": \"spell\"\n            },\n            \"level\": 0,\n            \"school\": \"abj\",\n            \"preparation\": {\n                \"mode\": \"innate\",\n                \"prepared\": false\n            },\n        },\n        \"img\": args[0].item.img,\n        \"effects\": []\n\n    }];\n     await aActor.createEmbeddedDocuments(\"Item\", itemData);\n     //-------------------------------------------------------------------------------\n     // Extract coordinates from the template and delete it\n     //\n     //jez.log(\"Extract information from template and then delete the template\")\n     //jez.log(\"TEMPLATE_ID\", TEMPLATE_ID)\n     //jez.log(`canvas.templates.get(TEMPLATE_ID)`, canvas.templates.get(TEMPLATE_ID))\n     let x = canvas.templates.get(TEMPLATE_ID).data.x //- SQUARE_WIDTH / 2;\n     let y = canvas.templates.get(TEMPLATE_ID).data.y //- SQUARE_WIDTH / 2;\n     await canvas.templates.get(TEMPLATE_ID).document.delete()\n     //-------------------------------------------------------------------------------\n     // Summon the rolling ball o'fire, which includes setting the token.id of the \n     // summoned sphere into the global variable: sphereID\n     //\n     jez.log(`OnUse ==> Summon the ${MINION_NAME} at ${x},${y}`)\n     jez.log(await summonCritter(x, y, MINION_NAME, 50))\n     //await game.macros.getName(SummonAsGM_MACRO).execute(MINION_NAME, x, y); // Summon occurs here!  Gosh Durnit\n     //await jez.wait(100);   // Wait a bit to allow the summoned token to be fully completed\n\n     //jez.log(`OnUse ==> Obtain the token information from the just summoned ${MINION_NAME}`)\n     //let tToken = await findTokenByName(MINION_NAME)\n\n     jez.log(`OnUse ==> Start the VFX sequence on ${MINION_UNIQUE_NAME}`)\n     await startVFX(MINION_UNIQUE_NAME);\n     //-------------------------------------------------------------------------------\n     // Create an effect on the caster to trigger the doOn / doOff actions\n     //\n     let gameRound = game.combat ? game.combat.round : 0;\n     value = `${MACRO_HELPER} \"${MINION_UNIQUE_NAME}\" \"${VFX_NAME}\" \n             \"${ATTACK_ITEM}\" ${VFX_OPACITY} ${VFX_SCALE}`;\n     let effectData = {\n         label: MACRO,\n         icon: aItem.img,\n         origin: aActor.uuid,\n         flags: { dae: { itemData: aItem.data, macroRepeat: \"startEveryTurn\", token: aToken.uuid } },\n         disabled: false,\n         duration: { rounds: 10, turns: 10, startRound: gameRound, seconds: 60, startTime: game.time.worldTime },\n         changes: [\n             { key: \"macro.execute\", mode: jez.CUSTOM, value: value, priority: 20 }\n         ]\n     };\n     await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: [effectData] });\n     jez.log(`applied ${MACRO} effect`, effectData);\n\n     jez.log(\"--------------OnUse---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/***************************************************************************************\n * Function to delete an item from actor\n *\n * Parameters\n *  - itemName: A string naming the item to be found in actor's inventory\n *  - actor: Optional actor to be searched, defaults to actor launching this macro\n ***************************************************************************************/\n async function deleteItem(itemName, actor) {\n    const FUNCNAME = \"deleteItem(itemName, actor)\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    // If actor was not passed, pick up the actor invoking this macro\n    actor = actor ? actor : canvas.tokens.get(args[0].tokenId).actor;\n    let item = actor.items.find(item => item.data.name === itemName && item.type === \"spell\")\n    jez.log(\"*** Item to be deleted:\", item);\n    if (item == null || item == undefined) {\n        jez.log(`${actor.name} does not have ${itemName}`);\n        jez.log(`${FUNCNAME} returning false`);\n        return (false);\n    }\n    jez.log(`${actor.name} had ${item.name}`, item);\n    await aActor.deleteOwnedItem(item._id);\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Summon a token of minion on the template and delete the template\n ***************************************************************************************************/\n/*async function executeSummonAtTemplate(minion) {\n    const FUNCNAME = \"executeSummon(minion)\";\n  \n    //---------------------------------------------------------------------------------\n    // Extract information from template and then delete it\n    //\n    let x = canvas.templates.get(TEMPLATE_ID).data.x + SQUARE_WIDTH/2; // Because, reasons\n    let y = canvas.templates.get(TEMPLATE_ID).data.y + SQUARE_WIDTH/2;\n    await canvas.templates.get(TEMPLATE_ID).document.delete() \n\n    jez.log(\"-----------------------------------\", \n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        \"minion\", minion,\n        \"coords (x,y)\", `${x},${y}`,\n        \"SummonAsGM_MACRO\", SummonAsGM_MACRO,\n        \"VIEWED_SCENE\", VIEWED_SCENE, \n        \"SQUARE_WIDTH\", SQUARE_WIDTH);\n\n    // Invoke the RunAsGM Macro to do the job\n    // SummonFunc.execute(minion, x, y);\n    game.macros.getName(SummonAsGM_MACRO).execute(minion, x, y);\n\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n\n    return (true);\n}\n*/\n/***************************************************************************************************\n * Start the Visual Special Effects (VFX) on specified token\n ***************************************************************************************************/\nasync function startVFX(minion) {\n    const FUNCNAME = \"startVFX(minion)\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} ----------------`);\n    jez.log(\"==> minion\", minion);\n    //----------------------------------------------------------------------------------------------\n    // Search for minion in the current scene \n    //\n    /*\n    let eToken = await findTokenByName(minion)\n    if (!eToken) {\n        jez.log(\"Found only tears\")\n        ui.notifications.error(`${MACRO} failed, ${minion} not found.`);\n        jez.log(\"------------------------------ \", \"Premature End\", `${MACRONAME} ${FUNCNAME}`);\n        return (false);\n    } else jez.log(\"eToken =====> \", eToken)*/\n    new Sequence()\n      .effect()\n        .file(\"jb2a.smoke.puff.centered.dark_black.2\")\n        .attachTo(sphereToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .persist()\n        .name(VFX_NAME)         // Give the effect a uniqueish name\n        .fadeIn(300)            // Fade in for specified time in milliseconds\n        .fadeOut(300)           // Fade out for specified time in milliseconds\n        .extraEndDuration(800)  // Time padding on exit to connect to Outro effect\n      .play()\n      jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Find an owned token by name on current scene.  Return the token or null if not found\n ***************************************************************************************************/\n /*async function findTokenByName(name) {\n    const FUNCNAME = \"findTokenByName(name)\";\n    jez.log(\"-----------------------------------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        \"name\", name)\n    let targetToken = \"\"\n    //----------------------------------------------------------------------------------------------\n    // Loop through tokens on the canvas looking for the one we seek\n    //\n    let ownedTokens = canvas.tokens.ownedTokens\n    for (let i = 0; i < ownedTokens.length; i++) {\n        jez.log(`  ${i}) ${ownedTokens[i].name}`, ownedTokens[i]);\n        if (name === ownedTokens[i].name) {\n            // jez.log(\"Eureka I found it!\")\n            targetToken = ownedTokens[i]\n            break;\n        }\n    }\n    if (targetToken) jez.log(`${name}'s token has been found`, targetToken)\n    else jez.log(`${name}'s token was not found :-(`)\n    jez.log(\"-----------------------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return (targetToken);\n}*/\n/***************************************************************************************************\n * Summon the minion and update HP\n * \n * https://github.com/trioderegion/warpgate\n ***************************************************************************************************/\n async function summonCritter(x,y,summons,MAX_HP) {\n    jez.log(\"function summonCritter(x,y,summons, number, updates)\",\"x\",x,\"y\",y,\"summons\",summons,\"MAX_HP\",MAX_HP);\n    //let updates = { actor: { \"data.attributes.hp\": { value: MAX_HP, max: MAX_HP } } }\n\n    //let name = `${summons}-${aToken.name}`\n    let name = MINION_UNIQUE_NAME\n    let updates = { token : {name: name} }\n\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n      pre: async (template) => {\n        preEffects(template);\n        await warpgate.wait(500);\n      },\n      post: async (template, token) => {\n        postEffects(template);\n        await warpgate.wait(500);\n      }\n    };\n    jez.log(\"About to call Warpgate.spawnAt\")\n    let returned = await warpgate.spawnAt({x:x,y:y},summons, updates, CALLBACKS, OPTIONS);\n    jez.log(\"returned\", returned)\n    sphereID = returned[0] // The token ID of the summoned sphere\n    jez.log(\"sphereID\", sphereID)\n    sphereToken = canvas.tokens.placeables.find(ef => ef.id === sphereID)\n    jez.log(\"sphereToken\", sphereToken)\n  }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n   async function preEffects(template) {\n    const VFX_FILE = \"jb2a.explosion.orange.0\"\n    new Sequence()\n      .effect()\n      .file(VFX_FILE)\n      .atLocation(template)\n      .center()\n      .opacity(0.8)\n      .scale(0.5)\n      .play()\n  }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n   async function postEffects(template) {\n    const VFX_OPACITY = 1.0\n    const VFX_SCALE = 1.0\n    const VFX_FILE = \"modules/jb2a_patreon/Library/Generic/Smoke/SmokePuff01_*_Regular_Grey_400x400.webm\"\n    new Sequence()\n      .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE/2)\n        .opacity(VFX_OPACITY)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE*0.75)\n        .opacity(VFX_OPACITY*0.75)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE*1.25)\n        .opacity(VFX_OPACITY*0.5)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE*1.5)\n        .opacity(VFX_OPACITY*0.25)\n        .waitUntilFinished(-1000) \n    .play()\n  }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}