{
  "name": "Flaming Sphere",
  "type": "spell",
  "img": "modules/jb2a_patreon/Library/2nd_Level/Flaming_Sphere/FlamingSphere_02_Orange_Thumb.webp",
  "data": {
    "description": {
      "value": "<p>A 5-foot-diameter sphere of fire appears in an unoccupied space of your choice within range and lasts for the duration.</p>\n<p>Any creature that <strong>ends its turn within 5 feet</strong> of the sphere must make a Dexterity saving throw. The creature takes <strong>2d6 fire damage on a failed save</strong>, or <strong>half as much damage on a successful one</strong>.</p>\n<p>As a bonus action, you can move the sphere up to 30 feet. When you move the sphere, you can direct it over barriers up to 5 feet tall and jump it across pits up to 10 feet wide. </p>\n<p>If you ram the sphere into a creature, that <strong>creature must make the saving throw </strong>against the sphere’s damage, and the sphere stops moving this turn.</p>\n<p>The sphere ignites flammable objects not being worn or carried, and it sheds <strong>bright light</strong> in a 20-foot radius and <strong>dim light </strong>for an additional 20 feet.</p>\n<p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d6 for each slot level above 2nd.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 15,
      "scaling": "spell"
    },
    "level": 2,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A bit of tallow, a pinch of brimstone, and a dusting of powdered iron",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d6"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.blKH3vBO3ZNdDzI8"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Flaming Sphere",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Flaming_Sphere.0.9.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implements Flaming Sphere, based on Moonbeam.0.8 and its Helper_DAE script\n * \n * 01/01/22 0.1 Creation of Macro\n * 03/16/22 0.2 Move into GitRepo chasing what appears to be permissions issue\n * 05/16/22 0.5 Update for FoundryVTT 9.x\n * 07/15/22 0.6 Update to use warpgate.spawnAt with range limitation\n * 07/17/22 0.7 Update to use jez.spawnAt (v2) for summoning\n * 08/02/22 0.8 Add convenientDescription\n * 12/12/22 0.9 Update to current logging, changed attack item to be on the sphere, general cleanup\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst ATTACK_ITEM = \"Flaming Sphere Attack\";\nconst MINION = \"Flaming_Sphere\"\nconst EFFECT = \"Flaming Sphere\"\nconst MINION_UNIQUE_NAME = `${aToken.name}'s Sphere`\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_OPACITY = 0.7;\nconst VFX_SCALE = 0.6;\nlet sphereID = null     // The token.id of the summoned fire sphere\nlet sphereToken = null  // Variable to hold the token5e for the Sphere\nif (TL > 1) jez.trace(`${TAG} ------- Obtained Global Values -------`,\n    `Active Token (aToken) ${aToken?.name}`, aToken,\n    `Active Actor (aActor) ${aActor?.name}`, aActor,\n    `Active Item (aItem) ${aItem?.name}`, aItem,\n    \"ATTACK_ITEM\", ATTACK_ITEM,\n    \"MINION_UNIQUE_NAME\", MINION_UNIQUE_NAME);\nconst SAVE_DC = jez.getSpellDC(aActor)\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0].tag === \"OnUse\") await doOnUse({traceLvl:TL}); // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({traceLvl:TL});                   // DAE removal\n//-----------------------------------------------------------------------------------------------------------------------------------\n// All done\n//\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post the results to chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Check the setup of things.  Setting the global msg and returning true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nasync function preCheck() {\n    if (!game.modules.get(\"advanced-macros\")?.active) return jez.badNews(`${TAG} Please enable the Advanced Macros module`,'e')\n    return (true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return (false);\n\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Summon our flaming sphere\n    //\n    const SPHERE_DATA = await summonCritter(MINION)\n    if (TL > 1) jez.trace(`${TAG} SPHERE_DATA`,SPHERE_DATA)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Modify the concentrating effect so that it deletes the sphere when it is removed\n    //\n    modConcentratingEffect(aToken, SPHERE_DATA.id)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Start the VFX\n    //\n    if (TL > 1) jez.trace(`${TAG} Start the VFX sequence on ${MINION_UNIQUE_NAME}`)\n    await startVFX();\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Post final result message\n    //\n    msg = `<b>${aActor.name}</b> has summoned a <b>Flaming Sphere</b>.<br><br>\n    It has an attack (inventory item: <b>Flaming Sphere Attack</b>) used to inflict damage on creatures that start their next to the \n    sphere.<br><br>\n    ${aActor.name} can use an <b>Action</b> to move the sphere, inflicting damage and stopping on any collision.`\n    postResults(msg);\n    if (TL > 0) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/***************************************************************************************************\n * Start the Visual Special Effects (VFX) on specified token\n ***************************************************************************************************/\nasync function startVFX() {\n    new Sequence()\n        .effect()\n        .file(\"jb2a.smoke.puff.centered.dark_black.2\")\n        .attachTo(sphereToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .persist()\n        .name(VFX_NAME)         // Give the effect a uniqueish name\n        .fadeIn(300)            // Fade in for specified time in milliseconds\n        .fadeOut(300)           // Fade out for specified time in milliseconds\n        .extraEndDuration(800)  // Time padding on exit to connect to Outro effect\n        .play()\n    return (true);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Summon the minion\n * \n * https://github.com/trioderegion/warpgate\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nasync function summonCritter(MINION, options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"MINION\", MINION, \"options\",options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build the dataObject for our summon call\n    //\n    let argObj = {\n        defaultRange: 60,                   // Defaults to 30, but this varies per spell\n        duration: 1000,                     // Duration of the intro VFX\n        introTime: 1000,                     // Amount of time to wait for Intro VFX\n        introVFX: '~Explosion/Explosion_01_${color}_400x400.webm', // default introVFX file\n        minionName: `${aToken.name}'s ${MINION}`,\n        minionName: MINION_UNIQUE_NAME,\n        name: aItem.name,                   // Name of action (message only), typically aItem.name\n        outroVFX: '~Smoke/SmokePuff01_01_Regular_${color}_400x400.webm', // default outroVFX file\n        scale: 0.7,\t\t\t\t\t\t\t\t// Default value but needs tuning at times\n        source: aToken,                     // Coords for source (with a center), typically aToken\n        width: 1,                           // Width of token to be summoned, 1 is the default\n        traceLvl: TL                        // Trace level, matching calling function decent choice\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    let summonData = await game.actors.getName(MINION)\n    argObj.img = summonData ? summonData.img : aItem.img\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Buikd updates data field to set the save dc on the fire sphere's attack to the caster's SAVE_DC\n    // \n    //\n    if (TL > 1) jez.trace(`${TAG} Building update to set save DC to ${SAVE_DC}`)\n    argObj.updates = {\n        actor: { name: MINION_UNIQUE_NAME },\n        token: { name: MINION_UNIQUE_NAME },\n        embedded: {\n            Item: {\n                \"Flaming Sphere Attack\": {\n                    // 'data.damage.parts': [[`1d6[fire] + 3`, \"fire\"]],\n                    // 'data.attackBonus': `2[mod] + 3[prof]`,   \n                    'data.save.dc': SAVE_DC,\n                },\n            }\n        }\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Do the actual summon\n    //\n    let returned = await jez.spawnAt(MINION, aToken, aActor, aItem, argObj)\n    if (TL>1) jez.trace(`${TAG} spawnAt returned`,returned)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Fnish up\n    //\n    // sphereID = returned[0] // The token ID of the summoned sphere\n    return canvas.tokens.placeables.find(ef => ef.id === returned[0])\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Modify existing concentration effect to call this macro as an ItemMacro that can use doOff to delete our Flaming Sphere\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n async function modConcentratingEffect(token5e, sphereID) {\n    const EFFECT = \"Concentrating\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Seach the token to find the just added concentrating effect\n    //\n    await jez.wait(100)\n    let effect = await token5e.actor.effects.find(i => i.data.label === EFFECT);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. \n    //    \n    effect.data.changes.push({ key: `macro.itemMacro`, mode: jez.CUSTOM, value: `${sphereID}`, priority: 20 })\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result && TL > 1) jez.trace(`${MACRO} | Active Effect ${EFFECT} updated!`, result);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOff(options={}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Despawn our charge\n    //\n    let sceneId = game.scenes.viewed.id\n    let sphereId = args[1]\n    warpgate.dismiss(sphereId, sceneId)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // All done\n    //\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}