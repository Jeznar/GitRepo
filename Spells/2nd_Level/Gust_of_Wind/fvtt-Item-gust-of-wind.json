{
  "name": "Gust of Wind",
  "type": "spell",
  "img": "icons/magic/air/wind-swirl-gray-blue.webp",
  "data": {
    "description": {
      "value": "<p>A line of strong wind 60 feet long and 10 feet wide blasts from you in a direction you choose for the spell's duration.</p>\n<p>Each creature that starts its turn in the line must succeed on a <strong>Strength saving </strong>throw or be <strong>pushed 15 feet away</strong> from you in a direction following the line.</p>\n<p>Any creature in the line must spend <strong>2 feet of movement for every 1 foot </strong>it moves when moving closer to you.</p>\n<p>The gust disperses gas or vapor, and it extinguishes candles, torches, and similar unprotected flames in the area. It causes protected flames, such as those of lanterns, to dance wildly and has a 50 percent chance to extinguish them.</p>\n<p>As a <strong>bonus action</strong> on each of your turns before the spell ends, you can change the direction in which the line blasts from you.</p>\n<hr />\n<p><strong>Note</strong>: The gust moves with the caster.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Place the template horizontally from left to right. After template is placed the Tile can be rotated (cmd-mouse wheel) and dragged into correct position.&nbsp; Saving throws and movement of tokens are to be done manually.<br /><br />If a bonus action is spent to move the direction the line blasts from you, it will need to be manually adjusted in teh same manner as initial placement.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 248",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 60,
      "width": 10,
      "units": "ft",
      "type": "line"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 0,
      "scaling": "spell"
    },
    "level": 2,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A legume seed.",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.MjcyMDliNWMwMTcy"
    },
    "autoanimations": {
      "version": 4,
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false,
        "menuType": "ray",
        "variant": "",
        "enableCustom": false,
        "repeat": null,
        "delay": null,
        "scaleX": null,
        "scaleY": null,
        "opacity": null,
        "removeTemplate": false,
        "persistent": true,
        "customPath": "modules/jb2a_patreon/Library/2nd_Level/Gust_Of_Wind/GustOfWind_01_White_1200x200.webm",
        "persistType": ""
      },
      "override": false,
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animType": "template",
      "animation": "",
      "color": "",
      "audio": {
        "a01": {
          "enable": false
        }
      },
      "preview": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Gust of Wind",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Gust_of_Wind.0.1.js\"\n/*****************************************************************************************\n * 05/31/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    if (args[1] === \"Tile\") {\n        const TILE_ID = args[2]\n        jez.log(`Delete the VFX tile`, TILE_ID)\n        await canvas.scene.deleteEmbeddedDocuments(\"Tile\", [TILE_ID])\n        jez.log(`Deleted Tile ${TILE_ID}`)\n    } \n    else if (args[1] === \"Effect\") {\n        let existingEffect = await aToken.actor.effects.find(i => i.data.label === args[2]);\n        if (existingEffect) await existingEffect.delete()\n    } else {\n        msg = `Some bad logic happened in ${MACRO}. Args[1] = ${args[1]}. Please tell Joe the tale.`\n        ui.notifications.error(msg)\n        jez.log(msg)\n        postResults(msg)\n        return(false)\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    // ---------------------------------------------------------------------------------------\n    // Place a nifty tile... \n    //\n    const VFX_FILE = \"modules/jb2a_patreon/Library/2nd_Level/Gust_Of_Wind/GustOfWind_01_White_1200x200.webm\"\n    const SQUARES_LENGTH = 12\n    const SQUARES_HEIGHT = 2\n    // Obtain the ID of the template created by the calling item\n    const TEMPLATE_ID = args[0].templateId\n    // Call function to place the tile and grab the returned ID\n    let newTileId = await placeTileVFX(TEMPLATE_ID, VFX_FILE, SQUARES_LENGTH, SQUARES_HEIGHT);\n    jez.log(\"newTileId\", newTileId)\n    // Grab the tile's TileDocument object from the scene\n    let fetchedTile = await canvas.scene.tiles.get(newTileId)\n    jez.log(`fetchedTile ${fetchedTile.id}`, fetchedTile)\n    // Format and result message \n    msg = `Placed Tile ID: ${fetchedTile.id}. <br>Image file used as source:<br>${fetchedTile.data.img}`;\n    jez.log(\"msg\", msg);\n    // ---------------------------------------------------------------------------------------\n    // Add an effect to the active token that expires at the end of its next turn. \n    //\n    let effectData = {\n        label: aItem.name,\n        icon: aItem.img,\n        origin: aToken.uuid,\n        disabled: false,\n        flags: { dae: { itemData: aItem } },\n        changes: [\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `Tile ${fetchedTile.id}`, priority: 20 },\n        ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: [effectData] });\n    msg = `Strong wind blasts from <b>${aToken.name}</b>. Eash token that starts its turn in the \n    gusts must make a DC${jez.getSpellDC(aToken)} STR Save or be moved 15 feet.  \n    Moving into the wind costs double.`\n    postResults(msg)\n    // ---------------------------------------------------------------------------------------\n    // Modify the concentrating effect to trigger removal of the associated effect\n    //\n    modConcentratingEffect(aToken, aItem.name)\n    // ---------------------------------------------------------------------------------------\n    // That's all folks...\n    //\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Pop a VFX Tile where the template was and return the ID of the tile\n ***************************************************************************************************/\nasync function placeTileVFX(TEMPLATE_ID, vfxFile, tilesWide, tilesHigh) {\n    // Grab the size of grid in pixels per square\n    const GRID_SIZE = canvas.scene.data.grid;\n    // Search for the MeasuredTemplate that should have been created by the calling item\n    let template = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    // Delete the template to clean up the scene\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    // Place the tile with an embedded VFX\n    let tileProps = {\n        x: template.center.x /*- GRID_SIZE*tilesWide/2*/,   // X coordinate is poorly understood\n        y: template.center.y - GRID_SIZE * tilesHigh / 2,   // Y coordinate is center of the template\n        img: vfxFile,\n        width: GRID_SIZE * tilesWide,   // VFX should occupy 2 tiles across\n        height: GRID_SIZE * tilesHigh   // ditto\n    };\n    // let newTile = await Tile.create(tileProps)   // Depricated \n    let newTile = await game.scenes.current.createEmbeddedDocuments(\"Tile\", [tileProps]);  // FoundryVTT 9.x \n    jez.log(\"newTile\", newTile);\n    return (newTile[0].data._id);\n}\n/***************************************************************************************************\n * Modify existing concentration effect to trigger removal of the associated DAE effect on caster\n ***************************************************************************************************/\nasync function modConcentratingEffect(tToken, label) {\n    const EFFECT = \"Concentrating\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(100)\n    let effect = await tToken.actor.effects.find(i => i.data.label === EFFECT);\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. In this case, a world macro that will be\n    // given arguments: VFX_Name and Token.id for all affected tokens\n    //    \n    effect.data.changes.push({ key: `macro.itemMacro`, mode: jez.CUSTOM, value: `Effect '${label}'`, priority: 20 })\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect ${EFFECT} updated!`, result);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}