{
  "name": "Flame Blade",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/enchant-orange-2.jpg",
  "data": {
    "description": {
      "value": "<p>You evoke a fiery blade in your free hand. The blade is similar in size and shape to a Scimitar, and it lasts for the Duration. If you let go of the blade, it disappears, but you can evoke the blade again as a Bonus Action.</p>\n<p>You can use your action to make a melee spell Attack with the fiery blade. On a hit, the target takes 3d6 fire damage.</p>\n<p>The flaming blade sheds bright light in a 10-foot radius and dim light for an additional 10 feet.</p>\n<p><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for every two slot levels above 2nd.</p>\n<hr style=\"border-top: 1px solid var(--color-border-light-primary); border-bottom: 1px solid var(--color-border-light-highlight);\" />\n<p><strong>FoundryVTT</strong>: This spell will create a temporary melee item that can be used to make attacks normally.&nbsp; The deletionon release is not automated and neither is the resummon with a bonus action.&nbsp;</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 242",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 10,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 2,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "Leaf of sumac",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "Hbbgg0VPMOMqUVyZ",
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "changes": [
        {
          "key": "ATL.light.dim",
          "mode": 2,
          "value": "20",
          "priority": "20"
        },
        {
          "key": "ATL.light.bright",
          "mode": 2,
          "value": "10",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/enchant-orange-2.jpg",
      "label": "Flame Blade",
      "tint": null,
      "transfer": false,
      "selectedKey": [
        "ATL.light.dim",
        "ATL.light.bright"
      ]
    }
  ],
  "flags": {
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "core": {
      "sourceId": "Item.0r4QmdC8ZIFaryNp"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Flame Blade",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Flame_Blade.0.1.js\"\nconst TL = 5;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implment the Flame Blade spell, key steps:\n * \n * 1. Copy the Flame Blade from items directory to this actor\n * 2. Scale flame blade for upcast spell\n * 3. Link the concentration and flame blade effect so they end together.\n * 4. Delete the flame blade item when the effect is removed (doOff)\n * \n * 11/15/23 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.log(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_LEVEL = L_ARG?.spellLevel;\nconst SPELL_NAME = `Flame Blade`\nconst TEMPLATE_NAME = `%%${SPELL_NAME}%%`\nconst ATTACK_ITEM = `${aToken.name}'s ${SPELL_NAME}`\nconst NUM_DICE = 2 + Math.floor(SPELL_LEVEL/2) // 3 at 2nd level, 4 at 4th level, and so on\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\n// if (args[0] === \"on\") await doOn({ traceLvl: TL });                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.log(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    // This is always cast of the aActor\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return (false);\n    //----------------------------------------------------------------------------------------------------------\n    // Remove any preexisting copies of the temporary item\n    //\n    await jez.deleteItems(ATTACK_ITEM, \"weapon\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Slap the template item onto the actor\n    //\n    await jez.itemAddToActor(aToken, TEMPLATE_NAME)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the item's name and extract the comments from the description\n    //\n    let itemUpdate = {\n        name: ATTACK_ITEM,                 // Change to actor specific name for temp item\n    }\n    await jez.itemUpdateOnActor(aToken, TEMPLATE_NAME, itemUpdate, \"weapon\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Grab the data for the new item from the actor\n    //\n    let getItem = await jez.itemFindOnActor(aToken, ATTACK_ITEM, \"weapon\");\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the description field, replacing tokens\n    //\n    let description = getItem.data.data.description.value\n    description = description.replace(/%NUMDICE%/g, `${NUM_DICE}`);         // Replace %NUMDICE%\n    description = description.replace(/%ATOKEN%/g, `${aToken.name}`);       // Replace %ATOKEN%\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build a new itemUpdate Object\n    //\n    itemUpdate = {\n        data: { \n            description: { \n                value: description \n            },\n            damage: {\n                parts: [[`${NUM_DICE}d8[fire]`,'fire']]\n            }\n        },  \n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the item with new information\n    //\n    await jez.itemUpdateOnActor(aToken, ATTACK_ITEM, itemUpdate, \"weapon\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Post about item added\n    //\n    jez.badNews(`Added ${ATTACK_ITEM} as a weapon to ${aToken.name}`, \"i\");\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Pair the new debuff with concentration\n    //  \n    // await jez.wait(250)\n    jez.pairEffectsAsGM(aActor, \"Concentrating\", aActor, SPELL_NAME)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    msg = `${ATTACK_ITEM} springs into existance and is now wielded by ${aToken.name}`\n    postResults(msg)\n    if (TL > 0) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //----------------------------------------------------------------------------------------------------------\n    // Remove any preexisting copies of the temporary item\n    //\n    await jez.deleteItems(ATTACK_ITEM, \"weapon\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    if (TL > 1) jez.log(`${TAG} --- Finished ---`);\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}