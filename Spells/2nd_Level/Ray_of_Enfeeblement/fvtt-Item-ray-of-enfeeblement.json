{
  "name": "Ray of Enfeeblement",
  "type": "spell",
  "img": "icons/magic/light/beam-rays-green.webp",
  "data": {
    "description": {
      "value": "<p>A black beam of enervating energy springs from your finger toward a creature within range. Make a ranged spell attack against the target. On a hit, the target deals only <strong>half damage with weapon attacks that use Strength</strong> until the spell ends.</p>\n<p><span style=\"text-decoration:underline\">At the end of each of the target's turns</span>, it can make a Constitution saving throw against the spell. On a success, the spell ends.</p>\n<hr />\n<p><strong>FoundryVTT: </strong>The color of VFX varies with the icon, recognizing the following strings in the icon name: blue, yellow (blueyellow), green, teal (purpleteal), magenta (purpleteal)</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "rsak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 14,
      "scaling": "spell"
    },
    "level": 2,
    "school": "nec",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "6KcK4hcx29dSCuWH",
      "changes": [
        {
          "key": "flags.gm-notes.notes",
          "mode": 0,
          "value": "Half damage on mwak(str) and rwak(str)",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "@attributes.spelldc",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 60
      },
      "icon": "systems/dnd5e/icons/spells/beam-jade-2.jpg",
      "label": "Ray of Enfeeblement",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "endEveryTurn",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Short Rest"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "flags.gm-notes.notes",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false,
      "fumbleThreshold": null
    },
    "core": {
      "sourceId": "Item.6FVKg3CYGEGtDU4y"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Ray of Enfeeblement",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Ray_of_Enfeeblement.0.2.js\"\n/*****************************************************************************************\n * Implement Ray of Enfeeblement\n * \n * 02/18/22 0.1 Creation of Macro\n * 12/11/22 0.2 Add miss to VFX, pairing of concentration and effect and update logging\n *****************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //-----------------------------------------------------------------------------------------------------------------------------------\n if (TL>0) jez.trace(`${TAG} === Starting ===`);\n if (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set standard variables\n //\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor; \n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set Macro specific globals\n //\n\n //----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n// but only for OnUse invocation.\nif ((args[0]?.tag === \"OnUse\") && !preCheck()) return\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach({traceLvl:TL});\t\t\t\t\t    // DAE removal\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1)     // If not exactly one target, return\n        return jez.badNews(`Must target exactly one target.  ${args[0].targets.length} were targeted.`,'i')\n    return (true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n ***************************************************************************************************/\n// COOL-THING: Performs saving throw each round, removes effect on save.\nasync function doEach(options={}) {\n    const FUNCNAME = \"doEach(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Function values\n    //\n    const SAVE_DC = args[1]\n    const SAVE_TYPE = \"con\"\n    const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> to end <b>${aItem.name}'s effect.</b>`;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Perform the saving throw\n    //\n    let save = await aToken.actor.rollAbilitySave(SAVE_TYPE,{flavor:FLAVOR, chatMessage:true, fastforward:true});\n    if (save.total < SAVE_DC) {\n        if (TL>1) jez.trace(`${TAG} ${aToken.name} failed: ${SAVE_TYPE} ${save.total} vs DC${SAVE_DC}`)\n        msg = `${aToken.name} fails to clear effect of ${aItem.name} and is still doing half damage with strength based weapons.<br><br>\n        <b>FoundryVTT:</b> Manually handled.`\n        jez.postMessage({color:\"darkred\", fSize:14, msg:msg, title:`${aItem.name} effect remains`, token:aToken, icon:aActor.img})\n\n    } else {\n        if (TL>1) jez.trace(`${TAG} ${aToken.name} saved: ${SAVE_TYPE} ${save.total} vs DC${SAVE_DC}`)\n        const EFFECT_NAME = \"Ray of Enfeeblement\"\n        if (TL>1) jez.trace(`${TAG} Attempt to remove ${EFFECT_NAME} from ${aToken.name}.`)\n        let effectObj = aActor.effects.find(i => i.data.label === EFFECT_NAME);\n        if (effectObj) {\n            if (TL>1) jez.trace(`${TAG} Attempting to remove ${effectObj.id} from ${aActor.uuid}`)\n            MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: aActor.uuid, effects: [effectObj.id] });\n        }\n        msg = `${aToken.name} shook off the effects of ${aItem.name} and is no longer doing half damage with strength based weapons.`\n        jez.postMessage({color:\"purple\", fSize:14, msg:msg, title:`${aItem.name} effect removed`, token:aToken, icon:aActor.img})\n    }\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Function values\n    //\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    //-------------------------------------------------------------------------------------------------------------------------------\n    const MISSED = (args[0].hitTargets.length > 0 ) ? false : true\n    //-------------------------------------------------------------------------------------------------------------------------------\n    runVFX(aToken, tToken, MISSED)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If we scored a hit, need to pair the new effect and the concentratinf effect\n    //\n    if (!MISSED) jez.pairEffectsAsGM(aActor, \"Concentrating\", tToken.actor, \"Ray of Enfeeblement\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    msg = `${tToken.name} has been <b>enfeebled</b>.  It does 1/2 damage with strength based weapons while \n    affected by ${aItem.name}.<br><br><b>FoundryVTT</b>: This must be handled manually.`\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, {color:\"purple\", fSize:15, msg:msg, tag:\"saves\" })\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (TL>0) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Display the VFX for the beam\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nasync function runVFX(token1, token2, missed) {\n    if (TL>1) jez.trace(`${TAG} token1 ${token1.name}`, token1)\n    if (TL>1) jez.trace(`${TAG} token2 ${token2.name}`, token2)\n    const VFX_OPACITY = 1.0;\n    const VFX_SCALE = 1.0;\n    const VFX_NAME = `${MACRO}`\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Pick a color based on a color string found in the icon's name.\n    // Available VFX colors: blue, blueyellow, green, purpleteal\n    // Recognized  strings: blue, yellow (blueyellow), green, teal (purpleteal), magenta (purpleteal)\n    let color = \"green\"\n    const IMAGE = aItem.img.toLowerCase()\n    if (IMAGE.includes(\"yellow\")) color = \"blueyellow\"\n    else if (IMAGE.includes(\"blue\")) color = \"blue\"\n    else if (IMAGE.includes(\"green\")) color = \"green\"\n    else if (IMAGE.includes(\"teal\")) color = \"purpleteal\"\n    else if (IMAGE.includes(\"magenta\")) color = \"purpleteal\"\n    else if (IMAGE.includes(\"orange\")) color = \"orange\"\n    else if (IMAGE.includes(\"purple\")) color = \"purple\"\n    //if (TL>1) jez.trace(`${TAG} Color ${color}`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Pick distance category to be used.\n    //\n    let distance = canvas.grid.measureDistance(token1, token2).toFixed(1);\n    if (TL>1) jez.trace(`${TAG} Distance between ${token1.name} and ${token2.name} is ${distance}.`)\n    let distCategory = \"05ft_600x400\"\n    if (distance > 15) distCategory = \"15ft_1000x400\"\n    if (distance > 30) distCategory = \"30ft_1600x400\"\n    if (distance > 45) distCategory = \"45ft_2200x400\"\n    if (distance > 60) distCategory = \"60ft_2800x400\"\n    if (distance > 90) distCategory = \"90ft_4000x400\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the effect\n    //\n    const ROOT = \"modules/jb2a_patreon/Library/Cantrip/Ray_Of_Frost/RayOfFrost_01_Regular\"\n    const VFX_STRING = `${ROOT}_${color}_${distCategory}.webm`\n    if (TL>1) jez.trace(`${TAG} VFX File Name: ${VFX_STRING}`)\n    new Sequence()\n    .effect()\n        .atLocation(token1)\n        .stretchTo(token2)\n        .file(VFX_STRING)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .missed(missed)\n        //.duration(4000)\n        .name(VFX_NAME)         // Give the effect a uniqueish name\n    .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}