{
  "name": "Magic Weapon",
  "type": "spell",
  "img": "icons/magic/fire/dagger-rune-enchant-flame-blue.webp",
  "data": {
    "description": {
      "value": "<p>You touch a nonmagical weapon. Until the spell ends, that weapon becomes a magic weapon with a +1 bonus to Attack rolls and Damage Rolls.</p>\n<p><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 4th level or higher, the bonus increases to +2. When you use a spell slot of 6th level or higher, the bonus increases to +3.</p>\n<hr />\n<p><strong>FoundryVTT:Â </strong>Be sure to pre-target before firing off this spell.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 257",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": 0,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 2,
    "school": "trs",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "xe1MqXU3Xz6XftZg",
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": false,
          "specialDuration": [],
          "macroRepeat": "none"
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "aura": "None",
          "radius": null
        }
      },
      "changes": [
        {
          "key": "macro.itemMacro",
          "value": "@item.level",
          "mode": 0,
          "priority": 0
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/enchant-blue-2.jpg",
      "label": "Magic Weapon",
      "tint": null,
      "transfer": false
    }
  ],
  "flags": {
    "dynamiceffects": {
      "equipActive": true,
      "alwaysActive": false,
      "effects": [
        {
          "modSpecKey": "macro.execute",
          "value": "\"Magic Weapon\" @target @item.level",
          "mode": "+",
          "targetSpecific": false,
          "id": 1,
          "itemId": "f1nQIsVPzwoUTqOt",
          "active": true,
          "_targets": []
        }
      ]
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Magic Weapon",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Magic_Weapon.0.3.js\"\n/*****************************************************************************************\n * Implement Magic Weapon based on an ItemMacro that I literally found, source unknown.\n * \n * 05/31/22 0.1 Creation of Macro\n * 10/15/22 0.2 Update format toward current standard, add VFX and link pair the effects\n * 10/15/22 0.3 Update to provide convenientDescription contents for the effects\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n//Make sure advanced-macros module is active\n//\nif (!game.modules.get(\"advanced-macros\")?.active) \n    return jez.badNews(\"Please enable the Advanced Macros module\",\"e\")\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = \"Magic Weapon\"\nfunction clamp(val, min, max) { return val > max ? max : val < min ? min : val }\nfunction setBonus(level) { return clamp(Math.floor(level/2), 1, 3) }\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff({traceLvl:TL});                   // DAE removal\nif (args[0] === \"on\") await doOn({traceLvl:TL});                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Ending ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function preCheck() {\n    if (args[0].targets.length !== 1)       // If not exactly one target \n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`,\"w\");\n    return(true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG}--- Finished ---`);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n * \n * Most significantly, remove concentrating effect if nothing was targeted.\n ***************************************************************************************************/\nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    // Verify something was targeted, if not clear concentrating and return a message of sadness\n    //\n    if (!await preCheck()) {\n        msg = `This spell requires that a target be selected before casting.`\n        postResults(msg);\n        await jez.wait(100)\n        let conc = await aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n        if (TL>1) jez.trace(`${TAG} Clearing concentration from ${aToken.name}`, conc)\n        await conc.delete()\n        return\n    }\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); \n    //-------------------------------------------------------------------------------------------------------------\n    // Pair the effects so concentrating will drop if the effect is terminated\n    //\n    await jez.wait(100)\n    jez.pairEffects(aToken, \"Concentrating\", tToken, EFFECT_NAME)\n    //-------------------------------------------------------------------------------------------------------------\n    // Launch the VFX on the target\n    //\n    runVFX(tToken)\n    //-----------------------------------------------------------------------------------------------\n    // Calculate the bonus for this casting, taking into account spell level scaling\n    //\n    // let spellLvl = Math.floor(LAST_ARG.spellLevel/2);\n    let bonus = setBonus(LAST_ARG.spellLevel)\n    //-----------------------------------------------------------------------------------------------\n    // Update the convenientDescription of the Concentrating effect to describe the spell\n    //\n    const CE_DESC = `Maintaining concentration on +${bonus} bonus to ${tToken.name}'s weapon`\n    let effect = await aActor.effects.find(i => i.data.label === \"Concentrating\");\n    effect.data.flags = { convenientDescription: CE_DESC }\n    await effect.data.update({ 'flags': effect.data.flags });\n    await effect.update({ 'changes': effect.data.changes });\n    //-----------------------------------------------------------------------------------------------\n    // Post completion message\n    //\n    msg = `${aToken.name} has given a weapon magical properties.`\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n * \n * Select for weapon and apply bonus based on spell level\n ***************************************************************************************************/\nasync function doOn(options={}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //---------------------------------------------------------------------------------------------------\n    // Seemingly the spell's cast at level is stashed in args[1], grab it as use it to scale the effect\n    //\n    const SPELL_LEVEL = args[1]\n    if (TL>2) jez.trace(`${TAG} SPELL_LEVEL from args[1]`, SPELL_LEVEL);\n    //---------------------------------------------------------------------------------------------------\n    // Set Function specific globals\n    //\n    let weapon_content = ``;\n    const DAE_ITEM = LAST_ARG.efData.flags.dae.itemData\n    if (TL>2) jez.trace(`${TAG} DAE_ITEM`, DAE_ITEM);\n    let weapons = aActor.items.filter(i => i.data.type === `weapon`);\n    if (TL>2) jez.trace(`${TAG} weapons`,weapons);\n    //-----------------------------------------------------------------------------------------------\n    // Build HTML structure holding the target's weapons, EXAMPLE follows:\n    //\n    // weapon_content : <label class=\"radio-label\">\n    // <input type=\"radio\" name=\"weapon\" value=\"fUko1U9LGK8ENxwK\">\n    // <img src=\"/systems/dnd5e/icons/items/weapons/dagger.jpg\" style=\"border:0px; width: 50px; height:50px;\">\n    // Dagger\n    // </label><label class=\"radio-label\">\n    // <input type=\"radio\" name=\"weapon\" value=\"cyjcowc5fyqgdlg1\">\n    // <img src=\"/systems/dnd5e/icons/items/weapons/sword-long.jpg\" style=\"border:0px; width: 50px; height:50px;\">\n    // Longsword\n    // </label> \n    //\n    for (let weapon of weapons) {\n        weapon_content += `<label class=\"radio-label\">\n    <input type=\"radio\" name=\"weapon\" value=\"${weapon.id}\">\n    <img src=\"${weapon.img}\" style=\"border:0px; width: 50px; height:50px;\">\n    ${weapon.data.name}\n    </label>`;\n    }\n    if (TL>3) jez.trace(`${TAG} weapon_content`,weapon_content);\n    //-----------------------------------------------------------------------------------------------\n    // Build HTML defining the dialog\n    //\n    let content = `\n    <style>\n    .magicWeapon .form-group {\n        display: flex;\n        flex-wrap: wrap;\n        width: 100%;\n        align-items: flex-start;\n      }\n      \n      .magicWeapon .radio-label {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        justify-items: center;\n        flex: 1 0 25%;\n        line-height: normal;\n      }\n      \n      .magicWeapon .radio-label input {\n        display: none;\n      }\n      \n      .magicWeapon img {\n        border: 0px;\n        width: 50px;\n        height: 50px;\n        flex: 0 0 50px;\n        cursor: pointer;\n      }\n          \n      /* CHECKED STYLES */\n      .magicWeapon [type=radio]:checked + img {\n        outline: 2px solid #f00;\n      }\n    </style>\n    <form class=\"magicWeapon\">\n      <div class=\"form-group\" id=\"weapons\">\n          ${weapon_content}\n      </div>\n    </form>\n    `;\n    if (TL>3) jez.trace(`${TAG} content`,content);\n    //-----------------------------------------------------------------------------------------------\n    // Define the dialog to display\n    //\n    new Dialog({\n        content,\n        buttons:\n        {\n            Ok:\n            {\n                label: `Ok`,\n                callback: (html) => {\n                    //-------------------------------------------------------------------------------\n                    // Define a bunch of important variables\n                    //\n                    let itemId = $(\"input[type='radio'][name='weapon']:checked\").val();\n                    let weaponItem = aActor.items.get(itemId);\n                    let copy_item = duplicate(weaponItem);\n                    let bonus = setBonus(SPELL_LEVEL)\n                    let wpDamage = copy_item.data.damage.parts[0][0];\n                    let verDamage = copy_item.data.damage.versatile;\n                    if (TL>2) jez.trace(`${TAG} === Callback Values ---`, \"itemId\", itemId, \n                        \"weaponItem\", weaponItem, \"copy_item\", copy_item,  \n                        \"bonus\", bonus, \"wpDamage\", wpDamage, \"verDamage\", verDamage)\n                    //-------------------------------------------------------------------------------\n                    // Set flag so that the magic can be reversed\n                    //\n                    let flagContent = {\n                        damage: weaponItem.data.data.attackBonus,\n                        weapon: itemId,\n                        weaponDmg: wpDamage,\n                        verDmg: verDamage,\n                        mgc: copy_item.data.properties.mgc\n                    }\n                    DAE.setFlag(aActor, `magicWeapon`, flagContent);\n                    if (TL > 2) jez.trace(`${TAG} magicWeapon flag set on ${aActor.name}`,flagContent)\n                    //-------------------------------------------------------------------------------\n                    // Update our in memory copy of the weapon\n                    //\n                    if (copy_item.data.attackBonus === \"\") copy_item.data.attackBonus = \"0\"\n                    copy_item.data.attackBonus = `${parseInt(copy_item.data.attackBonus) + bonus}`;\n                    copy_item.data.damage.parts[0][0] = (wpDamage + \" + \" + bonus);\n                    copy_item.data.properties.mgc = true\n                    if (verDamage !== \"\" && verDamage !== null) \n                        copy_item.data.damage.versatile = (verDamage + \" + \" + bonus);\n                    //-------------------------------------------------------------------------------\n                    // Update the \"real\" weapon\n                    //\n                    aActor.updateEmbeddedDocuments(\"Item\", [copy_item]);\n                    //-----------------------------------------------------------------------------------------------\n                    // Seach the target actor to find the just added effect\n                    let effect = aActor.effects.find(i => i.data.label === EFFECT_NAME);\n                    //-----------------------------------------------------------------------------------------------\n                    // Define the desired modification to the changes data\n                    const CE_DESC = `${weaponItem.name} has been enchanted with a +${bonus} bonus`\n                    effect.data.flags = { convenientDescription: CE_DESC }\n                    effect.data.update({ 'flags': effect.data.flags });\n                    effect.update({ 'changes': effect.data.changes });\n                }\n            },\n            Cancel:\n            {\n                label: `Cancel`\n            }\n        }\n    }).render(true);\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n * \n * Revert weapon and unset flag.\n ***************************************************************************************************/\nasync function doOff(options={}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // Grab the flag value object that needs to be restored from the stored flag\n    //\n    const FLAG_VAL = DAE.getFlag(aActor, 'magicWeapon');\n    if (TL > 2) jez.trace(`${TAG} Flag value object`, FLAG_VAL);\n    if (!FLAG_VAL) return jez.trace(`${TAG} No flag containing previous data found`)\n    //-----------------------------------------------------------------------------------------------\n    // Destructure the flag (Furnace was tossing an error when compound statement was used)\n    //\n    let damage = FLAG_VAL.damage\n    let weapon = FLAG_VAL.weapon\n    let weaponDmg = FLAG_VAL.weaponDmg\n    let verDmg = FLAG_VAL.verDmg\n    let mgc = FLAG_VAL.mgc\n    if (TL > 1) jez.trace(`${TAG} Flag values`,\n        \"damage\", damage, \"weapon\", weapon, \"weaponDmg\", weaponDmg, \"verDmg\", verDmg, \"mgc\", mgc);\n    if (!weapon) return jez.badNews(`No weapon found on magic weapon flag, can not proceed`,\"e\")\n    //-----------------------------------------------------------------------------------------------\n    // Read the data for our weapon from the actor\n    //\n    let weaponItem = aActor.items.get(weapon);\n    if (TL > 2) jez.trace(`${TAG} weaponItem before reversal`,weaponItem)\n    if (!weaponItem) return jez.badNews(`Weapon \"${weapon}\" not found on ${aToken.name}`,\"e\")\n    //-----------------------------------------------------------------------------------------------\n    // Duplicate the weapon data and update fields\n    //\n    let copy_item = duplicate(weaponItem);\n    copy_item.data.attackBonus = damage;\n    copy_item.data.damage.parts[0][0] = weaponDmg;\n    copy_item.data.properties.mgc = mgc\n    if (verDmg !== \"\" && verDmg !== null) copy_item.data.damage.versatile = verDmg;\n    if (TL > 2) jez.trace(`${TAG} copy of the weapon after update`,copy_item)\n    //-----------------------------------------------------------------------------------------------\n    // Update the weapon back to original values and clear the flag\n    //\n    aActor.updateEmbeddedDocuments(\"Item\", [copy_item]);\n    DAE.unsetFlag(aActor, `magicWeapon`);\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/***************************************************************************************************\n * Run VFX on Target\n ***************************************************************************************************/\n async function runVFX(target) {\n    const VFX_LOOP = \"modules/jb2a_patreon/Library/1st_Level/Cure_Wounds/CureWounds_01_*_400x400.webm\"\n    new Sequence()\n        .effect()\n        .fadeIn(1000)\n        .duration(8000)\n        .fadeOut(1000)\n        .file(VFX_LOOP)\n        .atLocation(target)\n        .scaleToObject(2.0)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.Dynamic-Effects-SRD.DAE SRD Spells.SP66bVwMD1PYlySJ"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}