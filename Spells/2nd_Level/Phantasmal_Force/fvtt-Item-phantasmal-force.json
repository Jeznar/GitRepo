{
  "name": "Phantasmal Force",
  "type": "spell",
  "img": "systems/dnd5e/icons/skills/blue_15.jpg",
  "data": {
    "description": {
      "value": "<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>You craft an illusion that takes root in the mind of <strong>a creature</strong> that you can see within range. The target must make an <strong>Intelligence saving throw</strong>. On a failed save, you create a phantasmal object, creature, or other visible phenomenon of your choice that is no larger than a <strong>10-foot cube</strong> and that is perceivable <strong>only to the target</strong> for the duration. This spell has no effect on undead or constructs.</p>\n<p>See <a href=\"https://www.dndbeyond.com/spells/phantasmal-force\" target=\"_blank\" rel=\"noopener\">D&amp;D Beyond for more details</a></p>\n<p>Each round on your turn, <strong>the phantasm can deal</strong>&nbsp;<strong style=\"font-family: var(--font-primary); font-size: var(--font-size-14);\">1d6 [[/roll 1d6]]{Psychic Damage}</strong><strong style=\"font-family: var(--font-primary); font-size: var(--font-size-14);\">&nbsp;to the target if it is in the phantasm&rsquo;s area or within 5 feet of the phantasm</strong><span style=\"font-family: var(--font-primary); font-size: var(--font-size-14);\">, provided that the illusion is of a creature or hazard that could logically deal damage, such as by attacking. The target perceives the damage as a type appropriate to the illusion.</span></p>\n<hr />\n<p><strong>FoundryVTT</strong>: This spell is not automated other than managing a marker for the area of effect on the scene.</p>",
      "chat": "<p>You craft an illusion that takes root in the mind of a creature that you can see within range. The target must make an Intelligence saving throw. On a failed save, you create a phantasmal object, creature, or other visible phenomenon of your choice that is no larger than a 10-foot cube and that is perceivable only to the target for the duration. This spell has no effect on undead or constructs.<br /><br />The phantasm includes sound, temperature, and other stimuli, also evident only to the creature.<br /><br />The target can use its action to examine the phantasm with an Intelligence (Investigation) check against your spell save DC. If the check succeeds, the target realizes that the phantasm is an illusion, and the spell ends.<br /><br />While a target is affected by the spell, the target treats the phantasm as if it were real. The target rationalizes any illogical outcomes from interacting with the phantasm. For example, a target attempting to walk across a phantasmal bridge that spans a chasm falls once it steps onto the bridge. If the target survives the fall, it still believes that the bridge exists and comes up with some other explanation for its fall - it was pushed, it slipped, or a strong wind might have knocked it off.<br /><br />An affected target is so convinced of the phantasm’s reality that it can even take damage from the illusion. A phantasm created to appear as a creature can attack the target. Similarly, a phantasm created to appear as fire, a pool of acid, or lava can burn the target. Each round on your turn, the phantasm can deal 1d6 psychic damage to the target if it is in the phantasm’s area or within 5 feet of the phantasm, provided that the illusion is of a creature or hazard that could logically deal damage, such as by attacking. The target perceives the damage as a type appropriate to the illusion.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 264",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": 0,
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "int",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "ill",
    "components": {
      "value": "a bit of fleece",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "a bit of fleece",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "kx4c09x8w93aewqb",
      "changes": [],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/skills/blue_15.jpg",
      "label": "Phantasmal Force",
      "transfer": false,
      "flags": {}
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 175441,
      "definitionId": 2332,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 264,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control",
        "Deception"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_kw1jjhsz8u"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.C37pJ5HSeOXVZjLZ"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro,[templatePlaced]Run_RuneVFX_onSelf"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Phantasmal Force",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Phantasmal_Force.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Does some house keeping for the Phantasmal Force Spell.  Specifically:\n * \n * 1. If nothing was targeted, remove concentration and display an error message\n * 2. If the target made its save, remove concentration and display a message\n * 3. Pair the newly applied effect and concentration\n * 4. Update the convenientDescription of concentrating on caster\n * 5. Update the convenientDescription on the target\n * 6. Use jez.spawnAt (Warpgate wrapper) to spawn in an actor to represent the phantasmal effect\n * 7. Add effect to concentrating effect to remove summoned token on concentration drop\n * \n * \n * 10/20/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = \"Phantasmal Force\"\nlet ceDesc = \"\"\nconst MINION = EFFECT_NAME\nconst ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\nconst SPELL_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 60\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\n//if (args[0] === \"on\") await doOn({traceLvl:TL});              // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });     // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff();                           // Remove the image when effect ends\n\nif (TL > 1) jez.trace(`=== Finished === ${MACRONAME} ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function preCheck() {\n    if (args[0].targets.length !== 1)       // If not exactly one target \n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, \"w\");\n    return (true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set On\n * This runs on actor that has the affected applied to it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\n// async function doOn(options={}) {\n//     const FUNCNAME = \"doOn()\";\n//     const FNAME = FUNCNAME.split(\"(\")[0] \n//     const TAG = `${MACRO} ${FNAME} |`\n//     const TL = options.traceLvl ?? 0\n//     if (TL>0) jez.trace(`${TAG} --- Starting ---`);\n//     //-----------------------------------------------------------------------------------------------\n//     // Comments, perhaps\n//     //\n//     if (TL>3) jez.trace(`${TAG} | More Detailed Trace Info.`)\n\n//     if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n//     return true;\n// }\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------\n    // 1. Make sure we had a token targeted\n    //\n    if (!await preCheck()) {\n        clearEffect(aToken.id, \"Concentrating\")\n        msg = `Must target a creature to be effected to be effective.`\n        postResults(msg)\n        return (false);\n    }\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //----------------------------------------------------------------------------------\n    // 2. Make sure the target failed it's saving throw \n    //\n    if (LAST_ARG.failedSaves.length === 0) {                // Target made it's save\n        // clearEffect(aToken.id, \"Concentrating\")\n        if (TL > 2) jez.trace(`${TAG} Target ${tToken.name} made its saving throw`);\n        msg = `${tToken.name} shrugs off the effects of ${aToken.name}'s spell.`\n        postResults(msg)\n        return;\n    }\n    //-----------------------------------------------------------------------------------------------\n    // 3. Pair the newly applied effect and concentration\n    //\n    await jez.wait(100)\n    jez.pairEffectsAsGM(aToken.id, \"Concentrating\", tToken.id, EFFECT_NAME)\n    //-----------------------------------------------------------------------------------------------\n    // 4. Update the convenientDescription of concentrating on caster\n    //\n    ceDesc = `Maintaining ${EFFECT_NAME} afflicting ${tToken.name}'s mind`\n    await jez.setCEDesc(aActor, \"Concentrating\", ceDesc, { traceLvl: TL });\n    //-----------------------------------------------------------------------------------------------\n    // 5. Update the convenientDescription on the target\n    //\n    ceDesc = `Afflicted by ${aToken.name}'s ${EFFECT_NAME}`\n    await jez.setCEDescAsGM(tToken.id, EFFECT_NAME, ceDesc, { traceLvl: TL });\n    //-----------------------------------------------------------------------------------------------\n    // 6. Use Warpgate to spawn in an actor to represent the phantasmal effect\n    //\n    let effectTokenId = await summonToken(tToken)\n    if (TL > 1) jez.trace(`${TAG} Token ID of spawned token`, effectTokenId);\n    //-----------------------------------------------------------------------------------------------\n    // 7. Add effect to concentrating effect to remove summoned token on concentration drop\n    //\n    // Need to modify recently added EFFECT_NAME to include a call to DeleteTokenMacro effectTokenId\n    //\n    modExistingEffect(aActor, \"Concentrating\", effectTokenId, {traceLvl:TL})\n\n    /***************************************************************************************************\n     * Modify existing effect to include a midi-qol overtime saving throw element\n     ***************************************************************************************************/\n    async function modExistingEffect(subject, EFFECT_NAME, tokenId, options = {}) {\n        const FUNCNAME = \"modExistingEffect(options = {})\";\n        const FNAME = FUNCNAME.split(\"(\")[0]\n        const TAG = `${MACRO} ${FNAME} |`\n        const TL = options.traceLvl ?? 0\n        if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n        if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"subject\", subject, \n            \"EFFECT_NAME\", EFFECT_NAME, \"tokenId\", tokenId, \"options\", options);\n        await jez.wait(100) // Chill for a moment\n        //---------------------------------------------------------------------------------------------------\n        // Set function variables\n        //\n        sActor = jez.getActor5eDataObj(subject)\n        //----------------------------------------------------------------------------------------------\n        // Seach the token to find the just added effect\n        //\n        let effect = await sActor.effects.find(i => i.data.label === EFFECT_NAME);\n        if (!effect) return jez.badNews(`${EFFECT} sadly not found`,'i')     \n        //----------------------------------------------------------------------------------------------\n        // Define the desired modification to existing effect. \n        //    \n        effect.data.changes.push({key: `macro.execute`, mode:jez.ADD, value:`DeleteTokenMacro ${tokenId}`, priority: 20})\n        //----------------------------------------------------------------------------------------------\n        // Apply the modification to existing effect\n        //\n        await effect.update({ 'changes': effect.data.changes });\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    if (TL > 3) jez.trace(`${TAG} More Detailed Trace Info.`)\n    msg = `While the spell persists, <b>${tToken.name}</b> is afflicted by <b>${aToken.name}'s</b>\n    phantasm that may do 1d6 psychic damage per round to it.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function summonToken(tToken) {\n    let argObj = {\n        defaultRange: SPELL_RANGE,\n        duration: 3000,                     // Duration of the intro VFX\n        introTime: 1000,                    // Amount of time to wait for Intro VFX\n        introVFX: '~Energy/SwirlingSparkles_01_Regular_${color}_400x400.webm', // default introVFX file\n        minionName: `Phantasm visible only to ${tToken.name}`,\n        name: aItem.name,                   // Name of action (message only), typically aItem.name\n        outroVFX: '~Fireworks/Firework*_02_Regular_${color}_600x600.webm', // default outroVFX file\n        scale: 0.7,\t\t\t\t\t\t\t\t// Default value but needs tuning at times\n        source: aToken,                     // Coords for source (with a center), typically aToken\n        templateName: `%${MINION}%`,        // Name of the actor in the actor directory\n        width: 2,                           // Width of token to be summoned\n        traceLvl: TL\n    }\n    //--------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    let summonData = await game.actors.getName(MINION)\n    argObj.img = summonData ? summonData.img : aItem.img\n    //--------------------------------------------------------------------------------------------------\n    // Do the actual summon\n    //\n    let returnedIds = await jez.spawnAt(MINION, aToken, aActor, aItem, argObj)\n    if (TL > 1) jez.trace(`${TAG} Returned data 1 from spawnAt`, returnedIds[0]);\n    return returnedIds[0]\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Remove an effect from passed subject\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function clearEffect(subject, effectName, options = {}) {\n    const TL = options.traceLvl ?? 0\n    sActor = jez.getActor5eDataObj(subject)\n    const EFFECT = await aToken.actor.effects.find(i => i.data.label === effectName);\n    if (TL > 1) jez.trace(`${TAG} Attempting to clear ${effectName} from ${subject.name}`, EFFECT)\n    if (EFFECT) await EFFECT.delete()\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * When the effect ends, remove the token represented the phantasm on the scene\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n    if (TL > 1) jez.trace(\"Token to dismiss\", args[1])\n    warpgate.dismiss(args[1], game.scenes.viewed.id)\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}