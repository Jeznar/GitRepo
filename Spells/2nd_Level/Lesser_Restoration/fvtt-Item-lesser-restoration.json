{
  "name": "Lesser Restoration",
  "type": "spell",
  "img": "Icons_JGB/Spells/2nd_Level/Lesser_Restoration.png",
  "data": {
    "description": {
      "value": "<p>You touch a creature and can end either one disease or one condition afflicting it. The condition can be blinded, deafened, paralyzed, or poisoned.</p>",
      "chat": "<p>You touch a creature and can end either one disease or one condition afflicting it. The condition can be blinded, deafened, paralyzed, or poisoned.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 255",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "touch",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "heal",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "abj",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138386,
      "definitionId": 2164,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "class": "Druid",
        "level": null,
        "characterClassId": 64892372,
        "spellLevel": 2,
        "ability": "wis",
        "mod": 4,
        "dc": 14,
        "cantripBoost": false,
        "overrideDC": false,
        "id": 138388,
        "entityTypeId": 435869154,
        "healingBoost": 0,
        "lookupName": "generic",
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 255,
          "sourceType": 1
        }
      ],
      "tags": [
        "Healing"
      ],
      "pack": "world.ddb-darklands-spells",
      "originalItemName": "Lesser Restoration",
      "replaced": true
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Lesser Restoration",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Lesser_Restoration.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Import of Crymic's macro with some update to fit my world.\n * \n * Changed to use a radio dialog and to recognize cureable conditions within effects names.  That is\n * this allows curing of: \"Diseased\" & \"Diseased: Covid\" as seperate choices.\n * \n * 11/27/22 0.1 Creation from Crymic's 10/16/22 version with Foundry 10.0 support\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 3;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst CON_LIST = [\"Blinded\", \"Deafened\", \"Paralyzed\", \"Diseased\", \"Poisoned\"]; // Curable Conditions \n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function preCheck() {\n    if (args[0].targets.length !== 1)       // If not exactly one target \n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, \"w\");\n    return (true)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(LAST_ARG?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken.actor;\n    //-----------------------------------------------------------------------------------------------\n    // Build a list of effects that can be removed from those found on target\n    //\n    let effectList = tActor.effects.filter(checkConditions);\n    if (TL > 1) jez.trace(`${TAG} Conditions found that can be cured`, effectList)\n    function checkConditions(effects) {\n        for (let i = 0; i < CON_LIST.length; i++) {\n            if (effects.data.label.includes(CON_LIST[i])) {\n                if (TL > 3) jez.trace(`${TAG} Found cureable effect: ${effects.data.label}`, effects)\n                return effects\n            }\n        }\n        return null\n    }\n    if (TL > 1) jez.trace(`${TAG} ${effectList.length} Conditions found that can be cured`, effectList)\n    if (TL > 2) for (let i = 0; i < effectList.length; i++) \n        jez.trace(`${TAG} ${i + 1}. ${effectList[i].data.label}`)\n    //-----------------------------------------------------------------------------------------------\n    // Make sure at least one effect that can be cured was found\n    //\n    msg = `Nothing found on ${tToken.name} that can be cured by this spell.`\n    if (effectList.length === 0) return jez.badNews(msg, 'i')\n    //-----------------------------------------------------------------------------------------------\n    // Build some variables for the dialog\n    //\n    let queryText = \"Select the condition that you would like to cure.\"\n    let template = `<div>\n    <label>${queryText}</label>\n    <div class=\"form-group\" style=\"font-size: 14px; padding: 5px; border: 2px solid silver; margin: 5px;\">`\n    for (let option of effectList) {\n        console.log(`=== option`, option)\n        template += `<input type=\"radio\" id=\"${option.data.label}\" \n                    name=\"selectedLine\" value=\"${option.data.label}\"> \n                    <label for=\"${option.data.label}\">${option.data.label}</label><br>`\n    }\n    template += `</div></div>`\n    //-----------------------------------------------------------------------------------------------\n    // Pop a radio dialog and do the cleansing\n    //\n    new Dialog({\n        title: `${aItem.name} : ${tToken.name}`,\n        content: template,\n        buttons: {\n            yes: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: 'Remove it!',\n                callback: async (html) => {\n                    // let element = html.find('#element').val();\n                    let element = html.find(\"[name=selectedLine]:checked\").val();\n                    let effect = tActor.effects.find(i => i.data.label === element);\n                    let chatMessage = game.messages.get(LAST_ARG.itemCardId);\n                    let chatContent = `<div class=\"midi-qol-nobox\"><div class=\"midi-qol-flex-container\"><div>Cures ${element}:</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${tToken.data._id}\"> ${tToken.name}</div><div><img src=\"${tToken.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></img></div></div></div>`;\n                    let content = duplicate(chatMessage.data.content);\n                    let searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\n                    let replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${chatContent}`;\n                    content = content.replace(searchString, replaceString);\n                    await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tActor.uuid, effects: [effect.id] });\n                    await chatMessage.update({ content: content });\n                    await ui.chat.scrollBottom();\n                }\n            }\n        },\n        default: \"yes\"\n    }).render(true);\n    //-----------------------------------------------------------------------------------------------\n    // All Done\n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "core": {
      "sourceId": "Item.Nsg10SQL9lcKKJZT"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "autoanimations": {
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false,
        "enableCustom01": false,
        "loops": 3,
        "loopDelay": 250,
        "scale": 1.5,
        "staticType": "target",
        "variant": "01",
        "repeat": 3,
        "delay": 250,
        "enableCustom": false,
        "customPath": "",
        "menuType": "spell",
        "opacity": null,
        "unbindAlpha": false,
        "unbindVisibility": false,
        "persistent": false
      },
      "override": true,
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "animType": "static",
      "animName": "generichealing",
      "color": "purple",
      "explosion": false,
      "spellVar": "01",
      "below": false,
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "animation": "generichealing",
      "explosions": {
        "enable": false
      },
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      },
      "macro": {
        "enable": false
      },
      "preview": false,
      "levels3d": {
        "type": ""
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}