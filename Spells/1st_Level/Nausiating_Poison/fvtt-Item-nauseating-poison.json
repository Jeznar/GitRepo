{
  "name": "Nauseating Poison",
  "type": "spell",
  "img": "Icons_JGB/Spells/1st%20Level/Poison.png",
  "data": {
    "description": {
      "value": "<p><em>You shroud your hand, a weapon you are holding, or a natural weapon in dark ichorous miasma</em>.</p>\n<p>After casting this spell, if you make a successful melee spell attack, unarmed strike or a melee weapon attack, the target takes an additional <strong>1d8 poison </strong>damage and must make a <strong>Constitution saving throw</strong>. On a failed save, the target <strong>becomes poisoned </strong>until the end of your next turn.</p>\n<p>The spell ends after <span style=\"text-decoration: underline;\">dealing damage</span>, or at the <span style=\"text-decoration: underline;\">start of your next turn,</span> whichever occurs first.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This is automated.</p>\n<h4 id=\"occultist-spell-list-casting-compendium-electrify\"></h4>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Kibbles Occultist",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "round"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "nec",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "Piece of rotten meat",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Nauseating Poison",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Nausinating Poison.0.4.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Homebrew Spell from Occultist list\n * \n *  You shroud your hand, a weapon you are holding, or a natural weapon in dark ichorous \n *  miasma. After casting this spell, if you make a successful melee spell attack, unarmed \n *  strike or a melee weapon attack, the target takes an additional 1d8 poison damage and \n *  must make a Constitution saving throw. On a failed save, the target becomes poisoned \n *  until the end of your next turn.\n * \n *  The spell ends after dealing damage, or at the start of your next turn, whichever \n *  occurs first.\n * \n * 03/12/22 0.1 Creation of Macro\n * 07/09/22 0.2 Replace CUB.addCondition with CE\n * 07/31/22 0.3 Add convenientDescription\n * 11/01/22 0.4 Added MSAK as triggering action\n * 12/17/22 0.5 Update logging and general style\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst LAST_ARG = args[args.length - 1];\nconst SAVE_DC = aToken.actor.data.data.attributes.spelldc;\nconst SAVE_TYPE = \"con\";\nconst COND_APPLIED = \"Poisoned\"\nconst COND_ICON = aItem.img\nconst DAM_TYPE = \"poison\";\nconst SPELL_LVL = LAST_ARG?.spellLevel ? LAST_ARG.spellLevel : 2\nconst TEMP_SPELL = \"Shocking Grasp\"               // Name as expected in Items Directory \nconst NEW_SPELL = `${MACRO}'s ${TEMP_SPELL}`       // Name of item in actor's spell book\nconst DICE_TYPE = \"d8\"\nlet returnFunc = null\nif (TL > 1) jez.trace(`${TAG} CONSTANTS Set`, \"GAME_RND\", GAME_RND, \"SAVE_DC\", SAVE_DC, \"SAVE_TYPE\", SAVE_TYPE,\n    \"COND_ICON\", COND_ICON, \"DAM_TYPE\", DAM_TYPE, \"SPELL_LVL\", SPELL_LVL)\n//-----------------------------------------------------------------------------------------------------------------------------------\n// VFX Settings\n//\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_BEAM = \"jb2a.bolt.poison.green\"\nconst VFX_CASTER = \"jb2a.icon.poison.dark_green\"\nconst VFX_OPACITY = 1.0;\nconst VFX_SCALE = 1.1;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\n// DamageBonus must return a function to the caller\nif (args[0]?.tag === \"DamageBonus\") return (doBonusDamage({ traceLvl: TL }));\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    let existingEffect = await aToken.actor.effects.find(ef => ef.data.label === aItem.name);\n    if (existingEffect) {\n        msg = `<b>${aToken.name}</b> already has ${aItem.name}. Terminating.`;\n        ui.notifications.warn(msg)\n        postResults(msg);\n        return\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_CASTER)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .scaleIn(0.1, 3000)\n        .opacity(VFX_OPACITY)\n        //.repeats(3,1000)\n        .fadeIn(1000)\n        .waitUntilFinished(-500)\n        .effect()\n        .file(VFX_CASTER)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(true)\n        .persist()\n        //.repeats(3,1000)\n        .fadeOut(2000)\n        .scaleOut(0.5, 2000)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define and apply the effect\n    // \n    const C_DESC = `Next melee spell, unarmed, or melee weapon hit does extra damage and CON save or poisoned.`\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: 0, value: `ItemMacro.${aItem.name}`, priority: 20 },\n            { key: \"flags.midi-qol.itemDetails\", mode: 0, value: `${LAST_ARG.uuid}`, priority: 20 },\n            { key: \"macro.itemMacro\", mode: jez.CUSTOM, value: \"arbitrary_paramater\", priority: 20 },\n        ],\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        duration: { rounds: 1, seconds: 6, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: {\n            dae: { itemData: aItem, specialDuration: [\"1Hit:mwak\"] },\n            convenientDescription: C_DESC\n        },\n        icon: aItem.img,\n        label: aItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: effectData });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Post completion message\n    // \n    msg = `${aToken.name} shrouds her/his hand, a held weapon, or a natural weapon in dark ichorous miasma.`\n    await jez.addMessage(game.messages.get(args[args.length - 1].itemCardId),\n        { color: \"green\", fSize: 14, msg: msg, tag: \"saves\" })\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"doBonusDamage\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doBonusDamage(options={}) {\n    const FUNCNAME = \"doBonusDamage(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Only applies to melee weapon and spell attacks\n    // Action Types: mwak, msak, rwak, rsak\n    if (TL > 1) jez.trace(`${TAG} ----- LAST_ARG.item.data.actionType`, LAST_ARG.item.data.actionType)\n    let actionType = LAST_ARG.item.data.actionType\n    if (!(actionType === \"mwak\" || actionType === \"msak\"))\n        return jez.badNews(`<b>${actionType.toUpperCase()}</b> action does not trigger ${aItem.name} damage.`, 'i')\n    let tToken = canvas.tokens.get(LAST_ARG.hitTargets[0].id);\n    if (TL > 1) jez.trace(`${TAG} tToken`, tToken)\n    let itemUuid = getProperty(LAST_ARG.actor.flags, \"midi-qol.itemDetails\");\n    // let itemN = await fromUuid(itemUuid);\n    let itemN = MACRO\n    if (TL > 1) jez.trace(`${TAG} itemN =====>`, itemN)\n    let numDice = LAST_ARG.isCritical ? 2 : 1;\n    await jez.wait(500);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Launch VFX on target\n    // \n    new Sequence()\n        .effect()\n        .atLocation(aToken)\n        .stretchTo(tToken)\n        .scale(1)\n        .file(VFX_BEAM)\n        .waitUntilFinished(-500)\n        .belowTokens(false)\n        .effect()\n        .atLocation(tToken)\n        .fadeIn(1000)\n        .scaleIn(0.1, 1000)\n        .fadeOut(2000)\n        .scaleIn(0.1, 2000)\n        //.repeats(3,1500)\n        .scale(VFX_SCALE)\n        .file(VFX_CASTER)\n        .play()\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Roll that sweet, sweet save\n    //   \n    const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} DC${SAVE_DC} to avoid ${MACRO}'s ${COND_APPLIED}`;\n    let saveRoll = (await tToken.actor.rollAbilitySave(\"con\", { flavor: FLAVOR }))\n    if (TL > 1) jez.trace(`${TAG} saveRoll`, saveRoll)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply COND_APPLIED condition if save is failed, modifying appropriately\n    //\n    if (saveRoll.total < SAVE_DC) {\n        if (TL > 1) jez.trace(`${TAG} Target ${tToken.name} failed its save`);\n        // Retrieve as an object, the COND_APPLIED Convenient Effect for modification\n        let effectData = game.dfreds.effectInterface.findEffectByName(COND_APPLIED).convertToObject();\n        // If debugging, dump out the effect data object\n        if (TL > 3) jez.trace(`${TAG} effectData objtained`, effectData)\n        // The standard Poisoned CE lacks a \"dae\" field in its flags, so it needs to be added\n        effectData.flags.dae = { specialDuration: [\"turnEndSource\"] }\n        // Change the icon used to one specific to this spell\n        // effectData.icon = POIS_ICON\n        // Change the convenient description to one specific to this spell\n        effectData.description = \"Poisoned by Nauseating Poison, disadvantage on attack rolls and ability checks.\"\n        // If debugging, dump out the effect data object after the updates\n        if (TL > 3) jez.trace(`${TAG} updated ===>`, effectData)\n        // Slap the updated CE onto our targeted actor\n        game.dfreds.effectInterface.addEffectWith({ effectData: effectData, uuid: tToken.actor.uuid, origin: aActor.uuid });\n        // Set msg with result for later display\n        msg = `<b>${tToken.name}</b> has been poisoned by the effects of ${aItem.name} for one turn.`\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Dig through the chat history, to find the message that should have new message added...but don't use it?\n    //\n    let msgHistory = [];\n    game.messages.reduce((list, message) => {\n        if (message.data?.flags[\"midi-qol\"]?.itemId === aItem._id && message.data.speaker.token === aToken.id) list.push(message.id);\n        return list;\n    }, msgHistory);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Return Extra Damage function\n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`, \"numDice\", numDice, \"DAM_TYPE\", DAM_TYPE, \"itemN\", itemN);\n    return { damageRoll: `${numDice}${DICE_TYPE}[${DAM_TYPE}]`, flavor: `(${itemN} (${CONFIG.DND5E.damageTypes[DAM_TYPE]}))` };\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Modify existing effect to include a special duration of turnStart  \n * \n *         \"On a failed save, the target becomes poisoned until the end of your next turn.\"\n * \n * Need to set condition added by cub to the origin correctly, something like this:\n *   effect.data.origin ==> Actor.aqNN90V6BjFcJpI5.Item.tMWjmgB2qKCTTVTR\n * \n * The aItem.UUID appears to contain this type of info:\n *           aItem.uuid ==> Actor.aqNN90V6BjFcJpI5.Item.tMWjmgB2qKCTTVTR\n * \n * Because this is being called as part of a doBonusDamage invocation it is extra funky.  Need to \n * access LAST_ARG, where the following appears to have potential:\n *     args[0].itemUuid ==> Actor.aqNN90V6BjFcJpI5.Item.pz9HMZ3rgkq2jme1\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n// async function modEffect(token5e, EFFECT) {\n//     const LAST_ARG = args[args.length - 1];\n//     if (TL>1) jez.trace(`${TAG} ------- modEffect(token5e, EFFECT) --------`, \"token5e\", token5e, \"EFFECT\", EFFECT)\n//     await jez.wait(500)\n//     let effect = await token5e.actor.effects.find(i => i.data.label === EFFECT);\n//     if (TL>1) jez.trace(`${TAG} ${EFFECT} >>> effect`, effect)\n//     if (TL>1) jez.trace(`${TAG} effect.data.flags.dae`, effect.data.flags.dae)\n//     if (effect.data.flags.dae === undefined) {\n//         if (TL>1) jez.trace(`${TAG} Adding DAE to our critter`)\n//         effect.data.flags.dae = {}\n//     } else if (TL>1) jez.trace(`${TAG} flags.dae already existed, party time?`)\n//     effect.data.flags.dae.specialDuration = [\"turnEndSource\"]\n//     const result = await effect.update({\n//         'flags.dae.specialDuration': effect.data.flags.dae.specialDuration,\n//         'origin': LAST_ARG.itemUuid\n//     });\n//     if (TL>1) jez.trace(`${TAG} ${EFFECT} >>> result`, result)\n//     if (result) if (TL>1) jez.trace(`${TAG} ${EFFECT} >>> Active Effect ${EFFECT} updated!`, result);\n//     else if (TL>1) jez.trace(`${TAG} ${EFFECT} >>> Active Effect not updated! =(`, result);\n// }\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // End the effect on the active token\n    //  \n    Sequencer.EffectManager.endEffects({ name: VFX_NAME, object: aToken });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Bye bye\n    //  \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.G5FwycTSjhpvAhqP"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}