{
  "name": "Shield",
  "type": "spell",
  "img": "Icons_JGB/Spells/1st%20Level/Shield.png",
  "data": {
    "description": {
      "value": "<p>An invisible barrier of magical force appears and protects you. Until the start of your next turn, you have a +5 bonus to AC, including against the triggering attack, and you take no damage from <strong>magic missile</strong>.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Defense against magic missles is not automated.</p>",
      "chat": "<p>An invisible barrier of magical force appears and protects you. Until the start of your next turn, you have a +5 bonus to AC, including against the triggering attack, and you take no damage from <strong>magic missile</strong>.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 275",
    "activation": {
      "type": "reaction",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "round"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "abj",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "Reaction to being hit or targeted by an attack",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "hzQdCAC3gFDfLREf",
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none",
          "specialDuration": [
            "turnStart"
          ],
          "macroRepeat": "none"
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "changes": [
        {
          "key": "data.attributes.ac.bonus",
          "mode": 2,
          "value": "+5",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "Shield-VFX",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "Icons_JGB/Spells/1st%20Level/Shield.png",
      "label": "Shield",
      "tint": null,
      "transfer": false,
      "selectedKey": [
        "data.attributes.ac.bonus",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 138701,
      "definitionId": 2247,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 275,
          "sourceType": 1
        }
      ],
      "tags": [
        "Warding"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "",
      "effectActivation": false
    },
    "cf": {
      "id": "temp_y8e7215chl"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.E4i30QraGzA06JTt"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Shield",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Shield.0.2\"\n/*****************************************************************************************\n * This is the shield spell macro built from a Sequencer example found at:\n * https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki/Dynamic-Active-Effects-&-JB2A-Shield\n * \n * JB2A Effects can be viewed at: https://www.jb2a.com/Library_Preview/\n * \n * 12/29/21 0.1 Creation of Macro\n * 01/23/22 0.2 Changed VFX color and placed beneath token\n *****************************************************************************************/\nconst DEBUG = true;\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlog(\"---------------------------------------------------------------------------\",\n    \"Starting\", `${MACRONAME} or ${MACRO}`);\nfor (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\n//---------------------------------------------------------------------------------------\n// Set some global variables and constants\n//\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\n\n//---------------------------------------------------------------------------------------\n// See https://gitlab.com/tposney/dae#lastarg for info on what is included in lastArg\n//\nconst lastArg = args[args.length - 1];\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\nconst EFFECT_NAME = aItem.name || MACRO || \"Shield\";\nconst EFFECT_ICON = \"Icons_JGB/Spells/1st%20Level/Shield.png\";\nconst VFX_INTRO = \"modules/jb2a_patreon/Library/1st_Level/Shield/Shield_01_Regular_Purple_Intro_400x400.webm\"\nconst VFX_LOOP  = \"modules/jb2a_patreon/Library/1st_Level/Shield/Shield_01_Regular_Purple_Loop_400x400.webm\";\nconst VFX_OUTRO = \"modules/jb2a_patreon/Library/1st_Level/Shield/Shield_01_Regular_Purple_OutroExplode_400x400.webm\";\n\nlog(\"------- Obtained Global Values -------\",\n    `Active Token (aToken) ${aToken.name}`, aToken,\n    `Active Item (aItem) ${aItem.name}`, aItem,\n    \"EFFECT_NAME\", EFFECT_NAME,\n    \"EFFECT_ICON\", EFFECT_ICON);\n\n//---------------------------------------------------------------------------------------\n// Do something Useful\n//\nif (args[0] === \"on\") doOn();          \t\t    // DAE Application\nif (args[0] === \"off\") doOff();        \t\t\t    // DAE removal\n\n//---------------------------------------------------------------------------------------\n// That's all folks\n//\nlog(\"---------------------------------------------------------------------------\",\n    \"Finishing\", MACRONAME);\nreturn;\n\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************/\n\n/***************************************************************************************\n * Perform the steps that runs when this macro is executed by DAE to add to target\n ***************************************************************************************/\n async function doOn() {\n    const FUNCNAME = \"doOn()\";\n    log(\"--------------On---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    for (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\n    new Sequence()\n    .effect()\n        .file(VFX_INTRO)\n        .attachTo(aToken)\n        .scale(0.5)\n        .waitUntilFinished(-500) // Negative wait time (ms) clips the effect to avoid fadeout\n    .effect()\n        .file(VFX_LOOP)\n        .attachTo(aToken)\n        .scale(0.5)\n        .belowTokens()\n        .persist()\n        .name(`Shield-${aToken.id}`)// Give the effect a uniqueish name\n        .fadeIn(300)                // Fade in for specified time in milliseconds\n        .fadeOut(300)               // Fade out for specified time in milliseconds\n        .extraEndDuration(800)      // Time padding on exit to connect to Outro effect\n    .play()\n\n    log(\"--------------On---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n /***************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************/\n  async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    log(\"--------------Off---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    for (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\n    Sequencer.EffectManager.endEffects({ name: `Shield-${aToken.id}`, object: aToken });\n\n    new Sequence()\n    .effect()\n        .file(VFX_OUTRO)\n        .scale(0.5)\n        .attachTo(aToken)\n    .play()\n\n    log(\"--------------Off---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n* DEBUG Logging\n* \n* If passed an odd number of arguments, put the first on a line by itself in the log,\n* otherwise print them to the log seperated by a colon.  \n* \n* If more than two arguments, add numbered continuation lines. \n***************************************************************************************/\nfunction log(...parms) {\n    if (!DEBUG) return;             // If DEBUG is false or null, then simply return\n    let numParms = parms.length;    // Number of parameters received\n    let i = 0;                      // Loop counter\n    let lines = 1;                  // Line counter \n\n    if (numParms % 2) {  // Odd number of arguments\n        console.log(parms[i++])\n        for ( i; i<numParms; i=i+2) console.log(` ${lines++})`, parms[i],\":\",parms[i+1]);\n    } else {            // Even number of arguments\n        console.log(parms[i],\":\",parms[i+1]);\n        i = 2;\n        for ( i; i<numParms; i=i+2) console.log(` ${lines++})`, parms[i],\":\",parms[i+1]);\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": {
      "killAnim": false,
      "below": false,
      "override": false,
      "targetToken": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      },
      "macro": {
        "enable": false
      },
      "animLevel": false,
      "options": {
        "ammo": false
      },
      "animType": "t1",
      "levels3d": {
        "type": ""
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}