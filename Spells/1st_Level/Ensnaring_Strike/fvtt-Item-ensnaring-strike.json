{
  "name": "Ensnaring Strike",
  "type": "spell",
  "img": "icons/magic/fire/projectile-arrow-fire-red-yellow.webp",
  "data": {
    "description": {
      "value": "<p>The next time you hit a creature with a weapon attack before this spell ends, a writhing mass of thorny vines appears at the point of impact, and the target must succeed on a Strength saving throw or be @JournalEntry[CZWEqV2uG9aDWJnD]{restrained} by the magical vines until the spell ends. A Large or larger creature has advantage on this saving throw. If the target succeeds on the save, the vines shrivel away.</p>\n<p>While restrained by this spell, the target takes 1d6 piercing damage at the start of each of its turns. A creature restrained by the vines or one that can touch the creature can use its action to make a Strength check against your spell save DC. On a success, the target is freed. </p>\n<p><strong>At Higher Levels. </strong>If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st.</p>",
      "chat": "<p>The next time you hit a creature with a weapon attack before this spell ends, a writhing mass of thorny vines appears at the point of impact, and the target must succeed on a Strength saving throw or be restrained by the magical vines until the spell ends. A Large or larger creature has advantage on this saving throw. If the target succeeds on the save, the vines shrivel away. <br /><br />While restrained by this spell, the target takes 1d6 piercing damage at the start of each of its turns. A creature restrained by the vines or one that can touch the creature can use its action to make a Strength check against your spell save DC. On a success, the target is freed. </p>\n<p><strong>At Higher Levels. </strong>If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 237",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 136715,
      "definitionId": 2315,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 237,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_y8e7215chl"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.00tKlcas0KQTvBdK"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Ensnaring Strike",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Ensnaring_Strike_0.6.js\"\n/*******************************************************************************************\n * Implement Ensnaring Strike\n * \n * Description: The next time you hit a creature with a weapon attack before this spell \n *   ends, a writhing mass of thorny vines appears at the point of impact, and the target \n *   must succeed on a Strength saving throw or be restrained by the magical vines until \n *   the spell ends. A Large or larger creature has advantage on this saving throw. If the \n *   target succeeds on the save, the vines shrivel away. \n * \n *   While restrained by this spell, the target takes 1d6 piercing damage at the start \n *   of each of its turns. A creature restrained by the vines or one that can touch the \n *   creature can use its action to make a Strength check against your spell save DC. \n *   On a success, the target is freed. \n * \n *   At Higher Levels. If you cast this spell using a spell slot of 2nd level or higher, \n *   the damage increases by 1d6 for each slot level above 1st.\n * \n * The following steps need to be accomplished:\n * 1. OnUse - add buff to the caster to transfer to the next creature hit with a weap attack.\n *    Modeling this on Searing_Smite.0.1\n *\n * \n * This will need an OnUse and a Each execution.\n * \n * 12/27/21 0.1 JGB Creation\n * 12/28/21 0.2 JGB Continued Development\n * 12/28/21 0.3 JGB Add dialog to make skill check to escape an option\n * 07/29/22 0.4 JGB Add convenientDescription, fixed bug from Midi change, paired effect\n * 12/06/22 0.5 JGB Problem discovered: Error: User Joe M. lacks permission to update Token \n * 12/08/22 0.6 JGB Several problems addresed\n *******************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //---------------------------------------------------------------------------------------------------\n if (TL>1) jez.trace(`${TAG} === Starting ===`);\n if (TL>2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n //---------------------------------------------------------------------------------------------------\n // Set standard variables\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor; \n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n //---------------------------------------------------------------------------------------------------\n // Set Macro specific globals\n //\nconst DEBUFF_NAME = \"Restrained\" // aItem.name || \"Nature's Wraith\";\nconst DEBUFF_ICON = \"modules/combat-utility-belt/icons/restrained.svg\"\nconst SAVE_TYPE = \"str\"\nconst JOURNAL_RESTRAINED = \"<b>@JournalEntry[CZWEqV2uG9aDWJnD]{restrained}</b>\"\n//-------------------------------------------------------------------------------\n// Depending on where invoked call appropriate function to do the work\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});      \nif (args[0] === \"on\") await doOn({traceLvl:TL});          \t\nif (args[0] === \"each\") await doEach({traceLvl:TL});\t\t\nif (args[0]?.tag === \"DamageBonus\") await doBonusDamage({traceLvl:TL}); \nif (TL>1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/***************************************************************************************\n*    END_OF_MAIN_MACRO_BODY\n*                                END_OF_MAIN_MACRO_BODY\n*                                                             END_OF_MAIN_MACRO_BODY\n***************************************************************************************/\n/**************************************************************************************\n* Execute code for a ItemMacro onUse\n***************************************************************************************/\nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    //\n    const SAVE_DC = aToken.actor.data.data.attributes.spelldc;\n    const SPELL_LVL = L_ARG.spellLevel\n    //-----------------------------------------------------------------------------------------------\n    //\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: jez.CUSTOM, value: `ItemMacro.${aItem.name}`, priority: 20 },\n            { key: \"flags.midi-qol.spellLevel\", mode: jez.OVERRIDE, value: `${SPELL_LVL}`, priority: 20 },\n            { key: \"flags.midi-qol.spellId\", mode: jez.OVERRIDE, value: `${L_ARG.uuid}`, priority: 20 },\n        ],\n        origin: L_ARG.uuid,\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { \n            dae: { itemData: aItem, specialDuration: [\"DamageDealt\"] },\n            convenientDescription: `Next weapon attack forces DC${SAVE_DC} STR Save or be Restrained and take DoT`\n         },\n        icon: aItem.img,\n        label: aItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: effectData });\n\n    //---------------------------------------------------------------------------------------\n    // Thats all folks\n    //\n    msg = `<p style=\"color:blue;font-size:14px;\">\n        <b>${aToken.name}</b> will attemt to apply ${JOURNAL_RESTRAINED} on next hit.  \n        Target may make a <b>DC${SAVE_DC}</b> ${CONFIG.DND5E.abilities[SAVE_TYPE]} save to avoid.\n        </p>`\n    postResults(msg);\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set On\n * This runs on actor that has the affected applied to it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \nasync function doOn(options={}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL>0) jez.trace(`${TAG} --- Starting ---`);\n    //-----------------------------------------------------------------------------------------------\n    //\n    const SAVE_DC = args[1];\n    //---------------------------------------------------------------------------------------\n    // If the target is large or larger, it should have advantage on its save\n    //\n    let targetSize = getSizeInfo(aToken);\n    let adv = false;\n    let flavor = `<b>${aToken.name}</b> attempts a \n    ${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> save to avoid <b>${DEBUFF_NAME}</b>\n    effect from ensnaring strike.`;\n    if (TL > 1) jez.trace(`${TAG} ${aToken.name} is ${targetSize.nameStr} with a value of ${targetSize.value}`)\n    if (targetSize.value > 3) {\n        adv = true\n        flavor += `<br><br>Roll is made with <b>advantage</b> as ${aToken.name} is <b>${targetSize.nameStr}</b>`;\n    }\n    if (TL > 1) jez.trace(`${TAG} *** Make save with advantage? ${adv}`, flavor);\n    //---------------------------------------------------------------------------------------\n    // Have the target roll its saving throw\n    //\n    let save = null\n    if (adv) save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: flavor, advantage: \"true\", chatMessage: true, fastforward: true })).total;\n    else save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: flavor, chatMessage: true, fastforward: true })).total;\n    if (TL > 1) jez.trace(`${TAG} Result of save roll`, save);\n    if (save >= SAVE_DC) {\n        if (TL > 1) jez.trace(`${TAG} save was made with a ${save}`);\n        postResults(`save was made`);\n        // remove the effect.\n    } else if (TL > 1) jez.trace(`${TAG} save failed with a ${save}`);\n    //---------------------------------------------------------------------------------------\n    // If the target made the save remove the recently aplied effect\n    //\n    if (save >= SAVE_DC) {\n        msg = `${aToken.name} made its save.  Rolling ${save} vs ${SAVE_DC} DC.`;\n        if (TL>0) jez.trace(`${TAG} ${msg}`)\n        await jez.wait(500)   // This pause allows the debuff to be placed by DAE before removal\n        if (TL > 1) jez.trace(`${TAG} After a brief pause, tToken.data`, aToken.data)\n        //----------------------------------------------------------------------------------\n        // Check for debuff matching DEBUFF_NAME.  If it exists, remove it.\n        //\n        if (TL > 1) jez.trace(`${TAG}  aToken.data.effects`, aToken.data.actorData.effects)\n        let existingEffect = aActor.effects.find(ef => ef.data.label === DEBUFF_NAME) ?? null;\n\n        if (existingEffect) {\n            msg = `${aToken.name} has ${DEBUFF_NAME} effect`;\n            if (TL>0) jez.trace(`${TAG} ${msg}`, existingEffect);\n            await existingEffect.delete();\n        } else {\n            msg = `${aToken.name} lacked ${DEBUFF_NAME} effect.`;\n            if (TL>0) jez.trace(`${TAG} ${msg}`)\n        }\n    }\n    else {\n        msg = `${aToken.name} failed its save.  Rolling ${save} vs DC${SAVE_DC}.`;\n        if (TL>0) jez.trace(`${TAG} ${msg}`)\n    }\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked each round by DAE\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doEach(options = {}) {\n    const FUNCNAME = \"doEach(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    //\n    const SAVE_DC = args[1];\n    //-----------------------------------------------------------------------------------------------\n    // Ask if ability check should be used to attempt to break the vines\n    // \n    let confirmation = await Dialog.confirm({\n        title: '${aToken.name} Spend Action to Break Vines?',\n        content: `<p>The nasty vines are keeping <b>${aToken.name}</b> restrained.  \n        Would you like to use your action this round to attempt to break the vines making a \n        <b>DC${SAVE_DC} Strength</b> check?</p>\n        <p>If so click <b>Yes</b>.</p>  \n        <p>If not click <b>No</b>.</p>`,\n    });\n    console.log(`confirmation`, confirmation)\n    //-----------------------------------------------------------------------------------------------\n    // If ignoring the vines, log it and return\n    // \n    if (!confirmation) { // Actor is ignoring the vines\n        if (TL > 0) jez.trace(`${TAG} \"Ignoring the vines\"`)\n        return\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Attempt escape\n    // \n    if (TL > 0) jez.trace(`${TAG} \"Attempting to break the vines\"`)\n    let flavor = `${aToken.name} uses this turn's <b>action</b> to attempt a \n        ${CONFIG.DND5E.abilities[SAVE_TYPE]} check vs <b>DC${SAVE_DC}</b> to end the \n        <b>${DEBUFF_NAME}</b> effect from ensnaring strike.`; // doesn't do anything -- midi sets\n    let check = (await aActor.rollAbilityTest(SAVE_TYPE, {\n        flavor: flavor,\n        chatMessage: true,\n        fastforward: true\n    })).total;\n    if (TL > 1) jez.trace(`${TAG} Result of check roll`, check);\n    //---------------------------------------------------------------------------------------\n    // If the target made the save remove the effect\n    //\n    if (check >= SAVE_DC) {\n        msg = `${aToken.name} made its check.  Rolling ${check} vs ${SAVE_DC} DC.`;\n        if (TL > 0) jez.trace(`${TAG} ${msg}`);\n        //----------------------------------------------------------------------------------\n        // Check for debuff matching DEBUFF_NAME.  If it exists, remove it.\n        //\n        if (TL > 1) jez.trace(`${TAG}  aToken.data.effects`, aToken.data.actorData.effects);\n        let existingEffect = aActor.effects.find(ef => ef.data.label === DEBUFF_NAME) ?? null;\n\n        if (existingEffect) {\n            msg = `${aToken.name} has ${DEBUFF_NAME} effect: `;\n            if (TL > 0) jez.trace(`${TAG} ${msg}`, existingEffect)\n            await existingEffect.delete();\n        } else {\n            msg = `${aToken.name} lacked ${DEBUFF_NAME} effect.`;\n            if (TL > 0) jez.trace(`${TAG} ${msg}`)\n        }\n    }\n    else {\n        msg = `${aToken.name} failed its check.  Rolling ${check} vs DC${SAVE_DC}.`;\n        if (TL > 0) jez.trace(`${TAG} ${msg}`)\n    }\n    //---------------------------------------------------------------------------------------\n    // Thats all\n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"doBonusDamage\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doBonusDamage(options = {}) {\n    const FUNCNAME = \"doBonusDamage(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    if (!oneTarget()) return;\n    if (![\"mwak\"].includes(L_ARG.item.data.actionType)) return {};\n    let target = canvas.tokens.get(L_ARG.hitTargets[0].id);\n    let spellLevel = getProperty(L_ARG.actor.flags, \"midi-qol.spellLevel\");\n    const SAVE_DC = aToken.actor.data.data.attributes.spelldc;\n    let spellUuid = getProperty(L_ARG.actor.flags, \"midi-qol.spellId\");\n    let spellItem = await fromUuid(getProperty(L_ARG.actor.flags, \"midi-qol.spellId\"));\n    let damageType = \"piercing\";\n    if (TL > 1) jez.trace(`${TAG} Input Info`, \"target    \", target, \"spellLevel\", spellLevel,\n        \"SAVE_DC   \", SAVE_DC, \"spellUuid \", spellUuid, \"spellItem \", spellItem, \"damageType\", damageType)\n    //-----------------------------------------------------------------------------------------------\n    // Apply the debuff to the target\n    //\n    let value = `turn=start,label=\"Ensnaring Strike\",damageRoll=${spellLevel}d6,damageType=${damageType}`\n    let effectData = [{\n        changes: [\n            { key: `flags.midi-qol.OverTime`, mode: jez.OVERRIDE, value: value, priority: 20 },\n            { key: \"data.attributes.movement.walk\", mode: jez.OVERRIDE, value: 1, priority: 20 },\n            { key: \"macro.itemMacro\", mode: jez.CUSTOM, value: SAVE_DC, priority: 20 },\n            { key: \"macro.CE\", mode: jez.CUSTOM, value: \"Restrained\", priority: 20 },\n        ],\n        origin: spellUuid,\n        flags: { \n            dae: { itemData: spellItem.data, macroRepeat: \"startEveryTurn\", token: target.uuid },\n            convenientDescription: `${DEBUFF_NAME} and taking Damage over Time`        \n        },\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        icon: spellItem.img,\n        label: spellItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.actor.uuid, effects: effectData });\n    // Bug Fix?  Crymic had the following line execute to remove concentration, which I think is an incorrect \n    // interpretation of the spell.  Dropping concentration should end the DoT.  Keeping this line in case I want\n    // to revert my change to Crymic's code.\n    //\n    // await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: aToken.actor.uuid, effects: [CONC.id] });\n    await jez.wait(100)\n    if (TL > 1) jez.trace(`${TAG} jez.pairEffectsAsGM(aActor, \"Concentrating\", target.actor, ${spellItem.name})`)\n    jez.pairEffectsAsGM(aActor, \"Concentrating\", target.actor, spellItem.name) // --> Permission problem for players\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return {\n        damageRoll: `${spellLevel}d6[${damageType}]`,\n        flavor: `(Ensnaring Strike (${CONFIG.DND5E.damageTypes[damageType]}))`\n    };\n}\n/************************************************************************\n * Verify exactly one target selected, boolean return\n*************************************************************************/\nfunction oneTarget() {\n    if (!game.user.targets) \n        return jez.badNews(`Targeted nothing, must target single token to be acted upon`,'w')\n    if (game.user.targets.ids.length != 1) \n        return jez.badNews(`Target a single token. Targeted ${game.user.targets.ids.length} tokens`,'w')\n    if (TL > 1) jez.trace(`${TAG}  targeting one target`);\n    return (true);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/****************************************************************************************\n * Return an object describing the size of a passed TokenID.  The object will contain:\n *   this.key     - short form of size used as a key to obtain other info\n *   this.value   - numeric value of size, 1 is tiny, 6 is gargantuan, 0 is error case\n *   this.namestr - size string in lowercase, e.g. medium\n *   this.nameStr - size string in mixedcase, e.g. Gargantuan\n ***************************************************************************************/\nfunction getSizeInfo(token5E) {\n    if (TL>1) jez.trace(`${TAG} (getSizeInfo(token5E)`, token5E)\n    class CreatureSizeInfos {\n        constructor(size) {\n            this.key = size;\n            switch (size) {\n                case \"tiny\": this.value = 1;\n                    this.namestr = \"tiny\";\n                    this.nameStr = \"Tiny\";\n                    break;\n                case \"sm\": this.value = 2;\n                    this.nameStr = \"small\";\n                    this.nameStr = \"Small\";\n                    break;\n                case \"med\": this.value = 3;\n                    this.namestr = \"medium\";\n                    this.nameStr = \"Medium\";\n                    break;\n                case \"lg\": this.value = 4;\n                    this.nameStr = \"large\";\n                    this.nameStr = \"Large\";\n                    break;\n                case \"huge\": this.value = 5;\n                    this.nameStr = \"huge\";\n                    this.nameStr = \"Huge\";\n                    break;\n                case \"grg\": this.value = 6;\n                    this.nameStr = \"gargantuan\";\n                    this.nameStr = \"Gargantuan\";\n                    break;\n                default: this.value = 0;  // Error Condition\n                    this.nameStr = \"unknown\";\n                    this.nameStr = \"Unknown\";\n            }\n        }\n    }\n    let token5ESizeStr = token5E.document?._actor.data.data.traits.size\n        ? token5E.document?._actor.data.data.traits.size\n        : token5E._actor.data.data.traits.size\n    let token5ESizeInfo = new CreatureSizeInfos(token5ESizeStr);\n    if (!token5ESizeInfo.value) {\n        let message = `Size of ${token5E.name}, ${token5ESizeStr} failed to parse. End ${MACRONAME}<br>`;\n        log(message);\n        ui.notifications.error(message);\n    }\n    return (token5ESizeInfo);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}