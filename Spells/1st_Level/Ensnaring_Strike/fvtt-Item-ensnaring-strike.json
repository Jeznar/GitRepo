{
  "name": "Ensnaring Strike",
  "type": "spell",
  "img": "icons/magic/fire/projectile-arrow-fire-red-yellow.webp",
  "data": {
    "description": {
      "value": "<p>The next time you hit a creature with a weapon attack before this spell ends, a writhing mass of thorny vines appears at the point of impact, and the target must succeed on a Strength saving throw or be @JournalEntry[CZWEqV2uG9aDWJnD]{restrained} by the magical vines until the spell ends. A Large or larger creature has advantage on this saving throw. If the target succeeds on the save, the vines shrivel away.</p>\n<p>While restrained by this spell, the target takes 1d6 piercing damage at the start of each of its turns. A creature restrained by the vines or one that can touch the creature can use its action to make a Strength check against your spell save DC. On a success, the target is freed. </p>\n<p><strong>At Higher Levels. </strong>If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st.</p>",
      "chat": "<p>The next time you hit a creature with a weapon attack before this spell ends, a writhing mass of thorny vines appears at the point of impact, and the target must succeed on a Strength saving throw or be restrained by the magical vines until the spell ends. A Large or larger creature has advantage on this saving throw. If the target succeeds on the save, the vines shrivel away. <br /><br />While restrained by this spell, the target takes 1d6 piercing damage at the start of each of its turns. A creature restrained by the vines or one that can touch the creature can use its action to make a Strength check against your spell save DC. On a success, the target is freed. </p>\n<p><strong>At Higher Levels. </strong>If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 237",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 136715,
      "definitionId": 2315,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 237,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_y8e7215chl"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.00tKlcas0KQTvBdK"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Ensnaring Strike",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Ensnaring_Strike_0.4.js\"\n/*******************************************************************************************\n * Implement Ensnaring Strike\n * \n * Description: The next time you hit a creature with a weapon attack before this spell \n *   ends, a writhing mass of thorny vines appears at the point of impact, and the target \n *   must succeed on a Strength saving throw or be restrained by the magical vines until \n *   the spell ends. A Large or larger creature has advantage on this saving throw. If the \n *   target succeeds on the save, the vines shrivel away. \n * \n *   While restrained by this spell, the target takes 1d6 piercing damage at the start \n *   of each of its turns. A creature restrained by the vines or one that can touch the \n *   creature can use its action to make a Strength check against your spell save DC. \n *   On a success, the target is freed. \n * \n *   At Higher Levels. If you cast this spell using a spell slot of 2nd level or higher, \n *   the damage increases by 1d6 for each slot level above 1st.\n * \n * The following steps need to be accomplished:\n * 1. OnUse - add buff to the caster to transfer to the next creature hit with a weap attack.\n *    Modeling this on Searing_Smite.0.1\n *\n * \n * This will need an OnUse and a Each execution.\n * \n * 12/27/21 0.1 JGB Creation\n * 12/28/21 0.2 JGB Continued Development\n * 12/28/21 0.3 JGB Add dialog to make skill check to escape an option\n * 07/29/22 0.4 JGB Add convenientDescription,fixed bug induced by Midi change, paired effect\n *******************************************************************************************/\nconst DEBUG = true;\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\n// const CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\n\nconst DEBUFF_NAME = \"Restrained\" // aItem.name || \"Nature's Wraith\";\nconst DEBUFF_ICON = \"modules/combat-utility-belt/icons/restrained.svg\"\nconst SAVE_TYPE = \"str\"\nconst JOURNAL_RESTRAINED = \"<b>@JournalEntry[CZWEqV2uG9aDWJnD]{restrained}</b>\"\nlog(\"---------------------------------------------------------------------------\",\n    \"Starting\", `${MACRONAME} or ${MACRO}`);\nfor (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\nlet gameRound = game.combat ? game.combat.round : 0;\n\n//---------------------------------------------------------------------------------------\n// Set some global variables and constants\n//\nlet msg = \"\";\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\n\n//---------------------------------------------------------------------------------------\n// Define some additional handy global variables that I need often.  Not all will be used\n// in this macro, but I want them here for future use/reference.\n//\n// See https://gitlab.com/tposney/dae#lastarg for info on what is included in lastArg\n//\nconst lastArg = args[args.length - 1];\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\nlet spellLevel = lastArg?.spellLevel;\n\nlog(\"------- Obtained Global Values -------\",\n    `Active Token (aToken) ${aToken.name}`, aToken,\n    `Active Actor (aActor) ${aActor.name}`, aActor,\n    `Active Item (aItem) ${aItem.name}`, aItem,\n    \"spellLevel\", spellLevel);\n\n//-------------------------------------------------------------------------------\n// Depending on where invoked call appropriate function to do the work\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();      // Midi ItemMacro On Use\nif (args[0] === \"on\") await doOn();          \t\t        // DAE Application\nif (args[0] === \"each\") await doEach();\t\t\t\t\t    // DAE removal\nif (args[0]?.tag === \"DamageBonus\") await doBonusDamage();    // DAE Damage Bonus\n\nlog(\"---------------------------------------------------------------------------\",\n    \"Finishing\", MACRONAME);\nreturn;\n\n/***************************************************************************************\n*    END_OF_MAIN_MACRO_BODY\n*                                END_OF_MAIN_MACRO_BODY\n*                                                             END_OF_MAIN_MACRO_BODY\n***************************************************************************************/\n/**************************************************************************************\n* Execute code for a ItemMacro onUse\n***************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let saveDC = aToken.actor.data.data.attributes.spelldc;\n    log(\"---------------------------------------------------------------------------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        \"saveDC\", saveDC);\n\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: jez.CUSTOM, value: `ItemMacro.${aItem.name}`, priority: 20 },\n            { key: \"flags.midi-qol.spellLevel\", mode: jez.OVERRIDE, value: `${spellLevel}`, priority: 20 },\n            { key: \"flags.midi-qol.spellId\", mode: jez.OVERRIDE, value: `${lastArg.uuid}`, priority: 20 },\n        ],\n        origin: lastArg.uuid,\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n        flags: { \n            dae: { itemData: aItem, specialDuration: [\"DamageDealt\"] },\n            convenientDescription: `Next weapon attack forces DC${saveDC} STR Save or be Restrained and take DoT`\n         },\n        icon: aItem.img,\n        label: aItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: effectData });\n\n    //---------------------------------------------------------------------------------------\n    // Thats all folks\n    //\n    msg = `<p style=\"color:blue;font-size:14px;\">\n        <b>${aToken.name}</b> will attemt to apply ${JOURNAL_RESTRAINED} on next hit.  \n        Target may make a <b>DC${saveDC}</b> ${CONFIG.DND5E.abilities[SAVE_TYPE]} save to avoid.\n        </p>`\n    postResults(msg);\n    log(\"---------------------------------------------------------------------------\",\n        `Finished`, `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n * Execute code for a DAE Macro application (on) \n ***************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    let saveDC = args[1];\n    log(\"--------------On----------------------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        `aActor ${aActor.name}`, aActor,\n        `aToken ${aToken.name}`, aToken,\n        `saveDC`, saveDC);\n    for (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\n    //---------------------------------------------------------------------------------------\n    // If the target is large or larger, it should have advantage on its save\n    //\n    let targetSize = getSizeInfo(aToken);\n    let adv = false;\n    let flavor = `<b>${aToken.name}</b> attempts a \n    ${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${saveDC}</b> save to avoid <b>${DEBUFF_NAME}</b>\n    effect from ensnaring strike.`;\n    log(`${aToken.name} is ${targetSize.nameStr} with a value of ${targetSize.value}`)\n    if (targetSize.value > 3) {\n        adv = true\n        flavor += `<br><br>Roll is made with <b>advantage</b> as ${aToken.name} is <b>${targetSize.nameStr}</b>`;\n    }\n    log(`*** Make save with advantage? ${adv}`, flavor);\n    //---------------------------------------------------------------------------------------\n    // Have the target roll its saving throw\n    //\n    let save = null\n    if (adv) save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: flavor, advantage: \"true\", chatMessage: true, fastforward: true })).total;\n    else save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: flavor, chatMessage: true, fastforward: true })).total;\n    log(\"Result of save roll\", save);\n    if (save >= saveDC) {\n        log(`save was made with a ${save}`);\n        postResults(`save was made`);\n        // remove the effect.\n    } else log(`save failed with a ${save}`);\n    //---------------------------------------------------------------------------------------\n    // If the target made the save remove the recently aplied effect\n    //\n    if (save >= saveDC) {\n        msg = `${aToken.name} made its save.  Rolling ${save} vs ${saveDC} DC.`;\n        log(msg)\n        await wait(500)   // This pause allows the debuff to be placed by DAE before removal\n        log(\"After a brief pause, tToken.data\", aToken.data)\n        //----------------------------------------------------------------------------------\n        // Check for debuff matching DEBUFF_NAME.  If it exists, remove it.\n        //\n        log(\" aToken.data.effects\", aToken.data.actorData.effects)\n        let existingEffect = aActor.effects.find(ef => ef.data.label === DEBUFF_NAME) ?? null;\n\n        if (existingEffect) {\n            msg = `${aToken.name} has ${DEBUFF_NAME} effect: `;\n            log(msg, existingEffect);\n            await existingEffect.delete();\n        } else {\n            msg = `${aToken.name} lacked ${DEBUFF_NAME} effect.`;\n            log(msg);\n        }\n    }\n    else {\n        msg = `${aToken.name} failed its save.  Rolling ${save} vs DC${saveDC}.`;\n        log(msg);\n    }\n\n    log(\"--------------On----------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n * Execute code for a DAE Macro application (on) - nothing other than place holding\n ***************************************************************************************/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    let saveDC = args[1];\n    log(\"--------------doEach---------------------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        `aActor ${aActor.name}`, aActor,\n        `aToken ${aToken.name}`, aToken,\n        `saveDC`, saveDC);\n    for (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\n    //---------------------------------------------------------------------------------------\n    // Have the target roll a strength check (rollAbilityTest)\n    // \n    const dialogTitle = \"Make a choice of how to use your action\"\n    const dialogText = `The nasty vines are keeping <b>${aToken.name}</b> restrained.  \n        Would you like to use your action this round to attempt to break the vines \n        (<b>DC${saveDC} Strength</b> check), or simply ignore them and do something else \n        with your action?<br><br>`\n    const buttonOne = \"Break Vines\"\n    const buttonTwo = \"Ignore Vines\"\n    await popSimpleDialog(dialogTitle, dialogText, doEachCallBack, buttonOne, buttonTwo)\n\n    // do any clean up\n    log(\"--------------doEach---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n * Create and process selection dialog, passing it onto specified callback function\n ***************************************************************************************/\nasync function popSimpleDialog(dialogTitle, dialogText, callBackFunc, buttonOne, buttonTwo) {\n    const FUNCNAME = \"popSimpleDialog(dialogTitle, dialogText, callBackFunc, buttonOne, buttonTwo)\";\n    log(\"---------------------------------------------------------------------------\",\n        `Starting`, `${MACRONAME} ${FUNCNAME}`,\n        `dialogTitle`, dialogTitle,\n        `dialogText`, dialogText,\n        `buttonOne`, buttonOne,\n        `buttonTwo`, buttonTwo);\n\n    if (!dialogTitle || !dialogText || !buttonOne || !buttonTwo) {\n        let msg = `pickFromList arguments should be (dialogTitle, dialogText, callBackFunc, buttonOne, buttonTwo),\n                   but yours are: ${dialogTitle}, ${dialogText}, ${callBackFunc}, ${buttonOne}, ${buttonTwo}`;\n        ui.notifications.error(msg);\n        log(msg);\n        return\n    }\n\n    new Dialog({\n        title: dialogTitle,\n        content: dialogText,\n        buttons: {\n            button1: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: buttonOne,\n                callback: async () => {\n                    log(`selected button 1: ${buttonOne}`)\n                    callBackFunc(true) \n                },\n            },\n            button2: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Ignore Vines',\n                callback: async () => {\n                    log('canceled')\n                    callBackFunc(false)\n                },\n            },\n        },\n        default: 'button2'\n    }).render(true)\n\n    log(\"---------------------------------------------------------------------------\",\n        `Finished`, `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n * Callback to be executed when user chooses to attempt a skill test to get out of vines\n ***************************************************************************************/\nasync function doEachCallBack(doCheck) {\n    const FUNCNAME = \"doEachCallBack(doCheck)\";\n    log(\"---------------------------------------------------------------------------\",\n        `Starting`, `${MACRONAME} ${FUNCNAME}`,\n        `doCheck`, doCheck);\n\n    if (doCheck) { // Actor is attempting to break the vines\n        let saveDC = args[1];\n\n        let flavor = `${aToken.name} uses this turn's <b>action</b> to attempt a \n        ${CONFIG.DND5E.abilities[SAVE_TYPE]} check vs <b>DC${saveDC}</b> to end the \n        <b>${DEBUFF_NAME}</b> effect from ensnaring strike.`;\n        let check = (await aActor.rollAbilityTest(SAVE_TYPE, {\n            flavor: flavor,\n            chatMessage: true,\n            fastforward: true\n        })).total;\n        log(\"Result of check roll\", check);\n        //---------------------------------------------------------------------------------------\n        // If the target made the save remove the effect\n        //\n        if (check >= saveDC) {\n            msg = `${aToken.name} made its check.  Rolling ${check} vs ${saveDC} DC.`;\n            log(msg);\n            //----------------------------------------------------------------------------------\n            // Check for debuff matching DEBUFF_NAME.  If it exists, remove it.\n            //\n            log(\" aToken.data.effects\", aToken.data.actorData.effects);\n            let existingEffect = aActor.effects.find(ef => ef.data.label === DEBUFF_NAME) ?? null;\n\n            if (existingEffect) {\n                msg = `${aToken.name} has ${DEBUFF_NAME} effect: `;\n                log(msg, existingEffect);\n                await existingEffect.delete();\n            } else {\n                msg = `${aToken.name} lacked ${DEBUFF_NAME} effect.`;\n                log(msg);\n            }\n        }\n        else {\n            msg = `${aToken.name} failed its check.  Rolling ${check} vs DC${saveDC}.`;\n            log(msg);\n        }\n    }\n    else { // Actor is ignoring the vines\n        msg = \"Ignoring the vines\"\n        log(msg)\n    }\n    log(\"---------------------------------------------------------------------------\",\n        `Finished`, `${MACRONAME} ${FUNCNAME}`);\n}\n/****************************************************************************************\n * Execute code for a DAE Macro dobonusdamage\n ***************************************************************************************/\nasync function doBonusDamage() {\n    const FUNCNAME = \"doBonusDamage()\";\n    log(\"--------------doBonusDamage---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    for (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n    // do any clean up\n\n    if (!oneTarget()) return;\n\n    if (![\"mwak\"].includes(lastArg.item.data.actionType)) return {};\n    let target = canvas.tokens.get(lastArg.hitTargets[0].id);\n    log(\"target\",target)\n    let spellLevel = getProperty(lastArg.actor.flags, \"midi-qol.spellLevel\");\n    log(\"spellLevel\",spellLevel)\n    let saveDC = aToken.actor.data.data.attributes.spelldc;\n    log(\"saveDC\",saveDC)\n    let spellUuid = getProperty(lastArg.actor.flags, \"midi-qol.spellId\");\n    log(\"spellUuid\",spellUuid)\n    let spellItem = await fromUuid(getProperty(lastArg.actor.flags, \"midi-qol.spellId\"));\n    log(\"spellItem\",spellItem)\n    let damageType = \"piercing\";\n    log(\"damageType\",damageType)\n    //---------------------------------------------------------------------------------------\n    // Apply the debuff to the target\n    //\n    let value = `turn=start,label=\"Ensnaring Strike\",damageRoll=${spellLevel}d6,damageType=${damageType}`\n    let effectData = [{\n        changes: [\n            { key: `flags.midi-qol.OverTime`, mode: jez.OVERRIDE, value: value, priority: 20 },\n            { key: \"data.attributes.movement.walk\", mode: jez.OVERRIDE, value: 1, priority: 20 },\n            { key: \"macro.itemMacro\", mode: jez.CUSTOM, value: saveDC, priority: 20 },\n            { key: \"macro.CE\", mode: jez.CUSTOM, value: \"Restrained\", priority: 20 },\n        ],\n        origin: spellUuid,\n        flags: { \n            dae: { itemData: spellItem.data, macroRepeat: \"startEveryTurn\", token: target.uuid },\n            convenientDescription: `${DEBUFF_NAME} and taking Damage over Time`        \n        },\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n        icon: spellItem.img,\n        label: spellItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.actor.uuid, effects: effectData });\n    // Bug Fix?  Crymic had the following line execute to remove concentration, which I think is an incorrect \n    // interpretation of the spell.  Dropping concentration should end the DoT.  Keeping this line in case I want\n    // to revert my change to Crymic's code.\n    //\n    // await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: aToken.actor.uuid, effects: [CONC.id] });\n    await jez.wait(100)\n    jez.pairEffects(aActor, \"Concentrating\", target.actor, spellItem.name)\n    log(\"--------------doBonusDamage---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return {\n        damageRoll: `${spellLevel}d6[${damageType}]`,\n        flavor: `(Ensnaring Strike (${CONFIG.DND5E.damageTypes[damageType]}))`\n    };\n}\n\n/****************************************************************************************\n * Fetch and return the save type and target number\n ***************************************************************************************/\nfunction getSaveInfo(tToken) {\n    let saveDC = args[1];\n    let tarDexSaveMod = tToken.document._actor.data.data.abilities.dex.save;\n    let tarStrSaveMod = tToken.document._actor.data.data.abilities.str.save;\n\n    //---------------------------------------------------------------------------------------\n    // Determine target's prefered stat for the save, and make save roll\n    //\n    let saveType = \"\";\n    if (tarDexSaveMod > tarStrSaveMod) {\n        log(`saveDC ${saveDC} - ${tToken.name} prefers Dex save, with a ${tarDexSaveMod} mod vs ${tarStrSaveMod}`);\n        saveType = \"dex\";\n    } else {\n        log(`saveDC ${saveDC} - ${tToken.name} prefers Str save, with a ${tarStrSaveMod} mod vs ${tarDexSaveMod}`);\n        saveType = \"str\";\n    }\n    return { saveType, saveDC };\n}\n\n\n/************************************************************************\n * Verify exactly one target selected, boolean return\n*************************************************************************/\nfunction oneTarget() {\n    if (!game.user.targets) {\n        msg = `Targeted nothing, must target single token to be acted upon`;\n        ui.notifications.warn(msg);\n        log(msg);\n        return (false);\n    }\n    if (game.user.targets.ids.length != 1) {\n        msg = `Target a single token to be acted upon. Targeted ${game.user.targets.ids.length} tokens`;\n        ui.notifications.warn(msg);\n        log(msg);\n        return (false);\n    }\n    log(` targeting one target`);\n    return (true);\n}\n\n/***************************************************************************************\n * Post the results to chat card\n ***************************************************************************************/\nasync function postResults(resultsString) {\n    const FUNCNAME = \"postResults(resultsString)\";\n    log(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\");\n    log(`Starting ${MACRONAME} ${FUNCNAME}`, `resultsString`, resultsString);\n\n    // let chatmsg = await game.messages.get(itemCard.id)\n    let chatmsg = game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatmsg.data.content);\n    log(` chatmsg: `, chatmsg);\n    const searchString = /<div class=\"end-midi-qol-saves-display\">/g;\n    const replaceString = `<div class=\"end-midi-qol-saves-display\">${resultsString}`;\n    // log(\"============================ content before\", content)\n    content = await content.replace(searchString, replaceString);\n    // log(\"============================ content after\", content)\n    await chatmsg.update({ content: content });\n    await ui.chat.scrollBottom();\n\n    log(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\",\n        `Finished`, `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n* DEBUG Logging\n* \n* If passed an odd number of arguments, put the first on a line by itself in the log,\n* otherwise print them to the log seperated by a colon.  \n* \n* If more than two arguments, add numbered continuation lines. \n***************************************************************************************/\nfunction log(...parms) {\n    if (!DEBUG) return;             // If DEBUG is false or null, then simply return\n    let numParms = parms.length;    // Number of parameters received\n    let i = 0;                      // Loop counter\n    let lines = 1;                  // Line counter \n\n    if (numParms % 2) {  // Odd number of arguments\n        console.log(parms[i++])\n        for (i; i < numParms; i = i + 2) console.log(` ${lines++})`, parms[i], \":\", parms[i + 1]);\n    } else {            // Even number of arguments\n        console.log(parms[i], \":\", parms[i + 1]);\n        i = 2;\n        for (i; i < numParms; i = i + 2) console.log(` ${lines++})`, parms[i], \":\", parms[i + 1]);\n    }\n}\n\n/****************************************************************************************\n * Tricksy little sleep implementation\n ***************************************************************************************/\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\n\n/****************************************************************************************\n* Return an object describing the size of a passed TokenID.  The object will contain:\n*   this.key     - short form of size used as a key to obtain other info\n*   this.value   - numeric value of size, 1 is tiny, 6 is gargantuan, 0 is error case\n*   this.namestr - size string in lowercase, e.g. medium\n*   this.nameStr - size string in mixedcase, e.g. Gargantuan\n ***************************************************************************************/\nfunction getSizeInfo(token5E) {\n    log(\"getSizeInfo(token5E)\", token5E)\n    class CreatureSizeInfos {\n        constructor(size) {\n            this.key = size;\n            switch (size) {\n                case \"tiny\": this.value = 1;\n                    this.namestr = \"tiny\";\n                    this.nameStr = \"Tiny\";\n                    break;\n                case \"sm\": this.value = 2;\n                    this.nameStr = \"small\";\n                    this.nameStr = \"Small\";\n                    break;\n                case \"med\": this.value = 3;\n                    this.namestr = \"medium\";\n                    this.nameStr = \"Medium\";\n                    break;\n                case \"lg\": this.value = 4;\n                    this.nameStr = \"large\";\n                    this.nameStr = \"Large\";\n                    break;\n                case \"huge\": this.value = 5;\n                    this.nameStr = \"huge\";\n                    this.nameStr = \"Huge\";\n                    break;\n                case \"grg\": this.value = 6;\n                    this.nameStr = \"gargantuan\";\n                    this.nameStr = \"Gargantuan\";\n                    break;\n                default: this.value = 0;  // Error Condition\n                    this.nameStr = \"unknown\";\n                    this.nameStr = \"Unknown\";\n            }\n        }\n    }\n    let token5ESizeStr = token5E.document?._actor.data.data.traits.size\n        ? token5E.document?._actor.data.data.traits.size\n        : token5E._actor.data.data.traits.size\n    let token5ESizeInfo = new CreatureSizeInfos(token5ESizeStr);\n    if (!token5ESizeInfo.value) {\n        let message = `Size of ${token5E.name}, ${token5ESizeStr} failed to parse. End ${MACRONAME}<br>`;\n        log(message);\n        ui.notifications.error(message);\n    }\n    return (token5ESizeInfo);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}