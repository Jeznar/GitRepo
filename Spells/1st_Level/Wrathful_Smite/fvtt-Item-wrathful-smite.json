{
  "name": "Wrathful Smite",
  "type": "spell",
  "img": "Icons_JGB/Spells/1st%20Level/Wrathful_Smite.png",
  "data": {
    "description": {
      "value": "<p>The next time you hit with a melee weapon attack during this spell’s duration, your attack deals an<strong> extra 1d6 psychic</strong> damage.</p>\n<p>Additionally, if the target is a creature, it must make a <strong>Wisdom saving </strong>throw or be @JournalEntry[tjg0x0jXlwvbdI9h]{Frightened} of you until the spell ends. As an action, the creature can make a Wisdom check against your spell save DC to steel its resolve and end this spell.</p>\n<p><a href=\"https://www.dndbeyond.com/spells/wrathful-smite\" target=\"_blank\" rel=\"noopener\">D&amp;DBeyond</a></p>",
      "chat": "<p>The next time you hit with a melee weapon attack during this spell’s duration, your attack deals an extra 1d6 psychic damage. Additionally, if the target is a creature, it must make a Wisdom saving throw or be frightened of you until the spell ends. As an action, the creature can make a Wisdom check against your spell save DC to steel its resolve and end this spell.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 289",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138957,
      "definitionId": 2324,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 289,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-darklands-spells.qYE2fkkzuveJ70zH"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Wrathful Smite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Wrathful_Smite.0.3.js\"\n/*****************************************************************************************\n * Implment Wrathful Smite!\n * \n * special thanks to theripper93\n * \n * 01/25/22 0.1 Add headers and VFX\n * 05/04/22 0.2 Update for Foundry 9.x\n * 08/01/22 0.3 Fix to accomodate change in Midi (flags.midi-qol.itemDetails needs OVERIDE)\n *****************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]      // Trim of the version number and extension\n const TL = 0;                              // Trace Level for this macro\n let msg = \"\";                              // Global message string\n //---------------------------------------------------------------------------------------------------\n if (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\n if (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;         \nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nif (TL > 3) jez.trace(`aToken`, aToken);\nlet aActor = aToken.actor; \n//\n// Set the value for the Active Item (aItem)\nlet aItem;         \nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nif (TL > 3) jez.trace(`aItem`, aItem);\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst gameRound = game.combat ? game.combat.round : 0;\nconst SAVE_DC = aToken.actor.data.data.attributes.spelldc;\nconst saveType = \"wis\";\n// VFX Settings -------------------------------------------------------------------\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_TARGET = \"modules/jb2a_patreon/Library/2nd_Level/Divine_Smite/DivineSmite_01_Dark_Red_Target_400x400.webm\"\nconst VFX_CASTER = \"modules/jb2a_patreon/Library/2nd_Level/Divine_Smite/DivineSmite_01_Dark_Red_Caster_400x400.webm\"\nconst VFX_OPACITY = 1.0;\nconst VFX_SCALE = 0.70;\nif (TL > 3) jez.trace(`Forking....${args[0]?.tag}`, args[0]);\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\n// if (args[0] === \"off\") await doOff();                   // DAE removal\n// if (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE everyround\n// DamageBonus must return a function to the caller\nif (args[0]?.tag === \"DamageBonus\") return(doBonusDamage());    \nif (TL>1) jez.trace(`=== Starting === ${MACRONAME} ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ****************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    await jez.wait(100)\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    const tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    if (TL > 3) jez.trace(`tToken`, tToken);\n    const tActor = tToken?.actor;\n    //------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_CASTER)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------\n    // Define and apply the effect\n    // \n    const CE_DESC = `Next weapon hit does extra damage and forces a DC${SAVE_DC} WIS save or Frightened.`\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: jez.CUSTOM, value: `ItemMacro.${aItem.name}`, priority: 20 },\n            { key: \"flags.midi-qol.itemDetails\", mode: jez.OVERRIDE, value: `${LAST_ARG.uuid}`, priority: 20 },\n        ],\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        duration: { rounds: 1, seconds: 6, startRound: gameRound, startTime: game.time.worldTime },\n        flags: { \n            dae: { itemData: aItem, specialDuration: [\"DamageDealt\"] },\n            convenientDescription: CE_DESC\n        },\n        icon: aItem.img,\n        label: aItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:aToken.actor.uuid, effects: effectData });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"doBonusDamage\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n async function doBonusDamage() {\n    const FUNCNAME = \"doBonusDamage()\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    //-----------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    if (![\"mwak\"].includes(LAST_ARG.item.data.actionType)) return {};\n    let tToken = canvas.tokens.get(LAST_ARG.hitTargets[0].id);\n    let tActor = tToken.actor\n    let itemUuid = getProperty(LAST_ARG.actor.flags, \"midi-qol.itemDetails\");\n    if (TL>2) jez.trace(`${TAG} itemUuid`,itemUuid);\n    let sItem = await fromUuid(itemUuid);\n    if (TL>2) jez.trace(`${TAG} sItem`,sItem);\n    let aItem = LAST_ARG.item;\n    let numDice = LAST_ARG.isCritical ? 2 : 1;\n    let saveOptions = tToken.actor.data.type === \"character\" ? { chatMessage: false, fastForward: false } : { chatMessage: false, fastForward: true };\n    let save = await MidiQOL.socket().executeAsGM(\"rollAbility\", { request: \"save\", targetUuid: tToken.actor.uuid, ability: saveType, options: saveOptions });\n    let saveSuccess = \"saves\";\n    let conc = aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n    //-------------------------------------------------------------------------------------------------------------\n    // Launch VFX on tToken\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_TARGET)\n        .attachTo(tToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------------------\n    // Apply Frightend condition with CV, modified to last until start of tToken's next turn\n    //     \n    if (save.total < SAVE_DC) {\n        saveSuccess = \"fails\";\n        if (TL>2) jez.trace(\"Next Frightened condition\", tToken.actor)\n        await jezcon.addCondition(\"Frightened\", LAST_ARG.targetUuids, \n        {allowDups: true, replaceEx: false, origin: sItem.uuid, overlay: false, traceLvl: 5 }) \n        if (TL>2) jez.trace(\"Added Frightened condition\", tToken.actor)\n        //----------------------------------------------------------------------------------------------------------\n        // Chill a bit and then pair the effects\n        //\n        await jez.wait(100);\n        jez.pairEffects(aActor, \"Concentrating\", tActor, \"Frightened\")\n        //----------------------------------------------------------------------------------------------------------\n        // Chill again and update the frightened effect\n        //\n        await jez.wait(100);\n        let effect = await tActor.effects.find(i => i.data.label === \"Frightened\");\n        if (!effect) return jez.badNews(`Could not find Frightened on ${tToken.name}`,\"e\")\n        effect.data.flags.dae = { macroRepeat: \"startEveryTurn\" }\n        const CE_DESC = `Disadvantage on ability checks and attack rolls while ${aToken.name} is visible and may not approach.`\n        effect.data.flags.convenientDescription = CE_DESC\n        await effect.data.update({ flags: effect.data.flags });\n        await jez.wait(50)\n        effect.data.changes.push(\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `'${aToken.name}' ${SAVE_DC}`, priority: 20 },\n            // { key: \"flags.midi-qol.itemDetails\", mode: jez.OVERRIDE, value: `${LAST_ARG.uuid}`, priority: 20 },\n        )\n        // Update the change into game data\n                const RESULT = await effect.update({ 'changes': effect.data.changes });\n        if (RESULT && TL>1) jez.trace(`${FNAME} | Active Effect Frightened updated!`, RESULT);\n    } else {\n        await MidiQOL.socket().executeAsGM(\"removeEffects\",{actorUuid:aToken.actor.uuid, effects: [conc.id] });\n    }\n    await jez.wait(500);\n    let msgHistory = [];\n    game.messages.reduce((list, message) => {\n        if (message.data?.flags[\"midi-qol\"]?.itemId === aItem._id && message.data.speaker.token === aToken.id) list.push(message.id);\n        return list;\n    }, msgHistory);\n    let damageType = \"psychic\";\n    let itemCard = msgHistory[msgHistory.length - 1];\n    let saveResult = `<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${tToken.id}\">${tToken.name} ${saveSuccess} with a ${save.total}</div><img src=\"${tToken.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div>`;\n    let saveMessage = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${CONFIG.DND5E.abilities[saveType]} Saving Throw: DC ${SAVE_DC}</div><div class=\"midi-qol-nobox\">${saveResult}</div>`;\n    let chatMessage = await game.messages.get(itemCard);\n    let content = await duplicate(chatMessage.data.content);\n    let searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\n    let replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${saveMessage}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    return { damageRoll: `${numDice}d6[${damageType}]`, flavor: `(${sItem.name} (${CONFIG.DND5E.damageTypes[damageType]}))` };\n}\n\nasync function updateEffect(aToken, target, conc) {\n    let frightened = target.actor.effects.find(i => i.data.label === \"Frightened\");\n    await MidiQOL.socket().executeAsGM(\"updateEffects\", { actorUuid: aToken.actor.uuid, updates: [{ _id: conc.id, changes: [{ key: `flags.dae.deleteUuid`, mode: 5, value: frightened.uuid, priority: 20 }] }] });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked each round by DAE\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    let oTokenName = args[1]\n    const SAVE_DC = args[2]\n    //------------------------------------------------------------------------------------------\n    // Prepare for and pop a simple dialog asking the afflicted if they want to attempt a save\n    //\n    const Q_TITLE = `Does ${aToken.name} Make Check?`\n    const Q_TEXT = `As an <b>action</b>, ${aToken.name} can attempt a Wisdom check against \n    DC${SAVE_DC} to steel its resolve and end this effect.<br><br>Select Yes, if you want to \n    make the check.<br><br>`\n    //------------------------------------------------------------------------------------------\n    // Very simple dialog to prompt confirmation after user clicks button, confirmation will be \n    // boolean for yes/no\n    // \n    let confirmation = await Dialog.confirm({\n        title: Q_TITLE,\n        content: Q_TEXT,\n    });\n    //-----------------------------------------------------------------------------------------------\n    // If we're attempting a check, do it!\n    //\n    if (confirmation) {\n        if (TL>2) jez.trace(`${TAG} Attempting Saving Throw`);\n        let check = (await aActor.rollAbilityTest(\"wis\",\n            { flavor: \"Flavor Text\", chatMessage: true, fastforward: true })).total;\n        if (check >= SAVE_DC) {\n            if (TL>2) jez.trace(`${TAG} Successful Saving Throw, ${check} vs DC${SAVE_DC}`);\n            await jezcon.remove(\"Frightened\", aActor.uuid, {traceLvl: 5});\n            bubbleForAll(aToken.id, `${oTokenName} isn't that frightening after all!`, true, true)\n        } else {\n            if (TL>2) jez.trace(`${TAG} Failed Saving Throw, ${check} vs DC${SAVE_DC}`);\n            bubbleForAll(aToken.id, `${oTokenName} is just too frightening.`, true, true)\n        }\n    } else {\n        if (TL>2) jez.trace(`${TAG} Skipping Saving Throw`);\n        bubbleForAll(aToken.id, `Maybe if I stay away from ${oTokenName}?`, true, true)\n    }\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}