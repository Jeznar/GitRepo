{
  "name": "Entangle",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/vines-acid-2.jpg",
  "data": {
    "description": {
      "value": "<p>Grasping weeds and vines sprout from the ground in a 20-foot square starting from a point within range. For the duration, these plants turn the ground in the area into difficult terrain.</p>\n<p>A creature in the area when you cast the spell must succeed on a Strength saving throw or be @JournalEntry[CZWEqV2uG9aDWJnD]{restrained} by the entangling plants until the spell ends. A creature restrained by the plants can use its action to make a Strength check against your spell save DC. On a success, it frees itself.</p>\n<p>When the spell ends, the conjured plants wilt away.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This is largely automated.&nbsp;</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "square"
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "str",
      "dc": 12,
      "scaling": "spell"
    },
    "level": 1,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "always",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Item.NGQ4ZjA3Y2YwNzBm"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Entangle",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Entangle.0.7.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Apply the Restrained effect with cub to the tokens that fail their saves. \n *\n * 12/10/21 0.1 Creation of Macro\n * 01/01/22 0.2 Delayed further efforts...\n * 02/23/22 0.3 Partial rewrite to my current style\n * 02/24/22 0.4 Changes to enable a doEach checkng of saves on afflicted tokens\n * 07/09/22 0.5 Replace CUB add for an array of targets with jezcon.addConditions()\n * 07/09/22 0.6 Change the VFX to a placed tile\n * 12/16/22 0.7 Update style and seek player permission problem for extermination -- use modified CE to achieve this\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nlet chatMessage = game.messages.get(L_ARG.itemCardId);\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\nconst CHK_TYPE = \"str\"\nconst EFFECT = \"Restrained\"\nconst TEMPLATE_ID = args[0].templateId\nconst TOKEN_NAME_NOWHITESPACE = aToken.name.replace(/\\s+/g, '');\nconst VFX_NAME = `${MACRO}-${TOKEN_NAME_NOWHITESPACE}-${GAME_RND}`\nconst VFX_LOOP = \"modules/jb2a_patreon/Library/1st_Level/Entangle/Entangle_01_Green_400x400.webm\"\nconst VFX_OPACITY = 0.6;\nconst VFX_SCALE = 1.0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach({ traceLvl: TL });\t\t\t\t\t     // DAE everyround\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0].failedSaves.length === 0)\n        return jez.badNews(`No (${args[0].failedSaves.length}) targets are affected by ${EFFECT}`, 'i')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // if (!await preCheck()) return(false);\n    preCheck()\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    let failures = [];\n    let numFailed = args[0].failedSaves.length;\n    msg = `${numFailed} targets are affected by ${EFFECT}<br><br>\n        A creature restrained by the plants can use its action to make a Strength check against  your spell save DC ${SAVE_DC}. \n        On a success, it frees itself.`;\n    if (TL > 1) jez.trace(`${TAG} msg`, args[0].failedSaves);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Launch the VFX that reprsents the grasping vines\n    //\n    let newTileId = await placeTileVFX({ traceLvl: TL });\n    if (TL > 1) jez.trace(`${TAG} newTileId`, newTileId)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Lets modify a Convient Effect for \"Restrained\" effect, aka as EFFECT, to fit our current need.\n    //\n    // Retrieve as an object, the \"Restrained\" Convenient Effect for modification\n    if (TL > 1) jez.trace(`${TAG} Starting code block to modify and apply ${EFFECT}`)\n    let effectData = game.dfreds.effectInterface.findEffectByName(EFFECT).convertToObject();\n    if (TL > 3) jez.trace(`${TAG} effectData obtained`, effectData)\n    // Add the startEveryTurn\n    effectData.flags.dae.macroRepeat = \"startEveryTurn\"\n    // Change the convenient description to one specific to this spell\n    const CE_DESC = `Something unique for this spell...`\n    effectData.description = CE_DESC\n    // Define the new effect line\n    const VALUE = `entangle_helper2 ${EFFECT} ${CHK_TYPE} ${SAVE_DC} ${aToken.id}`\n    effectData.changes.push(\n        { key: `macro.execute`, mode: jez.CUSTOM, value: VALUE, priority: 20 },\n        // { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `'${aToken.name}' ${SAVE_DC}`, priority: 20 },\n    )\n    if (TL > 3) jez.trace(`${TAG} effectData changes`, effectData)\n    await jez.wait(100);\n    // Slap the updated CE onto each of our affected actors\n    let failedTokenStr = \"\";\n    if (TL > 1) jez.trace(`${TAG} Need to process ${L_ARG.failedSaveUuids.length} tokens`,L_ARG.failedSaveUuids)\n    for (let i = 0; i < L_ARG.failedSaveUuids.length; i++) {\n        if (failedTokenStr) failedTokenStr += ` ${L_ARG.failedSaves[i].id}`;\n        else failedTokenStr = L_ARG.failedSaves[i].id;\n        if (TL > 1) jez.trace(`${TAG} failedTokenStr`,failedTokenStr)\n        if (TL > 1) jez.trace(`${TAG} Adding effect to ${L_ARG.failedSaves[i].name} ${L_ARG.failedSaveUuids[i]}`,\n            'effectData',effectData,'L_ARG.failedSaveUuids[i].uuid',L_ARG.failedSaveUuids[i],'aItem.uuid',aItem.uuid)\n        await game.dfreds.effectInterface.addEffectWith({ \n            effectData: effectData, \n            uuid: L_ARG.failedSaveUuids[i], \n            origin: aItem.uuid \n        });\n    }\n    if (TL > 1) jez.trace(`${TAG} failedTokenStr`,failedTokenStr)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Modify our concentrating effect\n    //\n    if (TL > 1) jez.trace(`${TAG} Mod Concentrating Effect`, 'aToken', aToken, 'newTileId', newTileId, 'failedTokenStr', failedTokenStr);\n    let rc = modConcentratingEffect(aToken, newTileId, failedTokenStr, { traceLvl: TL });\n    if (TL > 1) jez.trace(`${TAG} Mod Concentrating Effect returned`, rc);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Post results to the card\n    //\n    jez.addMessage(chatMessage, msg);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Modify existing effect to include a midi-qol overtime saving throw element\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n// COOL-THING: Modify existing concentrating effect to enable cleanup of dependent items\nasync function modConcentratingEffect(tToken, tileId, label, options = {}) {\n    const FUNCNAME = \"modConcentratingEffect(tToken, tileId, label, options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\n        'tToken', tToken, 'tileId', tileId, 'label', label, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    const EFFECT = \"Concentrating\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(100)\n    let effect = await tToken.actor.effects.find(i => i.data.label === EFFECT);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. In this case, a world macro that will be\n    // given arguments: VFX_Name and Token.id for all affected tokens\n    //    \n    let value = `entangle_helper ${tileId} ${label}`\n    effect.data.changes.push({ key: `macro.execute`, mode: jez.CUSTOM, value: value, priority: 20 })\n    if (TL > 1) jez.trace(`${TAG} effect.data.changes`, effect.data.changes)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) if (TL > 1) jez.trace(`${TAG} Active Effect ${EFFECT} updated!`, result);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Modify existing effect to include a midi-qol overtime saving throw element\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n// COOL-THING:  Adds a everyturn macro call to an existing effect\nasync function modExistingEffect(tToken, tEffect, options = {}) {\n    const FUNCNAME = \"modExistingEffect(tToken, tEffect, options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME}`, 'tToken', tToken, 'tEffect', tEffect, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(100)\n    let effect = await tToken.actor.effects.find(i => i.data.label === tEffect);\n    if (TL > 1) jez.trace(`${TAG} 0 effect`, effect)\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect.\n    //    https://gitlab.com/tposney/midi-qol#flagsmidi-qolovertime-overtime-effects\n    // The following should be rollType=check per documentation, but this throws an error as of today\n    // let oTV=`turn=end,label=${tEffect},saveDC=${SAVE_DC},saveAbility=${CHK_TYPE},saveRemove=true,rollType=save`\n    // effect.data.changes.push({ key:`flags.midi-qol.OverTime`,mode:jez.OVERRIDE,value:oTV,priority: 20 })\n    const VALUE = `entangle_helper2 ${EFFECT} ${CHK_TYPE} ${SAVE_DC} ${aToken.id}`\n    await effect.data.changes.push({ key: `macro.execute`, mode: jez.CUSTOM, value: VALUE, priority: 20 })\n    effect.data.flags.dae.macroRepeat = \"startEveryTurn\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes, 'flags': effect.data.flags });\n    if (result) if (TL > 1) jez.trace(`${TAG} Active Effect ${tEffect} updated!`, result);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n* Pop a VFX Tile where the template was\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function placeTileVFX(options = {}) {\n    const FUNCNAME = \"placeTileVFX(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME}`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (TL > 2) jez.trace(`${TAG} TEMPLATE_ID`, TEMPLATE_ID)\n    // Grab the size of grid in pixels per square\n    const GRID_SIZE = canvas.scene.data.grid;\n    // Search for the MeasuredTemplate that should have been created by the calling item\n    let template = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    // Delete the template to clean up the scene\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    // Place the tile with an embedded VFX\n    let tileProps = {\n        x: template.center.x,   // X coordinate is center of the template\n        y: template.center.y,   // Y coordinate is center of the template\n        img: VFX_LOOP,\n        width: GRID_SIZE * 4,\n        height: GRID_SIZE * 4,\n        alpha: VFX_OPACITY                    // Opacity of the tile\n    };\n    return await jez.tileCreate(tileProps)\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": {
      "killAnim": false,
      "options": {
        "ammo": false,
        "overrideAuto": false
      },
      "override": false,
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "animLevel": false,
      "animType": "t1",
      "below": false,
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}