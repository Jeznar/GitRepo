{
  "name": "Earth Tremor",
  "type": "spell",
  "img": "icons/commodities/stone/paver-gravel-grey.webp",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\">%TOKENNAME% causes a tremor in the ground within range. Each creature other than you in that area must make a Dexterity saving throw. On a failed save, a creature takes <strong>1d6 bludgeoning damage</strong> and is knocked <strong>@JournalEntry[FBPUaHRxNyNXAOeh]{Prone}</strong>.</p>\n<p class=\"Core-Styles_Core-Body\">If the ground in that area is loose earth or stone, it becomes difficult terrain until cleared, with each 5-foot-diameter portion requiring at least 1 minute to clear by hand.</p>\n<p class=\"Core-Styles_Core-Body\"><span class=\"Serif-Character-Style_Inline-Subhead-Serif\"><strong>At Higher Levels.</strong>&nbsp;</span>When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st.</p>\n<hr />\n<p class=\"s19\"><span class=\"p\"><strong>FoundryVTT</strong>: This is automated including placing a template marking the difficult terrain.&nbsp; This shoud be deleted manually when not appropriate.&nbsp;</span></p>",
      "chat": "<p class=\"Core-Styles_Core-Body\">You cause a tremor in the ground within range. Each creature other than you in that area must make a Dexterity saving throw. On a failed save, a creature takes 1d6 bludgeoning damage and is knocked prone. If the ground in that area is loose earth or stone, it becomes difficult terrain until cleared, with each 5-foot-diameter portion requiring at least 1 minute to clear by hand.</p>\n<p class=\"Core-Styles_Core-Body\"><span class=\"Serif-Character-Style_Inline-Subhead-Serif\"><strong>At Higher Levels.</strong> </span>When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st.</p>\n<p class=\"s19\"><span class=\"p\"> </span></p>",
      "unidentified": ""
    },
    "source": "Elemental Evil Player's Companion pg 155",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 10,
      "width": null,
      "units": "ft",
      "type": "square"
    },
    "range": {
      "value": 10,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "1d6[bludgeoning]",
          "bludgeoning"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "dex",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d6"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 137992,
      "definitionId": 2378,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 4,
          "pageNumber": 155,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": null,
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.Z0TqL6Rj6MG3uEvJ"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Earth Tremor",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Earth_Tremor.0.3.js\"\n/*****************************************************************************************\n * Slap a text message on the item card indicating Who and What should be moved by the\n * spell.\n *\n * Spell Description: You cause a tremor in the ground within range. Each creature other\n *   than you in that area must make a Dexterity saving throw. On a failed save, a\n *   creature takes 1d6 bludgeoning damage and is knocked prone. If the ground in that\n *   area is loose earth or stone, it becomes difficult terrain until cleared, with\n *   each 5-foot-diameter portion requiring at least 1 minute to clear by hand.\n *\n *   At Higher Levels. When you cast this spell using a spell slot of 2nd level or\n *   higher, the damage increases by 1d6 for each slot level above 1st.\n *\n * 12/11/21 0.1 Creation of Macro\n * 05/17/22 0.2 Convert to place a tile instead of just a sequencer video\n * 06/29/22 0.3 Fix for permission issue on game.scenes.current.createEmbeddedDocuments\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlet trcLvl = 1;\njez.trc(2, trcLvl, `=== Starting === ${MACRONAME} ===`);\n\nconst CONDITION = `Prone`;\nconst ICON = `modules/combat-utility-belt/icons/prone.svg`;\nlet msg = \"\";\nlet xtraMsg = `<br><br>\n    If the ground in that area is loose earth or stone, it becomes difficult terrain\n    until cleared. <i><b>FoundryVTT:</b> Effect represented by a tile, that can be\n    manually removed.</i>`\njez.trc(1, trcLvl, `************ Executing ${MACRONAME} ****************`)\nfor (let i = 0; i < args.length; i++) jez.trc(2, trcLvl, `  args[${i}]`, args[i]);\n// ---------------------------------------------------------------------------------------\n// Place a nifty tile...\n//\n// Obtain the ID of the template created by the calling item\nconst TEMPLATE_ID = args[0].templateId\n// Call function to place the tile and grab the returned ID\nlet newTileId = await placeTileVFX(TEMPLATE_ID);\njez.trc(3, trcLvl, \"newTileId\", newTileId)\n// Grab the tile's TileDocument object from the scene\nlet fetchedTile = await canvas.scene.tiles.get(newTileId)\njez.trc(3, trcLvl, `fetchedTile ${fetchedTile.id}`, fetchedTile)\n// Format and result message\nmsg = `Placed Tile ID: ${fetchedTile.id}. <br>Image file used as source:<br>${fetchedTile.data.img}`;\njez.trc(2, trcLvl, \"msg\", msg);\n\n// ---------------------------------------------------------------------------------------\n// If no target failed, post result and terminate\n//\nlet failCount = args[0].failedSaves.length\njez.trc(2, trcLvl, `${failCount} args[0].failedSaves: `, args[0].failedSaves)\nif (failCount === 0) {\n    msg = `No creatures failed their saving throw.` + xtraMsg;\n    await postResults(msg);\n    jez.trc(2, trcLvl, ` ${msg}`, args[0].saves);\n    jez.trc(1, trcLvl, `************ Ending ${MACRONAME} ****************`)\n    return;\n}\n// ---------------------------------------------------------------------------------------\n// Build an array of the ID's of the chumps that failed.\n//\nlet failures = [];\nfor (let i = 0; i < failCount; i++) {\n    const FAILED = args[0].failedSaves[i];\n    jez.trc(3, trcLvl, ` ${i} --> ${FAILED.data.actorId}`, FAILED);\n    jez.trc(3, trcLvl, ` ${i} Adding chump: `, FAILED)\n    failures.push(FAILED);\n    // await game.cub.addCondition(CONDITION, FAILED, {allowDuplicates:true, replaceExisting:true, warn:true});\n}\n// ---------------------------------------------------------------------------------------\n// Apply the CONDITION to the chumps that failed their save, if not already affected\n//\nlet gameRound = game.combat ? game.combat.round : 0;\nfor (let i = 0; i < failCount; i++) {\n    jez.trc(2, trcLvl, ` ${i} Processing: `, failures[i])\n    // Determine if target already has the affect\n    //if (target.effects.find(ef => ef.data.label === effect)) {\n    //if (failures[i].data.actorData.effects.find(ef => ef.data.label === CONDITION)) {\n    if (failures[i].data.actorData.effects.find(ef => ef.label === CONDITION)) {\n        jez.trc(2, trcLvl, ` ${failures[i].name} is already ${CONDITION}. `, failures[i])\n    } else {\n        jez.trc(2, trcLvl, ` ${failures[i].name} is not yet ${CONDITION}. `, failures[i])\n        //----------------------------------------------------------------------------------------\n        // add CUB Condition this is either/or with manual add in section following\n        //\n        game.cub.addCondition([\"Prone\"], failures[i], {\n            allowDuplicates: false,\n            replaceExisting: false,\n            warn: true\n        });\n    }\n}\n// ---------------------------------------------------------------------------------------\n// Post that the target failed and the consequences.\n//\nmsg = `Creatures that failed their saving have been knocked @JournalEntry[FBPUaHRxNyNXAOeh]{prone}.` + xtraMsg;\nawait postResults(msg);\njez.trc(2, trcLvl, ` ${msg}`);\njez.trc(1, trcLvl, `************ Terminating ${MACRONAME} ****************`)\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************\n * Post the results to chat card\n ***************************************************************************************/\n async function postResults(msg) {\n    jez.trc(3, trcLvl, msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Pop a VFX Tile where the template was\n ***************************************************************************************************/\n async function placeTileVFX(TEMPLATE_ID) {\n    const FUNCNAME = \"placeTileVFX(TEMPLATE_ID)\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(3,trcLvl,\"Parameters\",\"TEMPLATE_ID\",TEMPLATE_ID)\n    // Grab the size of grid in pixels per square\n    const GRID_SIZE = canvas.scene.data.grid;\n    // Search for the MeasuredTemplate that should have been created by the calling item\n    let template = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    // Delete the template to clean up the scene\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    // Place the tile with an embedded VFX\n    let tileProps = {\n        x: template.center.x - GRID_SIZE/2,   // X coordinate is center of the template\n        y: template.center.y - GRID_SIZE/2,   // Y coordinate is center of the template\n        //img: \"modules/jb2a_patreon/Library/4th_Level/Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm\",\n        img: \"modules/jb2a_patreon/Library/Generic/Fire/GroundCrackLoop_03_Regular_Orange_600x600.webm\",\n        width: GRID_SIZE * 3,   // VFX should occupy 2 tiles across\n        height: GRID_SIZE * 3   // ditto\n    };\n    // let newTile = await Tile.create(tileProps)   // Depricated\n    // Following line throws a permission error for non-GM acountnts running this code.\n    // let newTile = await game.scenes.current.createEmbeddedDocuments(\"Tile\", [tileProps]);  // FoundryVTT 9.x\n    let existingTiles = game.scenes.current.tiles.contents\n    let newTile = await jez.createEmbeddedDocs(\"Tile\", [tileProps])\n    jez.trc(3, \"jez.createEmbeddedDocs returned\", newTile);\n    if (newTile) {\n        let returnValue = newTile[0].data._id\n        jez.trc(2,`--- Finished --- ${MACRONAME} ${FUNCNAME} --- Generated:`,returnValue);\n        return returnValue; // If newTile is defined, return the id.\n    }\n    else {   // newTile will be undefined for players, so need to fish for a tile ID\n        let gameTiles = i = null\n        let delay = 5\n        for (i = 1; i < 20; i++) {\n            await jez.wait(delay)   // wait for a very short time and see if a new tile has appeared\n            jez.trc(3,trcLvl,`Seeking new tile, try ${i} at ${delay*i} ms after return`)\n            gameTiles = game.scenes.current.tiles.contents\n            if (gameTiles.length > existingTiles.length) break\n        }\n        if (i === 40) return jez.badNews(`Could not find new tile, sorry about that`,\"warn\")\n        jez.trc(3,trcLvl,\"Seemingly, the new tile has id\",gameTiles[gameTiles.length - 1].id)\n        let returnValue = gameTiles[gameTiles.length - 1].id\n        jez.trc(2,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} --- Scraped:`,returnValue);\n        return returnValue\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "autoanimations": {
      "killAnim": false,
      "below": false,
      "override": false,
      "targetToken": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "animType": "template",
      "animation": "entangle",
      "color": "brown",
      "options": {
        "tempType": "rect",
        "variant": "01",
        "removeTemplate": true,
        "enableCustom": false,
        "customPath": "",
        "persistent": true,
        "persistType": "sequencerground",
        "opacity": 0.6,
        "overhead": false,
        "occlusionMode": "03",
        "occlusionAlpha": 0.75,
        "repeat": 1,
        "delay": 250,
        "scaleX": 1,
        "scaleY": 1,
        "menuType": "square",
        "ammo": false
      },
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      },
      "macro": {
        "enable": false
      },
      "animLevel": false,
      "preview": false,
      "levels3d": {
        "type": ""
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}