{
  "name": "entangle_helper2",
  "type": "script",
  "author": "ZjFlOWYxZjM5ZTZj",
  "img": "/systems/dnd5e/icons/spells/vines-acid-2.jpg",
  "scope": "global",
  "command": "const MACRONAME = \"entangle_helper2.js\"\n/*****************************************************************************************\n * This is a helper macro for the main entangle script.  It is intended to provide an \n * option dialog for a Restrained token to attempt a skill check to escape the sitch.\n * \n * Input arguments expected to be: ${EFFECT} ${CHK_TYPE} ${SAVE_DC} ${aToken.id}\n * \n * 02/23/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nconst LAST_ARG = args[args.length - 1];\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE removal\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\n async function doEach() {\n    const FUNCNAME = \"doEach()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    const CONDITION = args[1]\n    const CHK_TYPE  = args[2]\n    const CHK_DC    = args[3]\n    const TOKEN_ID  = args[4]\n    const SOURCE_T  = canvas.tokens.placeables.find(ef => ef.id === TOKEN_ID)\n    jez.log(`Condition: ${CONDITION}, Check Type: ${CHK_TYPE}, Check DC: ${CHK_DC}, Source: ${SOURCE_T.name}`)\n\n    let d = Dialog.confirm({\n        title: \"Attempt to break the Restrained effect\",\n        content: `<p>Does ${aToken.name} want to spend its action this turn to attempt to break the \n        restrained effect impossed by ${SOURCE_T.name}?  This would be a DC${CHK_DC} ${CHK_TYPE} skill \n        check.<br></p>`,\n        yes: () => dCallback(CONDITION, CHK_TYPE, CHK_DC, SOURCE_T),\n        no: () => console.log(\"You chose ... poorly\"),\n        defaultYes: false\n       });\n    \n    jez.log(\"The doEach code\")\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * \n ***************************************************************************************************/\n async function dCallback(CONDITION, CHK_TYPE, CHK_DC, SOURCE_T) {\n    jez.log(\"perform skill check and maybe clear the effect\")\n    const FLAVOR = `Attempting ${CHK_TYPE.toUpperCase()} DC${CHK_DC} to break ${CONDITION}`\n    let check = (await aToken.actor.rollAbilityTest(CHK_TYPE,\n        { flavor: FLAVOR, chatMessage: true, fastforward: true })).total;\n    if (check >= CHK_DC)  {\n        let effect = aToken.actor.effects.find(ef => ef.data.label === CONDITION) ?? null\n        await effect.delete();\n        jez.postMessage({\n            color: \"dodgerblue\",\n            fSize: 14,\n            icon: aToken.data.img,\n            msg: `<b>${aToken.name}</b> succeeded in breaking the <b>${CONDITION}</b> condition \n                imposed by <b>${SOURCE_T.name}</b>. \n                Skill check of <b>${check}</b> beats the ${CHK_TYPE.toUpperCase()} DC${CHK_DC}.`,\n            title: `${aToken.name} breaks free`,\n            token: aToken\n        })\n    } else {\n        jez.postMessage({\n            color: \"firebrick\",\n            fSize: 14,\n            icon: aToken.data.img,\n            msg: `<b>${aToken.name}</b> fails to break the <b>${CONDITION}</b> condition imposed \n                by <b>${SOURCE_T.name}</b>. \n                Skill check of <b>${check}</b> fell short of the ${CHK_TYPE.toUpperCase()} DC${CHK_DC}.`,\n            title: `${aToken.name} remains ${CONDITION}`,\n            token: aToken\n        })\n    }\n }",
  "flags": {
    "combat-utility-belt": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runAsGM": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}