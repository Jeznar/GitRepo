{
  "name": "Electrify",
  "type": "spell",
  "img": "Icons_JGB/Conditions/electrified.png",
  "data": {
    "description": {
      "value": "<h4 id=\"occultist-spell-list-casting-compendium-electrify\" style=\"box-sizing:border-box;-webkit-print-color-adjust:exact;font-family:MrJeeves;line-height:14.5px;color:#58180d;margin-top:0.2em;margin-bottom:0px;font-size:0.458cm;-webkit-text-stroke-width:0.5px;padding-bottom:3px;text-size-adjust:auto\">Electrify</h4>\n<p>You channel lightning into your hands. After casting this spell, if you make a successful melee spell attack, unarmed strike or a melee weapon attack with a weapon made of a conductive material (such as metal), the target takes <strong>1d10 lightning damage </strong>and must make a <strong>Constitution saving </strong>throw in addition to the melee attack damage.</p>\n<p>On a failed save, the target becomes stunned until the start of their next turn. The spell ends after dealing damage, or at the start of your next turn, whichever occurs first.</p>\n<p>For the duration of the spell, you can cast the spellÂ shocking grasp.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Kibbles Occultist",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "round"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "Pair of singed gloves",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Electrify",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Electrify\"\njez.log(MACRONAME)\n/*****************************************************************************************\n * Homebrew Spell from Occultist list\n * \n * 03/11/22 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\njez.log(\"------- Global Values Set -------\",\n    `Active Token (aToken) ${aToken?.name}`, aToken,\n    `Active Actor (aActor) ${aActor?.name}`, aActor,\n    `Active Item (aItem) ${aItem?.name}`, aItem)\nlet msg = \"\";\nlet errorMsg = \"\";\nconst GAME_RND = game.combat ? game.combat.round : 0;\nconst SAVE_DC = aToken.actor.data.data.attributes.spelldc;\nconst SAVE_TYPE = \"con\";\nconst COND_APPLIED = \"Stunned\"\nconst COND_ICON = aItem.img\nconst DAM_TYPE = \"lightning\";\nconst SPELL_LVL = LAST_ARG?.spellLevel ? LAST_ARG.spellLevel : 2\nconst TEMP_SPELL = \"Shocking Grasp\"               // Name as expected in Items Directory \nconst NEW_SPELL = `${MACRO}'s ${TEMP_SPELL}`       // Name of item in actor's spell book\njez.log(\"CONSTANTS Set\", \"GAME_RND\", GAME_RND, \"SAVE_DC\", SAVE_DC, \"SAVE_TYPE\", SAVE_TYPE,\n    \"COND_ICON\", COND_ICON, \"DAM_TYPE\", DAM_TYPE, \"SPELL_LVL\", SPELL_LVL)\n// VFX Settings -------------------------------------------------------------------\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst VFX_BEAM = \"jb2a.electric_arc.01\"\nconst VFX_CASTER = \"jb2a.static_electricity.01.blue\"\nconst VFX_OPACITY = 1.0;\nconst VFX_SCALE = 0.35;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nlet returnFunc = null\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"DamageBonus\") {\n    let returnFunc = await doBonusDamage();    // DAE Damage Bonus\n    return(returnFunc)\n}\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    let existingEffect = await aToken.actor.effects.find(ef => ef.data.label === aItem.name);\n    if (existingEffect) {\n        msg = `<b>${aToken.name}</b> already has ${aItem.name}. Terminating.`;\n        ui.notifications.warn(msg)\n        postResults(msg);\n        return\n    }\n    //------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_CASTER)\n        .attachTo(aToken)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .persist()\n        //.repeats(3,1000)\n        .fadeIn(2000)\n        .fadeOut(2000)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------\n    // Define and apply the effect\n    // \n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: 0, value: `ItemMacro.${aItem.name}`, priority: 20 },\n            { key: \"flags.midi-qol.itemDetails\", mode: 0, value: `${LAST_ARG.uuid}`, priority: 20 },\n            { key: \"macro.itemMacro\", mode: CUSTOM, value: \"arbitrary_paramater\", priority: 20 },\n        ],\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        duration: { rounds: 1, seconds: 6, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { dae: { itemData: aItem, specialDuration: [\"1Hit:msak\", \"1Hit:mwak\"] } },\n        icon: aItem.img,\n        label: aItem.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: effectData });\n    //-------------------------------------------------------------------------------------------------\n    // Add the shocking grasp spell to spell book\n    // \n    msg = `An At-Will Spell \"${NEW_SPELL}\" has been added to ${aToken.name} for the duration of this spell`\n    ui.notifications.info(msg);\n    copyEditItem(aToken)\n    //-------------------------------------------------------------------------------------------------\n    // Post completion message\n    // \n    msg = `${aToken.name} channels lightning into his/her hands.`\n    await jez.addMessage(game.messages.get(args[args.length - 1].itemCardId),\n                   {color:\"darkblue\",fSize:14,msg:msg,tag:\"saves\"})\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"doBonusDamage\"\n ***************************************************************************************************/\nasync function doBonusDamage() {\n    const FUNCNAME = \"doBonusDamage()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    if (args[0].tag === \"DamageBonus\") {\n        //------------------------------------------------------------------------------------------\n        // Only applies to melee weapon and spell attacks\n        // Action Types: mwak, msak, rwak, rsak\n        jez.log(\"-------------------\")\n        jez.log(\"LAST_ARG.item.data.actionType\",LAST_ARG.item.data.actionType)\n        jez.log(\"-------------------\")\n        let actionType = LAST_ARG.item.data.actionType\n        if (!(actionType === \"mwak\" || actionType === \"msak\")) {\n            msg = `<b>${actionType.toUpperCase()}</b> action does not trigger ${aItem.name} damage.`;\n            ui.notifications.info(msg)\n            jez.log(msg)\n            return\n        }\n        let tToken = canvas.tokens.get(LAST_ARG.hitTargets[0].id);\n        jez.log(\"tToken\", tToken)\n        let itemUuid = getProperty(LAST_ARG.actor.flags, \"midi-qol.itemDetails\");\n        let itemN = await fromUuid(itemUuid);\n        jez.log(\"itemN =====>\", itemN)\n        let numDice = LAST_ARG.isCritical ? 2 : 1;\n        await jez.wait(500);\n        //--------------------------------------------------------------------------------------------\n        // Launch VFX on target\n        // \n        new Sequence()\n        .effect()\n            .atLocation(aToken)\n            .reachTowards(tToken)\n            .scale(1)\n            .file(VFX_BEAM)\n            .waitUntilFinished(-4000) \n            .belowTokens(false)\n        .effect()\n            .atLocation(tToken)\n            .repeats(3,1500)\n            .scale(0.7)\n            .file(\"jb2a.dizzy_stars.200px.blueorange\")\n        .play()\n        //-------------------------------------------------------------------------------------------------------------\n        // Apply Stunned condition if save is failed\n        //   \n        const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} DC${SAVE_DC} to avoid ${MACRO}'s ${COND_APPLIED}`;\n        let saveRoll = (await tToken.actor.rollAbilitySave(\"con\", { flavor:FLAVOR }))\n        jez.log(\"saveRoll\", saveRoll)\n        if (saveRoll.total < SAVE_DC) game.cub.addCondition(\"Stunned\", tToken);\n        //-------------------------------------------------------------------------------------------------------------\n        // Modify the effects to have a proper termination time\n        //\n        modEffect(tToken, \"Stunned\")\n        modEffect(tToken, \"Incapacitated\")\n        //-------------------------------------------------------------------------------------------------------------\n        // Dig through the chat history, to find the message that should have new message added...but don't use it?\n        //\n        let msgHistory = [];\n        game.messages.reduce((list, message) => {\n            if (message.data?.flags[\"midi-qol\"]?.itemId === aItem._id && message.data.speaker.token === aToken.id) list.push(message.id);\n            return list;\n        }, msgHistory);\n        //-------------------------------------------------------------------------------------------------------------\n        // Return Extra Damage function\n        //\n        jez.log(`-------------- Finishing(Extra Damage))--- ${MACRONAME} ${FUNCNAME} -----------------`,\n            \"numDice\", numDice, \"DAM_TYPE\", DAM_TYPE, \"itemN.name\", itemN.name);\n        return { damageRoll: `${numDice}d10[${DAM_TYPE}]`, flavor: `(${itemN.name} (${CONFIG.DND5E.damageTypes[DAM_TYPE]}))` };\n    }\n    jez.log(`-------------- Finished(Bottom)--- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Modify existing effect to include a special duration of turnStart  \n ***************************************************************************************************/\nasync function modEffect(token5e, EFFECT) {\n    jez.log(\"------- modEffect(token5e, EFFECT) --------\",\"token5e\",token5e,\"EFFECT\",EFFECT)\n    await jez.wait(500)\n    let effect = await token5e.actor.effects.find(i => i.data.label === EFFECT);\n    jez.log(`${EFFECT} >>> effect`, effect)\n    jez.log(\"effect.data.flags.dae\",effect.data.flags.dae)\n    if (effect.data.flags.dae === undefined) {\n        jez.log(\"Adding DAE to our critter\")\n        effect.data.flags.dae = {}\n    } else jez.log(\"flags.dae already existed, party time?\")\n    effect.data.flags.dae.specialDuration = [\"turnStart\"]\n    const result = await effect.update({ 'flags.dae.specialDuration': effect.data.flags.dae.specialDuration});\n    jez.log(`${EFFECT} >>> result`,result)\n    if (result) jez.log(`${EFFECT} >>> Active Effect ${EFFECT} updated!`, result);\n    else jez.log(`${EFFECT} >>> Active Effect not updated! =(`, result);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //-------------------------------------------------------------------------------------------------------------\n    // End the effect on the active token\n    //  \n    Sequencer.EffectManager.endEffects({ name: VFX_NAME, object: aToken });\n    //-----------------------------------------------------------------------------------------------\n    // Delete the temporary ability from the actor's spell book\n    //\n    let itemFound = aActor.items.find(item => item.data.name === NEW_SPELL && item.type === \"spell\")\n    jez.log(\"itemFound\", itemFound)\n    if (itemFound) {\n        await itemFound.delete();\n        msg = `An At-Will Spell \"${NEW_SPELL}\" has been deleted from ${aToken.name}'s spell book`\n        ui.notifications.info(msg);\n    }\n\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Copy the temporary item to actor's spell book and edit it as appropriate\n ***************************************************************************************************/\n async function copyEditItem(token5e) {\n    const FUNCNAME = \"copyEditItem(token5e)\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    let oldActorItem = token5e.actor.data.items.getName(NEW_SPELL)\n    if (oldActorItem) await deleteItem(token5e.actor, oldActorItem)\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Get the item from the Items directory and slap it onto the active actor\")\n    let itemObj = game.items.getName(TEMP_SPELL)\n    if (!itemObj) {\n        msg = `Failed to find ${TEMP_SPELL} in the Items Directory`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return (false)\n    }\n    console.log('Item5E fetched by Name', itemObj)\n    await replaceItem(token5e.actor, itemObj)\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Edit the item on the actor\")\n    let aActorItem = token5e.actor.data.items.getName(TEMP_SPELL)\n    jez.log(\"aActorItem\", aActorItem)\n    if (!aActorItem) {\n        msg = `Failed to find ${TEMP_SPELL} on ${token5e.name}`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return (false)\n    }\n    //-----------------------------------------------------------------------------------------------\n    jez.log(`Remove the don't change this message assumed to be embedded in the item description.  It \n             should be of the form: <p><strong>%%*%%</strong></p> followed by white space`)\n    const searchString = `<p><strong>%%.*%%</strong></p>[\\s\\n\\r]*`;\n    const regExp = new RegExp(searchString, \"g\");\n    const replaceString = ``;\n    let content = await duplicate(aActorItem.data.data.description.value);\n    content = await content.replace(regExp, replaceString);\n    let itemUpdate = {\n        'name': NEW_SPELL,\n        'data.description.value': content,\n    }\n    await aActorItem.update(itemUpdate)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/*************************************************************************************\n * replaceItem\n * \n * Replace or Add targetItem to inventory of actor5e passed as parms\n *************************************************************************************/\nasync function replaceItem(actor5e, targetItem) {\n    await deleteItem(actor5e, targetItem)\n    return (actor5e.createEmbeddedDocuments(\"Item\", [targetItem.data]))\n}\n/*************************************************************************************\n * deleteItem\n * \n * Delete targetItem to inventory of actor5e passed as parms\n *************************************************************************************/\nasync function deleteItem(actor5e, targetItem) {\n    let itemFound = actor5e.items.find(item => item.data.name === targetItem.data.name && item.type === targetItem.type)\n    if (itemFound) await itemFound.delete();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.ZT7bW79O3LuZ1yPm"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}