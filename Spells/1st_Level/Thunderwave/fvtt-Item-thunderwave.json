{
  "name": "Thunderwave",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/lightning-jade-1.jpg",
  "data": {
    "description": {
      "value": "<p>A wave of thunderous force sweeps out from you. Each creature in a 15-foot cube originating from you must make a Constitution saving throw. On a failed save, a creature takes 2d8 thunder damage and is pushed 10 feet away from you. On a successful save, the creature takes half as much damage and isn't pushed.</p>\n<p>In addition, unsecured objects that are completely within the area of effect are automatically pushed 10 feet away from you by the spell's effect, and the spell emits a thunderous boom audible out to 300 feet.</p>\n<p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This is automated,&nbsp; but judgement needs to be applied to final locations after knockback and perhaps positions manually adjusted.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 15,
      "width": null,
      "units": "ft",
      "type": "cube"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "2d8",
          "thunder"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": 12,
      "scaling": "spell"
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    }
  },
  "effects": [],
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Thunderwave",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Thunderwave.0.3.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Slap a text message on the item card indicating Who and What should be moved by the \n * spell.\n * \n * Spell Description: A wave of thunderous force sweeps out from you. Each creature in a \n *   15-foot cube originating from you must make a Constitution saving throw. On a failed \n *   save, a creature takes 2d8 thunder damage and is pushed 10 feet away from you. On a \n *   successful save, the creature takes half as much damage and isn't pushed.\n *  \n *   In addition, unsecured objects that are completely within the area of effect are \n *   automatically pushed 10 feet away from you by the spell's effect, and the spell emits \n *   a thunderous boom audible out to 300 feet.\n * \n *   Higher Level.When you cast this spell using a spell slot of 2nd level or higher, the \n *   damage increases by 1d8 for each slot level above 1st.\n * \n * 12/11/21 0.1 Creation of Macro\n * 05/03/22 0.2 Updated for FoundryVTT 9.x\n * 12/11/22 0.3 Address knockback into wall issue and logging style\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //-----------------------------------------------------------------------------------------------------------------------------------\n if (TL>0) jez.trace(`${TAG} === Starting ===`);\n if (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set standard variables\n //\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor; \n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set Macro specific globals\n //\nlet xtraMsg=`<br><br>\n            Unsecured objects, completely in the area of effect are automatically \n            pushed 10 feet away from you by the spell's effect.<br><br>\n            The spell emits a thunderous boom audible out to 300 feet.`\n//-----------------------------------------------------------------------------------------------------------------------------------\n// If no target failed, post result and terminate \n//\nlet failCount = args[0].failedSaves.length \nif (failCount === 0) return jez.badNews(`No creatures failed their saving throw.`, 'w')\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Loop through those that failed saving thow and knock them back\n//\nfor (let i = 0; i < args[0].failedSaves.length; i++) {\n    if (TL>1) jez.trace(`${TAG} ${i}) ${args[0].failedSaves[i].name} ${args[0].failedSaves[i].id}`, args[0].failedSaves);\n    let tToken = canvas.tokens.get(args[0].failedSaves[i].id);  \n    await jez.moveToken(aToken, tToken, 2, 250)\n    // knockback(aToken, tToken, 10, {traceLvl:TL});\n}\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Post that the target failed and the consequences.\n//\nmsg = `Creatures that failed their saving throw are pushed <b>10 feet</b> from the caster. \n       without provoking opportunity attacks.` + xtraMsg;\npostResults(msg);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n  function postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Knockback function lifted from Crymic's Thunderous Smite Macro which he borrowed from theripper93\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n// async function knockback(ptoken, ttoken, distance,options={}) {\n//     const FUNCNAME = \"knockback(ptoken, ttoken, distance,options={})\";\n//     const FNAME = FUNCNAME.split(\"(\")[0] \n//     const TAG = `${MACRO} ${FNAME} |`\n//     const TL = options.traceLvl ?? 0\n//     if (TL>0) jez.trace(`${TAG} --- Starting ---`);\n//     if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"ptoken  \", ptoken, \"ttoken  \", ttoken, \"distance\", distance,\n//         \"options \",options);\n//     //-------------------------------------------------------------------------------------------------------------------------------\n//     // \n//     //\n//     const x1 = ptoken.center.x;\n//     const x2 = ttoken.center.x;\n//     const y1 = ptoken.center.y;\n//     const y2 = ttoken.center.y;\n//     if (TL>1) jez.trace(`${TAG} token 1 ${x1},${y1}, token 2 ${x2},${y2}`)\n//     //-------------------------------------------------------------------------------------------------------------------------------\n//     // \n//     //\n//     let angcoeff = Math.abs((y2 - y1) / (x2 - x1));\n//     if (angcoeff > 1) angcoeff = 1 / angcoeff;\n//     const unitDistance = distance + (distance * Math.sqrt(2) - distance) * angcoeff;\n//     const gridUnit = canvas.scene.data.grid;\n//     if (TL>1) jez.trace(`${TAG} angcoeff ${angcoeff}, unitDistance ${unitDistance}`);\n//     distance = (distance * canvas.scene.data.grid) / canvas.scene.data.gridDistance;\n//     //-------------------------------------------------------------------------------------------------------------------------------\n//     // \n//     //\n//     if (ptoken.center.x == ttoken.center.x) {\n//         if (ptoken.center.y - ttoken.center.y > 0) {\n//             await updateKB({ \"y\": ttoken.data.y - distance, \"x\": ttoken.data.x }, { \"x\": ttoken.center.x, \"y\": ttoken.center.y - distance })\n//         }\n//         else {\n//             await updateKB({ \"y\": ttoken.data.y + distance, \"x\": ttoken.data.x }, { \"x\": ttoken.center.x, \"y\": ttoken.center.y + distance })\n//         }\n//     }\n//     else if (ptoken.center.y == ttoken.center.y) {\n//         if (ptoken.center.x - ttoken.center.x > 0) {\n//             await updateKB({ \"x\": ttoken.data.x - distance, \"y\": ttoken.data.y }, { \"x\": ttoken.center.x - distance, \"y\": ttoken.center.y })\n//         }\n//         else {\n//             await updateKB({ \"x\": ttoken.data.x + distance, \"y\": ttoken.data.y }, { \"x\": ttoken.center.x + distance, \"y\": ttoken.center.y })\n//         }\n//     }\n//     else {\n//         let fdest = await findDestination();\n//         let coord = fdest.reduce(function (prev, curr) {\n//             return (Math.abs(curr.dist - unitDistance) < Math.abs(prev.dist - unitDistance) ? curr : prev);\n//         });\n//         fdest = await canvas.grid.getSnappedPosition(coord.x - gridUnit / 2, coord.y - gridUnit / 2, 1);\n//         await updateKB(fdest);\n//     }\n//     //-----------------------------------------------------------------------------------------------------------------------------------\n//     // \n//     //\n//     async function getXy(x) {\n//         return (y2 - y1) * (x - x1) / (x2 - x1) + y1;\n//     }\n//     //-----------------------------------------------------------------------------------------------------------------------------------\n//     // \n//     //\n//     async function findDestination() {\n//         const scenew = canvas.dimensions.width;\n//         const FUNCNAME = \"findDestination()\";\n//         jez.log(\"--------findDestination()----------\",\n//             \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n//             \"scenew\", scenew);\n\n//         let coordinatesArray = [];\n//         for (let i = 0; i <= scenew; i += 1) {\n//             let ty = await getXy(i);\n//             let snapCoord = await canvas.grid.getCenter(i, ty);\n//             let cdist = await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ttoken.center);\n//             if (await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ptoken.center) > await canvas.grid.measureDistance(ttoken.center, ptoken.center) && await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ptoken.center) > unitDistance) {\n//                 coordinatesArray.push({ \"x\": i, \"y\": ty, \"dist\": cdist });\n//             }\n//         }\n//         jez.log(\"--------findDestination()----------\",\n//             \"Ending\", `${MACRONAME} ${FUNCNAME}`);\n//         return coordinatesArray;\n//     }\n//     //-----------------------------------------------------------------------------------------------------------------------------------\n//     //\n//     //\n//     async function updateKB(center, originalcenter) {\n//         const FUNCNAME = \"findDestination()\";\n//         jez.log(\"------updateKB(center, originalcenter)-------\",\n//             \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n//             \"center\", center,\n//             \"originalcenter\", originalcenter);\n\n//         if (originalcenter) {\n//             if (await ttoken.checkCollision(originalcenter)) {\n//                 if (knockDist <= 5) return;\n//                 knockDist -= 5;\n//                 await knockback(pusher, pushed, knockDist);\n//             }\n//             else {\n//                 await ttoken.document.update(center);\n//             }\n//         }\n//         else {\n//             if (await ttoken.checkCollision(center)) {\n//                 if (knockDist <= 5) return;\n//                 knockDist -= 5;\n//                 await knockback(pusher, pushed, knockDist);\n//             }\n//             else {\n//                 await ttoken.document.update(center);\n//             }\n//         }\n//         jez.log(\"------updateKB(center, originalcenter)-------\",\n//             \"Ending\", `${MACRONAME} ${FUNCNAME}`);\n//     }\n// }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.vNeCdGdVV9Q8Vw6P"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}