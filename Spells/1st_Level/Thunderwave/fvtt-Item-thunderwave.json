{
  "name": "Thunderwave",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/lightning-jade-1.jpg",
  "data": {
    "description": {
      "value": "<p>A wave of thunderous force sweeps out from you. Each creature in a 15-foot cube originating from you must make a Constitution saving throw. On a failed save, a creature takes 2d8 thunder damage and is pushed 10 feet away from you. On a successful save, the creature takes half as much damage and isn't pushed.</p><p></p><p>In addition, unsecured objects that are completely within the area of effect are automatically pushed 10 feet away from you by the spell's effect, and the spell emits a thunderous boom audible out to 300 feet.</p><p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 15,
      "width": null,
      "units": "ft",
      "type": "cube"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "2d8",
          "thunder"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "con",
      "dc": 12,
      "scaling": "spell"
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Thunderwave",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Thunderwave.0.2\"\n/*****************************************************************************************\n * Slap a text message on the item card indicating Who and What should be moved by the \n * spell.\n * \n * Spell Description: A wave of thunderous force sweeps out from you. Each creature in a \n *   15-foot cube originating from you must make a Constitution saving throw. On a failed \n *   save, a creature takes 2d8 thunder damage and is pushed 10 feet away from you. On a \n *   successful save, the creature takes half as much damage and isn't pushed.\n *  \n *   In addition, unsecured objects that are completely within the area of effect are \n *   automatically pushed 10 feet away from you by the spell's effect, and the spell emits \n *   a thunderous boom audible out to 300 feet.\n * \n *   Higher Level.When you cast this spell using a spell slot of 2nd level or higher, the \n *   damage increases by 1d8 for each slot level above 1st.\n * \n * 12/11/21 0.1 Creation of Macro\n * 05/03/22 0.2 Updated for FoundryVTT 9.x\n *****************************************************************************************/\nlet msg = \"\";\nlet xtraMsg=`<br><br>\n            Unsecured objects, completely in the area of effect are automatically \n            pushed 10 feet away from you by the spell's effect.<br><br>\n            The spell emits a thunderous boom audible out to 300 feet.`\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(\"---------------------------------------------------------------------------\",\n    \"Starting\", `${MACRONAME}`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\n// ---------------------------------------------------------------------------------------\n// If no target failed, post result and terminate \n//\nlet failCount = args[0].failedSaves.length \njez.log(`${failCount} args[0].failedSaves: `,args[0].failedSaves)\nif (failCount === 0) {\n    msg = `No creatures failed their saving throw.` + xtraMsg;\n    jez.log(` ${msg}`, args[0].saves); \n    postResults(msg);\n    return;\n}\n// ---------------------------------------------------------------------------------------\n// Loop through those that failed saving thow and knock them back\n//\nfor (let i = 0; i < args[0].failedSaves.length; i++) {\n    jez.log(`  ${i}) ${args[0].failedSaves[i].name}`, args[0].failedSaves);\n    jez.log(`     args[0].failedSaves[i].id ${args[0].failedSaves[i].id}`)\n    let tToken = canvas.tokens.get(args[0].failedSaves[i].id);\n    knockback(aToken, tToken, 10);\n}\n// ---------------------------------------------------------------------------------------\n// Post that the target failed and the consequences.\n//\nmsg = `Creatures that failed their saving throw are pushed <b>10 feet</b> from the caster. \n       without provoking opportunity attacks.` + xtraMsg;\njez.log(` ${msg}`);\npostResults(msg);\nreturn;\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Knockback function lifted from Crymic's Thunderous Smite Macro which he borrowed from theripper93\n ***************************************************************************************************/\nasync function knockback(ptoken, ttoken, distance) {\n    const FUNCNAME = \"knockback(ptoken, ttoken, distance)\";\n    jez.log(\"------updateKB(center, originalcenter)-------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n        \"ptoken\", ptoken,\n        \"ttoken\", ttoken,\n        \"distance\", distance);\n\n    const x1 = ptoken.center.x;\n    jez.log(`x1, ${x1}`)\n    const x2 = ttoken.center.x;\n    jez.log(`x2, ${x2}`)\n    const y1 = ptoken.center.y;\n    jez.log(`y1, ${y1}`)\n    const y2 = ttoken.center.y;\n    jez.log(`y2, ${y2}`)\n\n    let angcoeff = Math.abs((y2 - y1) / (x2 - x1));\n    if (angcoeff > 1) angcoeff = 1 / angcoeff;\n    const unitDistance = distance + (distance * Math.sqrt(2) - distance) * angcoeff;\n    const gridUnit = canvas.scene.data.grid;\n    jez.log(\"------\",\"angcoeff\", angcoeff, \"unitDistance\", unitDistance);\n    distance = (distance * canvas.scene.data.grid) / canvas.scene.data.gridDistance;\n\n    if (ptoken.center.x == ttoken.center.x) {\n        if (ptoken.center.y - ttoken.center.y > 0) {\n            await updateKB({ \"y\": ttoken.data.y - distance, \"x\": ttoken.data.x }, { \"x\": ttoken.center.x, \"y\": ttoken.center.y - distance })\n        }\n        else {\n            await updateKB({ \"y\": ttoken.data.y + distance, \"x\": ttoken.data.x }, { \"x\": ttoken.center.x, \"y\": ttoken.center.y + distance })\n        }\n    }\n    else if (ptoken.center.y == ttoken.center.y) {\n        if (ptoken.center.x - ttoken.center.x > 0) {\n            await updateKB({ \"x\": ttoken.data.x - distance, \"y\": ttoken.data.y }, { \"x\": ttoken.center.x - distance, \"y\": ttoken.center.y })\n        }\n        else {\n            await updateKB({ \"x\": ttoken.data.x + distance, \"y\": ttoken.data.y }, { \"x\": ttoken.center.x + distance, \"y\": ttoken.center.y })\n        }\n    }\n    else {\n        let fdest = await findDestination();\n        let coord = fdest.reduce(function (prev, curr) {\n            return (Math.abs(curr.dist - unitDistance) < Math.abs(prev.dist - unitDistance) ? curr : prev);\n        });\n        fdest = await canvas.grid.getSnappedPosition(coord.x - gridUnit / 2, coord.y - gridUnit / 2, 1);\n        await updateKB(fdest);\n    }\n\n    //-------------------------------------------------------------------------------\n    // \n    //\n    async function getXy(x) {\n        return (y2 - y1) * (x - x1) / (x2 - x1) + y1;\n    }\n    //-------------------------------------------------------------------------------\n    // \n    //\n    async function findDestination() {\n        const scenew = canvas.dimensions.width;\n        const FUNCNAME = \"findDestination()\";\n        jez.log(\"--------findDestination()----------\",\n            \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n            \"scenew\", scenew);\n\n        let coordinatesArray = [];\n        for (let i = 0; i <= scenew; i += 1) {\n            let ty = await getXy(i);\n            let snapCoord = await canvas.grid.getCenter(i, ty);\n            let cdist = await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ttoken.center);\n            if (await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ptoken.center) > await canvas.grid.measureDistance(ttoken.center, ptoken.center) && await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ptoken.center) > unitDistance) {\n                coordinatesArray.push({ \"x\": i, \"y\": ty, \"dist\": cdist });\n            }\n        }\n        jez.log(\"--------findDestination()----------\",\n            \"Ending\", `${MACRONAME} ${FUNCNAME}`);\n        return coordinatesArray;\n    }\n    //-------------------------------------------------------------------------------\n    //\n    //\n    async function updateKB(center, originalcenter) {\n        const FUNCNAME = \"findDestination()\";\n        jez.log(\"------updateKB(center, originalcenter)-------\",\n            \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n            \"center\", center,\n            \"originalcenter\", originalcenter);\n\n        if (originalcenter) {\n            if (await ttoken.checkCollision(originalcenter)) {\n                if (knockDist <= 5) return;\n                knockDist -= 5;\n                await knockback(pusher, pushed, knockDist);\n            }\n            else {\n                await ttoken.document.update(center);\n            }\n        }\n        else {\n            if (await ttoken.checkCollision(center)) {\n                if (knockDist <= 5) return;\n                knockDist -= 5;\n                await knockback(pusher, pushed, knockDist);\n            }\n            else {\n                await ttoken.document.update(center);\n            }\n        }\n        jez.log(\"------updateKB(center, originalcenter)-------\",\n            \"Ending\", `${MACRONAME} ${FUNCNAME}`);\n    }\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.vNeCdGdVV9Q8Vw6P"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}