{
  "name": "Bane",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/rip-magenta-2.jpg",
  "data": {
    "description": {
      "value": "<p>Up to three creatures of your choice that you can see within range must make <strong>CHA Saves</strong>.</p>\n<p>Whenever a target that fails this saving throw makes an attack roll or a saving throw before the spell ends, the target must <strong>subtract a d4</strong> from the attack roll or saving throw.</p>\n<p><strong>Higher Levels.</strong> When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 216",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 3,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 30,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "cha",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A drop of blood",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "potjmpJPeUA1U4oe",
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "changes": [
        {
          "key": "data.bonuses.abilities.save",
          "mode": 2,
          "value": "-1d4",
          "priority": "20"
        },
        {
          "key": "data.bonuses.mwak.attack",
          "mode": 2,
          "value": "-1d4",
          "priority": "20"
        },
        {
          "key": "data.bonuses.msak.attack",
          "mode": 2,
          "value": "-1d4",
          "priority": "20"
        },
        {
          "key": "data.bonuses.rsak.attack",
          "mode": 2,
          "value": "-1d4",
          "priority": "20"
        },
        {
          "key": "data.bonuses.rwak.attack",
          "mode": 2,
          "value": "-1d4",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 60,
        "rounds": 10
      },
      "icon": "systems/dnd5e/icons/spells/rip-magenta-2.jpg",
      "label": "Bane",
      "origin": "Item.KkaQm4OQJxc6z3to",
      "tint": null,
      "transfer": false,
      "selectedKey": [
        "data.bonuses.abilities.save",
        "data.bonuses.mwak.attack",
        "data.bonuses.msak.attack",
        "data.bonuses.rsak.attack",
        "data.bonuses.rwak.attack"
      ]
    }
  ],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false,
      "forceCEOn": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Compendium.dnd5e.spells.95K2aUhAGV9qXjnf"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Bane",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Bane.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Play a VFX and display a completion message to chart card.\n * \n * 12/16/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 5;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL>0) jez.trace(`${TAG} === Starting ===`);\nif (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor; \nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\n\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0].targets.length === 0)\n        return jez.badNews(`Must target at least one target.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    console.log('L_ARG',L_ARG)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If all targets saved, post appropriate message and exit\n    //\n    if (L_ARG.failedSaves.length === 0) {\n        msg = `No target affected by this spell`\n        postResults(msg)\n        return\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Run a VFX on all failures\n    //\n    for (let i = 0; i < L_ARG.failedSaves.length; i++) {\n        runVFX(L_ARG.failedSaves[i])\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Post completion message\n    //\n    msg = `${L_ARG.failedSaves.length} creatures failed saves; must subtract a d4 from attack and saving rolls, while afflicted.`\n    postResults(msg)\n    if (TL>0) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Launch the VFX effects\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n async function runVFX(token) {\n    console.log('token', token)\n    new Sequence()\n        .effect()\n        .delay(250, 1500)\n        .file(\"modules/jb2a_patreon/Library/Generic/UI/IconFear_01_Dark_Purple_200x200.webm\")\n        .attachTo(token)\n        // .fadeIn(500)\n        .scaleIn(0.25,1000)\n        .scaleToObject(1.0)\n        // .scaleOut(0.25,1000)\n        .fadeOut(1000)\n        .opacity(1)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}