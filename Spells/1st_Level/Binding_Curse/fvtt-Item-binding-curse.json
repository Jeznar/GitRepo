{
  "name": "Binding Curse",
  "type": "spell",
  "img": "icons/magic/control/debuff-chains-orb-movement-blue.webp",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% attempts to anchor a creature to its current location, causing glowing chains of light to connect it to that point.</p>\n<p>For the duration of the spell, if the creature attempts to move away from the anchor,  it must make a <strong>Wisdom saving </strong>throw, or be <strong>unable to move more than 5 feet away</strong> from the anchor until the start of their next turn.</p>\n<div>\n<div>If a creature starts its turn <strong>more than 10 feet</strong> from the binding point, they must make a Strength saving throw or are <strong>dragged 5 feet</strong> toward the binding point.</div>\n<div><hr />\n<p><strong>FoundryVTT</strong>: This spell will place an Anchor token in the scene representing the binding location.  </p>\n</div>\n</div>",
      "chat": "",
      "unidentified": ""
    },
    "source": "https://www.gmbinder.com/share/-M-WtrKeZNFdEXq0MKXw",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "something from the target creature (such as blood, hair, or scales) which the spell consumes",
      "consumed": true,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Item.U2B3Qf4f5qgCsbVo"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Binding Curse",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Binding_Curse.0.3.js\"\njez.log(MACRONAME)\n/*****************************************************************************************\n * Binding Curse.  Post a simple message to the chat card describing the effect\n * \n * Description: You bind a creature to a point within 5 feet of it (1), causing a glowing \n *   chains of light to connect it to that point.\n * \n *   For the duration of the spell, if the creature attempts to move away from the anchor, \n *   it must make a Wisdom saving throw, or be unable to move more than 5 feet away from \n *   from the anchor until the start of their next turn.\n * \n *   If a creature starts its turn more than 10 feet from the binding point, they must make \n *   a Strength saving throw or are dragged 5 feet toward the binding point.\n * \n * 01/11/22 0.1 Creation of Macro\n * 03/24/22 0.2 Update to include these features:\n *              1. Place Anchor Icon on scene, remove at spell completion\n *              2. Connect Anchor Icon to afflicted token at beginning of afflicted token's turns\n *              3. Auto-Perform Save if too far away\n *              4. Pull token back one square on failed STR save, if more than 10 feet \n *                 from anchor.\n *              5. Auto-Perform save on afflicted token move\n * 07/20/22 0.3 Suppress token mold renaming and add convenientDescription\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`-------------------Starting ${MACRONAME}----------------------------------`)\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; \n    else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); \n    else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; \n    else aItem = lastArg.efData?.flags?.dae?.itemData;\nlet SAVE_DC = aItem.data.save.dc;\nlet msg = \"\";\nconst ANCHOR_ORIG_NAME = \"%Anchor%\"\nconst EFFECT = \"Binding Curse\"\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff();             // DAE removal\nif (args[0] === \"each\") doEach();\t\t\t      // DAE removal\njez.log(`-------------------Finishing ${MACRONAME}----------------------------------`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    jez.log(`---------Starting ${MACRONAME} ${FUNCNAME}----------------------`)\n    //--------------------------------------------------------------------------------------\n    // Spawn in the anchor, catch its token.id, exit on failureto spawn\n    //\n    const ANCHOR_ID = await spawnAnchor(tToken, `${tToken.name}'s Anchor`)\n    if (!ANCHOR_ID) {\n        msg = `Anchor could not be spawned.   ${ANCHOR_ORIG_NAME} must be available in <b>Actors \n        Directory</b>.<br><br>\n        Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (false);\n    }\n    //--------------------------------------------------------------------------------------\n    // Create the Binding_Curse effect on the target Token.\n    //\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    const SPELL_DC = jez.getSpellDC(aToken)\n    jez.log(\"SPELL_DC\",SPELL_DC)\n    let effectData = [{\n        label: EFFECT,\n        icon: aItem.img,\n        origin: aToken.uuid,\n        disabled: false,\n        flags: { \n            dae: { itemData: aItem, macroRepeat: \"startEveryTurn\", token: tToken.uuid, stackable: false }, \n            convenientDescription: `Moving more than 5 feet from anchor requires DC${SPELL_DC} WIS Save.`\n        },\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, \n              value: `${aToken.id} ${ANCHOR_ID} ${SPELL_DC}`, priority: 20 }\n        ]\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: effectData });\n    //--------------------------------------------------------------------------------------\n    // Modify the concentrating effect to remove the newly created effect on termination\n    //\n    modConcentratingEffect(aToken, tToken)\n    //--------------------------------------------------------------------------------------\n    // \n    //\n    jez.log(`save ${args[0].saves.length}`, args[0].saves) \n    jez.log(`failed save ${args[0].failedSaves.length}`, args[0].failedSaves)\n    // https://www.w3schools.com/tags/ref_colornames.asp\n    if (args[0].saves.length !== 0) {   // Target must have saved (This should never occur)\n        jez.log(`${tToken.name} saved (This should never occur)`)\n        msg =  `<b>${tToken.name}</b> made its save.`\n    } else {                            // Target failed save\n        jez.log(`${tToken.name} failed`)\n        msg = `<b>${tToken.name}</b> failed its save.`\n    }\n    postResults(msg);\n    jez.log(\"--------------OnUse-----------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return (true);\n}\n/***************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************/\n  async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(\"--------------Off---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n    //--------------------------------------------------------------------------------------\n    // Delete the existing anchor\n    //\n    let sceneId = game.scenes.viewed.id\n    let casterId = args[1]\n    let anchorId = args[2]\n    warpgate.dismiss(anchorId, sceneId)\n    jez.log(\"--------------Off---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n * \n *   If a creature starts its turn more than 10 feet from the binding point, they must make \n *   a Strength saving throw, on faiure dragged 5 feet toward the binding point.\n ***************************************************************************************************/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n    //--------------------------------------------------------------------------------------\n    // Need distance between current token and associated anchor token\n    //\n    const CASTER_ID = args[1]\n    const ANCHOR_ID = args[2]\n    const SAVE_DC = args[3]\n    let anchorToken = canvas.tokens.placeables.find(ef => ef.id === ANCHOR_ID)\n    if (!anchorToken) {\n        msg = `Could not find anchor token with id \"${ANCHOR_ID}\"`\n        ui.notifications.warn(msg);\n        jez.log(msg)\n        return (false)\n    }\n    let distance = jez.getDistance5e(aToken, anchorToken);\n    jez.log(`Distance between ${aToken.name} and ${anchorToken.name} is ${distance} feet.`)\n    if (distance > 10) {\n        //--------------------------------------------------------------------------------------\n        // Roll saving throw to see if aToken needs to be moved 5 feet toward anchor\n        //\n        const SAVE_TYPE = \"str\"\n        const flavor = `${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} <b>DC${SAVE_DC}</b>\n        to avoid <b>${aItem.name}</b> pull`;\n        let save = (await aActor.rollAbilitySave(SAVE_TYPE.toLowerCase(),\n            { flavor:flavor, chatMessage: true, fastforward: true })).total;\n        jez.log(\"save\", save);\n        if (save >= SAVE_DC) {\n            msg = `<b>${aToken.name}</b> resisted the pull of <b>${anchorToken.name}</b>. \n            Rolling a <b>${save}</b> on the ${SAVE_DC} DC \n            ${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} save.`\n            jez.postMessage({ color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                msg: msg, title: `Pull resisted`, token: aToken })\n        } else {\n            jez.moveToken(anchorToken, aToken, -1, 1500)\n            msg = `<b>${aToken.name}</b> is pulled five feet toward <b>${anchorToken.name}</b>. \n            Having failed the ${SAVE_DC} DC ${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} \n            save with a <b>${save}</b> roll.`\n            jez.postMessage({ color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                msg: msg, title: `Pull succeeded`, token: aToken })\n        }\n    }\n    if (distance > 0) chainEffect(aToken, anchorToken)\n    //----------------------------------------------------------------------------------------------\n    // Pop Dialog asking GM if the afflicted wants to attempt a save to move.\n    //\n    const SAVE_TYPE = \"wis\"\n    let template = `<div><label></label>\n     <div class=\"form-group\" style=\"font-size: 14px; padding: 5px; \n     border: 2px solid silver; margin: 5px;\"><b>${aToken.name}</b> must succeed on a ${SAVE_DC} DC \n     ${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} save to move more than 5 feet from\n     <b>${anchorToken.name}</b>.  Does ${aToken.name} wish to attempt the save?</div>`\n    let d = new Dialog({\n        title: `Does ${aToken.name} want to move away from Anchor?`,\n        content: template,\n        buttons: {\n            attempt: {\n                label: \"Attempt Save\",\n                callback: (html) => {\n                    callBackFunc(html);\n                }\n            },\n            decline: {\n                label: \"Decline Save\",\n                callback: (html) => {\n                    msg = `<b>${aToken.name}</b> has declined to attempt a save, it may not move further \n                    from <b>${anchorToken.name}</b> than five feet.`\n                    jez.postMessage({ color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                        msg: msg, title: `Declined Save Attempt`, token: aToken })\n                    return (false)\n                }\n            }\n        },\n        default: \"attempt\"\n    })\n    d.render(true)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n    //----------------------------------------------------------------------------------------------\n    // Dialog call back function to attempt saving throw\n    //\n    async function callBackFunc(html) {\n        const SAVE_TYPE = \"wis\"\n        const flavor = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> to move away`;\n        let save = (await aActor.rollAbilitySave(SAVE_TYPE,\n            { flavor:flavor, chatMessage:true, fastforward:true })).total;\n        jez.log(\"save\", save);\n        if (save >= SAVE_DC) {\n            msg = `<b>${aToken.name}</b> resisted restraint of <b>${anchorToken.name}</b>. Rolling a \n            <b>${save}</b> on the ${SAVE_DC} DC ${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} save \n            and may move freely.`\n            jez.postMessage({ color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                msg:msg, title: `Restraint failed`, token:aToken })\n        } else {\n            msg = `<b>${aToken.name}</b> succumbed to restraint of <b>${anchorToken.name}</b>. Having \n            failed the ${SAVE_DC} DC ${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} save with a \n            <b>${save}</b>. ${aToken.name} may move no further than 5 feet from the anchor.`\n            jez.postMessage({ color:jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                msg: msg, title: `Restraint succeeded`, token: aToken })\n        }\n\n    }\n}\n/***************************************************************************************************\n * Post the results to chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, {color:jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Spawn the Anchor into existance returning the UUID or null on failure\n ***************************************************************************************************/\nasync function spawnAnchor(token, newName) {\n    //--------------------------------------------------------------------------------------\n    // Verify the Actor named ANCHOR_ORIG_NAME exists in Anctor Directory\n    //\n    if (!game.actors.getName(ANCHOR_ORIG_NAME)) {   // If anchor not found, that's all folks\n        msg = `Could not find \"<b>${ANCHOR_ORIG_NAME}</b>\" in the <b>Actors Directory</b>. \n        <br><br>Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (null);\n    }\n    //--------------------------------------------------------------------------------------\n    // Nab the X,Y coordinates from the passed token \n    //\n    let center = token.center\n    jez.log(\"center\", center)\n    //--------------------------------------------------------------------------------------\n    // Define warpgate updates, options and callbacks \n    //\n    jez.log(\"newName for Anchor\", newName)\n\n    let updates = { token: { name: newName } }\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n        pre: async (template) => {\n            preEffects(template);\n            await jez.wait(1000)\n        },\n        post: async (template) => {\n            postEffects(template);\n        }\n    };\n    //--------------------------------------------------------------------------------------\n    // Fire off warpgate \n    //\n    jez.suppressTokenMoldRenaming(1500) \n    await jez.wait(50)\n    let anchorId = await warpgate.spawnAt(center, ANCHOR_ORIG_NAME, updates, CALLBACKS, OPTIONS);\n    jez.log(\"anchorId\", anchorId)\n    return(anchorId)\n}\n/***************************************************************************************************\n * Pre-Spawn VFX\n ***************************************************************************************************/\nasync function preEffects(template) {\n    jez.runRuneVFX(template, jez.getSpellSchool(aItem)) \n    return\n}\n/***************************************************************************************************\n * Post-Spawn VFX\n ***************************************************************************************************/\nasync function postEffects(template) { return }\n/***************************************************************************************************\n * Line connecting token to anchor VFX\n ***************************************************************************************************/\n async function chainEffect(token1, token2) {\n    new Sequence()\n        .effect()\n        .file(\"jb2a.energy_beam.normal.blue.01\")\n        .atLocation(token1)\n        .stretchTo(token2)\n        .fadeIn(500)\n        .fadeOut(500)\n        .duration(2000)\n        .scale(1.0)\n        .opacity(1.0)\n    .play()\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call Remove_Effect_doOff on removal\n ***************************************************************************************************/\nasync function modConcentratingEffect(aToken, tToken) {\n    // COOL-THING: Modify concentrating to remove an effect on target token\n    //----------------------------------------------------------------------------------------------\n    // Make sure the world macro that is used to remove effect exists\n    //\n    const REMOVE_MACRO = \"Remove_Effect_doOff\"\n    const removeFunc = game.macros.getName(REMOVE_MACRO);\n    if (!removeFunc) {\n        ui.notifications.error(`Cannot locate ${RUNASGMMACRO} run as World Macro`);\n        return;\n    }\n    //----------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(100)\n    let effect = await aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. In this case, a world macro that will be\n    // given arguments: tToken.id and  for all affected tokens\n    //    \n    effect.data.changes.push({key: `macro.execute`, mode: jez.CUSTOM, value:`${REMOVE_MACRO} ${tToken.id} '${EFFECT}'`, priority: 20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect \"Concentrating\" updated!`, result);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "autoanimations": null,
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}