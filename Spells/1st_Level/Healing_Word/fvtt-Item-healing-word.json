{
  "name": "Healing Word",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/heal-jade-1.jpg",
  "data": {
    "description": {
      "value": "<p>A creature of your choice that you can see within range regains hit points equal to 1d4 + your spellcasting ability modifier. This spell has no effect on undead or constructs.</p><p><strong>Higher Levels.</strong> When you cast this spell using a spell slot of 2nd level or higher, the healing increases by 1d4 for each slot level above 1st.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 250",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "heal",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "1d4 + @mod",
          "healing"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d4"
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.spells.o8Dh7fblk1d16tnO"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "autoanimations": {
      "killAnim": false,
      "options": {
        "ammo": false,
        "overrideAuto": false
      },
      "override": true,
      "allSounds": {
        "item": {
          "enableAudio": true,
          "file": "worlds/travels-in-barovia/audio/007_-_Holy_Sound_Effects/000_-_Cure_Wounds.mp3",
          "delay": 0,
          "volume": 0.25
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "below": false,
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "audio": {
        "a01": {
          "enable": true,
          "file": "worlds/travels-in-barovia/audio/007_-_Holy_Sound_Effects/000_-_Cure_Wounds.mp3",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animLevel": false,
      "animType": "t1"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Healing Word",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Healing_Word.0.1.js\"\n/*****************************************************************************************\n * Make sure only one target was targeted and run a runVFX on that target\n * \n * 12/02/22 0.1 Creation from Cure_Wounds.0.3.js\n *****************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //---------------------------------------------------------------------------------------------------\n if (TL>1) jez.trace(`${TAG} === Starting ===`);\n if (TL>2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n //---------------------------------------------------------------------------------------------------\n // Set standard variables\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor; \n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n //---------------------------------------------------------------------------------------------------\n // Set Macro specific globals\n //\n//--------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        if (args[0].targets.length !== 1) {      // If not exactly one target \n            jez.refundSpellSlot(aToken, L_ARG.spellLevel, { traceLvl: 0, quiet: false, spellName: aItem.name })\n            return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`,\"w\");\n        }\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    // Run the preCheck function to make sure things are setup as best I can check them\n    if (!preCheck()) return;\n    //----------------------------------------------------------------------------------\n    // Set the tToken\n    //\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // Targeted Token\n    if (TL>1) jez.trace(`${TAG} Targeting ${tToken.name}`,tToken);\n    //-----------------------------------------------------------------------------------------------\n    // If target is immune type, post appropriate message and exit\n    //\n    let immuneRaces = [\"undead\", \"construct\"];  // Set strings that define immune races\n    if (checkType(tToken, immuneRaces)) {\n        msg = `${tToken.name} appears to be unaffected by ${aItem.name}. Heal needs to be manually\n        reversed.`\n        ui.notifications.info(msg)\n        postResults(msg);\n        return (false);\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Launch our VFX\n    //\n    jez.runRuneVFX(aToken, jez.getSpellSchool(aItem), \"yellow\")\n    runVFX(tToken)\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n }\n/***************************************************************************************************\n * Determine if passed token is of one of the types to check against, returning True if found\n ***************************************************************************************************/\nfunction checkType(token5e, typeArray) {\n    let tokenRace = token5e.actor.data.data.details.race;   // Shorten subsequent lines for Target Details Race\n    let tokenType = token5e.actor.data.data.details.type;   // Shorten subsequent lines for Target Details Type\n    //-----------------------------------------------------------------------------------------------\n    // Check to see if we have an immune or vulnerable creature type to deal with\n    //\n    let foundType = false;\n    if (token5e.actor.data.type === \"character\") {\n        jez.log(`${token5e.name} is a PC`, token5e);\n        if (tokenRace) {\n            for (let entity of typeArray) {\n                if (tokenRace.toLowerCase().includes(entity.toLowerCase())) {\n                    foundType = true;\n                }\n            }\n        } \n    } else {\n        //--------------------------------------------------------------------------------------\n        // Loop through each creature type found in the typeArray array.\n        //\n        for (let entity of typeArray) {\n            // If the creature type is custom...\n            if (tokenType.value.toLowerCase() === \"custom\") {\n                // Check custom creature type against our typeArray collection\n                if (tokenType.custom.toLowerCase().includes(entity.toLowerCase())) {\n                    foundType = true;\n                }\n            } \n            // If the creature has a subtype...\n            if (!tokenType.subtype == \"\") {\n                // if(tokenType.subtype) {\n                // If the creature's subtype is found in the typeArray collection...\n                if (tokenType.subtype.toLowerCase() === entity.toLowerCase()) {\n                    // Check creature Subtypes for the types in our typeArray collection.\n                    if (tokenType.custom.toLowerCase().includes(entity.toLowerCase())) {\n                        foundType = true;\n                    }\n                }\n            } \n            // Check creature type against our typeArray collection.\n            if (entity.toLowerCase() === tokenType.value.toLowerCase()) {\n                foundType = true;\n            } \n        }\n    }\n    return (foundType)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Launch the VFX effects\n ***************************************************************************************************/\n async function runVFX(token) {\n    new Sequence()\n        .effect()\n        .file(\"modules/jb2a_patreon/Library/Generic/Healing/HealingAbility_02_Regular_BlueWhite_Loop_600x600.webm\")\n        .attachTo(token)\n        .playbackRate(0.25)\n        .repeats(2,1000,2000)\n        .scaleToObject(2)\n        .fadeOut(400)   \n        .opacity(1)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}