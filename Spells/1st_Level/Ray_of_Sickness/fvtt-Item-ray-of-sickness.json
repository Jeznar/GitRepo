{
  "name": "Ray of Sickness",
  "type": "spell",
  "img": "icons/magic/light/beam-rays-green-small.webp",
  "data": {
    "description": {
      "value": "<p>A ray of sickening greenish energy lashes out toward a creature within range. Make a ranged spell attack against the target. On a hit, the target takes <strong>2d8 poison damage</strong> and must make a <strong>Constitution saving</strong> throw. On a failed save, it is also @JournalEntry[45AvudXYEJYpj1L8]{Poisoned} until the end of your next turn.</p>\n<p><strong>At Higher Levels.&nbsp;</strong>When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This spell is automated.</p>",
      "chat": "<p>A ray of sickening greenish energy lashes out toward a creature within range. Make a ranged spell attack against the target. On a hit, the target takes 2d8 poison damage and must make a Constitution saving throw. On a failed save, it is also poisoned until the end of your next turn.</p>\n<p><strong>At Higher Levels.Â </strong>When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 271",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "rsak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "2d8",
          "poison"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "nec",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138636,
      "definitionId": 2318,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 271,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Debuff"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "forceCEOn": false,
      "fumbleThreshold": null,
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-darklands-spells.7bGytzWQky7BVyfX"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Ray of Sickness",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Ray_of_Sickness.0.4.js\"\n/*****************************************************************************************\n * Built from Crymic's macro of the same name.  I added my structure, naming conventions,\n * and a VFX.\n * \n * 02/19/22 0.1 Creation of Macro\n * 05/02/22 0.2 Update for Foundry 9.x\n * 07/31/22 0.3 Convert to a CE appplication of effect\n * 12/12/22 0.4 Add missed VFX and update logging\n *****************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //-----------------------------------------------------------------------------------------------------------------------------------\n if (TL>0) jez.trace(`${TAG} === Starting ===`);\n if (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set standard variables\n //\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor; \n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n //-----------------------------------------------------------------------------------------------------------------------------------\n // Set Macro specific globals\n //\nconst POISONED_JRNL = `@JournalEntry[${game.journal.getName(\"Poisoned\").id}]{Poisoned}`\nconst SPELL_DC = aToken.actor.data.data.attributes.spelldc;\nconst SAVE_TYPE = \"con\";\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n  * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0].targets.length !== 1)\n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Check for a miss and fire of the VFX\n    //\n    const MISSED = (L_ARG.hitTargets.length === 0) ? true : false\n    runVFX(aToken, tToken, MISSED)\n    if (MISSED) {\n        msg = `${aToken.name}'s Ray of Sickness has missed ${tToken.name}.`\n        postResults(msg)\n        return jez.badNews(msg,'i')\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply effect\n    //\n    let save = await MidiQOL.socket().executeAsGM(\"rollAbility\", { request: \"save\", targetUuid: tActor.uuid, ability: SAVE_TYPE, \n        options: { chatMessage: true, fastForward: true } });\n    const SUCCESS = (save.total < SPELL_DC) ? false : true\n    if (TL>1) jez.trace(`${TAG} Saved?`, SUCCESS)\n    let chatMessage = await game.messages.get(L_ARG.itemCardId);\n    if (!SUCCESS) {\n        //---------------------------------------------------------------------------------------------------------------------------\n        // Obtain and modify CE condition to be applied\n        //\n        let effect = game.dfreds.effectInterface.findEffectByName(\"Poisoned\").convertToObject();\n        if (effect.flags?.dae) effect.flags.dae.specialDuration.push(SPECDUR)\n        else effect.flags.dae = { specialDuration: ['turnEndSource'] } \n        if (TL>1) jez.trace(`${TAG} Adding effect parms`, 'effect', effect, 'tActor.uuid', tActor.uuid, 'aActor.uuid', aActor.uuid)\n        game.dfreds.effectInterface.addEffectWith({effectData:effect, uuid:tActor.uuid, origin:aActor.uuid });\n        //---------------------------------------------------------------------------------------------------------------------------\n        // Post a new message to the chatcard with results\n        //\n        msg = `${tToken.name} is ${POISONED_JRNL} until the end of ${aToken.name}'s next turn`\n        jez.addMessage(chatMessage, { color: \"mediumseagreen\", fSize: 14, msg: msg, tag: \"saves\" })\n        await jez.wait(250)\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the item chat card\n    //\n    const SAVE_MSG = (SUCCESS) ? \"saves\" : \"fails\"\n    let saveResult = `<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${tToken.id}\">${tToken.name} ${SAVE_MSG} with a ${save.total}</div><img src=\"${tToken.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div>`;\n    let saveMessage = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${CONFIG.DND5E.abilities[SAVE_TYPE]} Saving Throw: DC ${SPELL_DC}</div><div class=\"midi-qol-nobox\">${saveResult}</div>`;\n    let content = await duplicate(chatMessage.data.content);\n    let searchString = /<div class=\"midi-qol-saves-display\">[\\s\\S]*<div class=\"end-midi-qol-saves-display\">/g;\n    let replaceString = `<div class=\"midi-qol-saves-display\"><div class=\"end-midi-qol-saves-display\">${saveMessage}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    await ui.chat.scrollBottom();\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // All done\n    //\n    if (TL>0) jez.trace(`${TAG} --- Finished ---`);\n    return (SUCCESS);\n}\n/***************************************************************************************************\n * \n ***************************************************************************************************/\n// COOL-THING: Run the VFX -- Beam from originator to the target\nasync function runVFX(token1, token2, miss) {\n    const VFX_FILE = \"modules/jb2a_patreon/Library/Cantrip/Ray_Of_Frost/RayOfFrost_01_Regular_Green_30ft_1600x400.webm\"\n    new Sequence()\n        .effect()\n        .atLocation(token1)\n        .stretchTo(token2)\n        .missed(miss)\n        .file(VFX_FILE)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}