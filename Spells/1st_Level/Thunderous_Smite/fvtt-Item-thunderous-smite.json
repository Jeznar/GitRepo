{
  "name": "Thunderous Smite",
  "type": "spell",
  "img": "Icons_JGB/Spells/1st%20Level/Thunderous_Smite.png",
  "data": {
    "description": {
      "value": "<p>The first time you hit with a melee weapon attack during this spell’s duration, your weapon rings with thunder that is <strong>audible within 300 feet</strong> of you, and the attack deals an <strong>extra 2d6 thunder damage</strong> to the target.</p>\n<p>Additionally, if the target is a creature, it must succeed on a <strong>Strength</strong> saving throw or be <strong>pushed 10 feet away</strong> from you and knocked prone.</p>\n<p><a href=\"https://www.dndbeyond.com/spells/thunderous-smite\" target=\"_blank\" rel=\"noopener\">D&amp;DBeyond</a></p>",
      "chat": "<p>The first time you hit with a melee weapon attack during this spell’s duration, your weapon rings with thunder that is audible within 300 feet of you, and the attack deals an extra 2d6 thunder damage to the target. Additionally, if the target is a creature, it must succeed on a Strength saving throw or be pushed 10 feet away from you and knocked prone.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 282",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "round"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138848,
      "definitionId": 2322,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 282,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-darklands-spells.gAS3yZ5m2RJ0ydVR"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Thunderous Smite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Thunderous_Smite.0.3.js\"\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(MACRONAME)\n/*****************************************************************************************\n * Implment Thunderous Smite!\n * \n * special thanks to theripper93\n * \n * 01/25/22 0.1 Add headers and VFX\n * 05/03/22 0.2 Updated for FoundryVTT 9.x\n * 08/01/22 0.3 Fix to accomodate change in Midi (flags.midi-qol.itemDetails needs OVERIDE)\n *****************************************************************************************/\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nconst actorD = game.actors.get(lastArg.actor._id);\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst gameRound = game.combat ? game.combat.round : 0;\nconst spellDC = tokenD.actor.data.data.attributes.spelldc;\n// VFX Settings -------------------------------------------------------------------\nconst VFX_NAME = `${MACRO}-${tokenD.id}`\nconst VFX_TARGET = \"modules/jb2a_patreon/Library/2nd_Level/Divine_Smite/DivineSmite_01_Dark_Purple_Target_400x400.webm\"\nconst VFX_CASTER = \"modules/jb2a_patreon/Library/2nd_Level/Divine_Smite/DivineSmite_01_Dark_Purple_Caster_400x400.webm\"\nconst VFX_OPACITY = 1.0;\nconst VFX_SCALE = 0.70;\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nif (args[0].tag === \"OnUse\") {\n    //------------------------------------------------------------------------------------------------\n    // Launch VFX on caster\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_CASTER)\n        .attachTo(tokenD)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------\n    // Define and apply the effect\n    // \n    const CE_DESC = `Next weapon attack rings out 150 feet, does extra damage and may knock back.`\n    let itemD = lastArg.item;\n    let effectData = [{\n        changes: [\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: jez.CUSTOM, value: `ItemMacro.${itemD.name}`, priority: 20 },\n            { key: \"flags.midi-qol.itemDetails\", mode: jez.OVERRIDE, value: `${lastArg.uuid}`, priority: 20 }\n        ],\n        origin: lastArg.uuid,\n        disabled: false,\n        duration: { rounds: 1, seconds: 6, startRound: gameRound, startTime: game.time.worldTime },\n        flags: { \n            dae: { itemData: itemD, specialDuration: [\"DamageDealt\"] }, \n            convenientDescription: CE_DESC\n\n        },\n        icon: itemD.img,\n        label: itemD.name\n    }];\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tokenD.actor.uuid, effects: effectData });\n}\n\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"doBonusDamage\"\n ***************************************************************************************************/\nif (args[0].tag === \"DamageBonus\") {\n    if (![\"mwak\"].includes(lastArg.item.data.actionType)) return {};\n    let target = canvas.tokens.get(lastArg.hitTargets[0].id);\n    let itemUuid = getProperty(lastArg.actor.flags, \"midi-qol.itemDetails\");\n    let itemN = await fromUuid(itemUuid);\n    let itemD = lastArg.item;\n    let saveType = \"str\";\n    let actorType = target.actor.data.type === \"character\" ? { chatMessage: false, fastForward: false } : { chatMessage: false, fastForward: true };\n    let save = await MidiQOL.socket().executeAsGM(\"rollAbility\", { request: \"save\", targetUuid: target.actor.uuid, ability: saveType, options: actorType });\n    let saveSuccess = \"saves\";\n    //-------------------------------------------------------------------------------------------------------------\n    // Launch VFX on target\n    // \n    new Sequence()\n        .effect()\n        .file(VFX_TARGET)\n        .attachTo(target)\n        .scale(VFX_SCALE)\n        .opacity(VFX_OPACITY)\n        .belowTokens(false)\n        .name(VFX_NAME)          // Give the effect a uniqueish name\n        .play()\n    //-------------------------------------------------------------------------------------------------------------\n    // Perform save\n    //\n    if (save.total < spellDC) {\n        saveSuccess = \"fails\";\n        //----------------------------------------------------------------------------------------\n        // Knock the target prone, if it isn't already prone\n        //\n        await jezcon.addCondition(\"Prone\", target.actor.uuid, { allowDups: false })\n        //----------------------------------------------------------------------------------------\n        // Knock the target the target back as appropriate\n        //\n        knockback(tokenD, target, 10);\n    }\n    await wait(500);\n    let msgHistory = [];\n    game.messages.reduce((list, message) => {\n        if (message.data?.flags[\"midi-qol\"]?.itemId === itemD._id && message.data.speaker.token === tokenD.id) list.push(message.id);\n        return list;\n    }, msgHistory);\n    let numDice = lastArg.isCritical ? 4 : 2;\n    let damageType = \"thunder\";\n    let itemCard = msgHistory[msgHistory.length - 1];\n    let saveResult = `<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\">${target.name} ${saveSuccess} with a ${save.total}</div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div>`;\n    let saveMessage = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${CONFIG.DND5E.abilities[saveType]} Saving Throw: DC ${spellDC}</div><div class=\"midi-qol-nobox\">${saveResult}</div>`;\n    let chatMessage = await game.messages.get(itemCard);\n    let content = await duplicate(chatMessage.data.content);\n    let searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\n    let replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${saveMessage}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    let conc = tokenD.actor.effects.find(i => i.data.label === \"Concentrating\");\n    if (conc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tokenD.actor.uuid, effects: [conc.id] });\n    await wait(500);\n    return { damageRoll: `${numDice}d6[${damageType}]`, flavor: `(${itemN.name} (${CONFIG.DND5E.damageTypes[damageType]}))` };\n}\n\nasync function knockback(ptoken, ttoken, distance) {\n    const x1 = ptoken.center.x;\n    const x2 = ttoken.center.x;\n    const y1 = ptoken.center.y;\n    const y2 = ttoken.center.y;\n    let angcoeff = Math.abs((y2 - y1) / (x2 - x1));\n    if (angcoeff > 1) angcoeff = 1 / angcoeff;\n    const unitDistance = distance + (distance * Math.sqrt(2) - distance) * angcoeff;\n    const gridUnit = canvas.scene.data.grid;\n    distance = (distance * canvas.scene.data.grid) / canvas.scene.data.gridDistance;\n\n    async function getXy(x) {\n\n        return (y2 - y1) * (x - x1) / (x2 - x1) + y1;\n\n    }\n\n    async function findDestination() {\n\n        const scenew = canvas.dimensions.width;\n        let coordinatesArray = [];\n        for (let i = 0; i <= scenew; i += 1) {\n\n            let ty = await getXy(i);\n            let snapCoord = await canvas.grid.getCenter(i, ty);\n            let cdist = await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ttoken.center);\n            if (await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ptoken.center) > await canvas.grid.measureDistance(ttoken.center, ptoken.center) && await canvas.grid.measureDistance({ \"x\": snapCoord[0], \"y\": snapCoord[1] }, ptoken.center) > unitDistance) {\n                coordinatesArray.push({ \"x\": i, \"y\": ty, \"dist\": cdist });\n            }\n\n        }\n        return coordinatesArray;\n\n    }\n    if (ptoken.center.x == ttoken.center.x) {\n\n        if (ptoken.center.y - ttoken.center.y > 0) {\n            await updateKB({ \"y\": ttoken.data.y - distance, \"x\": ttoken.data.x }, { \"x\": ttoken.center.x, \"y\": ttoken.center.y - distance })\n        }\n        else {\n            await updateKB({ \"y\": ttoken.data.y + distance, \"x\": ttoken.data.x }, { \"x\": ttoken.center.x, \"y\": ttoken.center.y + distance })\n        }\n\n    }\n    else if (ptoken.center.y == ttoken.center.y) {\n\n        if (ptoken.center.x - ttoken.center.x > 0) {\n            await updateKB({ \"x\": ttoken.data.x - distance, \"y\": ttoken.data.y }, { \"x\": ttoken.center.x - distance, \"y\": ttoken.center.y })\n        }\n        else {\n            await updateKB({ \"x\": ttoken.data.x + distance, \"y\": ttoken.data.y }, { \"x\": ttoken.center.x + distance, \"y\": ttoken.center.y })\n        }\n\n    }\n    else {\n\n        let fdest = await findDestination();\n        let coord = fdest.reduce(function (prev, curr) {\n            return (Math.abs(curr.dist - unitDistance) < Math.abs(prev.dist - unitDistance) ? curr : prev);\n        });\n        fdest = await canvas.grid.getSnappedPosition(coord.x - gridUnit / 2, coord.y - gridUnit / 2, 1);\n        await updateKB(fdest);\n\n\n    }\n    async function updateKB(center, originalcenter) {\n        if (originalcenter) {\n            if (await ttoken.checkCollision(originalcenter)) {\n                if (knockDist <= 5) return;\n                knockDist -= 5;\n                await knockback(pusher, pushed, knockDist);\n            }\n            else {\n                await ttoken.document.update(center);\n            }\n        }\n        else {\n            if (await ttoken.checkCollision(center)) {\n                if (knockDist <= 5) return;\n                knockDist -= 5;\n                await knockback(pusher, pushed, knockDist);\n            }\n            else {\n                await ttoken.document.update(center);\n            }\n        }\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}