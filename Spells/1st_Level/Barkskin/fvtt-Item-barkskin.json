{
  "name": "Barkskin",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/protect-orange-2.jpg",
  "data": {
    "description": {
      "value": "<p>You touch a willing creature. Until the spell ends, the target's skin has a rough, bark-like appearance, and the target's AC can't be less than 16, regardless of what kind of armor it is wearing.</p>\n<hr />\n<p><strong>FoundryVTT:&nbsp;</strong> This is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "trs",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A handful of oak bark",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "uM6rgctYpcbCVSkn",
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false,
          "selfTarget": false,
          "durationExpression": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false,
          "displayTemp": false
        },
        "core": {
          "statusId": ""
        }
      },
      "changes": [
        {
          "key": "data.attributes.ac.value",
          "mode": 4,
          "value": "16",
          "priority": "50"
        },
        {
          "key": "data.attributes.ac.calc",
          "mode": 4,
          "value": "custom",
          "priority": "50"
        },
        {
          "key": "macro.itemMacro",
          "mode": 2,
          "value": "0",
          "priority": "0"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 3600
      },
      "icon": "systems/dnd5e/icons/spells/protect-orange-2.jpg",
      "label": "Barkskin",
      "origin": "Item.VQMKMnQDw5rzL0zp",
      "tint": "",
      "transfer": false,
      "selectedKey": [
        "data.attributes.ac.value",
        "data.attributes.ac.calc",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "core": {
      "sourceId": "Item.VQMKMnQDw5rzL0zp"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false,
      "forceCEOn": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Barkskin",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Barkskin.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Add a VFX and pairing between effect and concentartion to barkskin\n * \n * 12/11/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL>0) jez.trace(`${TAG} === Starting ===`);\nif (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor; \nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst VFX_FILE = `modules/jb2a_patreon/Library/Generic/Fire/ShieldMoltenEarthAbove01_03_Dark_Orange_400x400.webm`\nconst VFX_NAME  = `${MACRO}-${aToken.id}`\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"on\") await doOn({traceLvl:TL});                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({traceLvl:TL});                   // DAE removal\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preCheck() {\n    if (args[0].targets.length !== 1)\n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set On\n * This runs on actor that has the affected applied to it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOn(options={}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL>0) jez.trace(`${TAG} --- Starting ---`);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    runVFX(aToken)           // Launch the VFX\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    jez.pairEffectsAsGM(aActor, \"Concentrating\", tToken.actor, \"Barkskin\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    if (TL>3) jez.trace(`${TAG} More Detailed Trace Info.`)\n    msg = `${aToken.name} causes ${tToken.name}'s skin to take on a rough, bark-like appearance, that may improve its defenses.`\n    postResults(msg)\n    if (TL>0) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOff(options={}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    Sequencer.EffectManager.endEffects({ name: VFX_NAME, object: aToken }); // End VFX\n    return;\n}\n/***************************************************************************************\n * Startup the VFX on the token\n ***************************************************************************************/\n async function runVFX(token5e) {\n    let color = \"yellow\"\n    await jez.runRuneVFX(token5e, jez.getSpellSchool(aItem), color)\n    new Sequence()\n    .effect()\n        .file(VFX_FILE)\n        .attachTo(token5e)\n        .scaleToObject(2.0)\n        .opacity(0.6)\n        .fadeIn(1000)\n        .fadeOut(1000)\n        .belowTokens(false)  \n        .persist()\n        .name(VFX_NAME)\n    .play()\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    }
  }
}