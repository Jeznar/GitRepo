{
  "name": "%%Swap Senses (Familiar)%%",
  "type": "spell",
  "img": "icons/creatures/eyes/humanoid-single-purple-blue.webp",
  "data": {
    "description": {
      "value": "<p><strong>%%This item is used by the Jez's Find Familiar Macro don't casually mess with it, please%%</strong></p>\n<p>While a familiar is active and within 100 feet of thier master, the master may, as an action, see through the familiar's eyes and hear what it hears until the start of his/her next turn, gaining the benefits of any special senses that the familiar has. During this time, the master is deaf and blind with regard to your own senses.</p>\n<hr style=\"border-top:1px solid var(--color-border-light-primary);border-bottom:1px solid var(--color-border-light-highlight)\" />\n<p><strong>FoundryVTT</strong>: This ability activates vision on the familiar, deactivates it on the user when used and reverses when effect fades.  It applies the <strong>Blinded </strong> and <strong>Deafened </strong>effects to the caster, if they were already in place they may need to be manually reapplied on this effect removal.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": "Activate familiar within 100 feet"
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "div",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "atwill",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "6qho0r7vds8c0uid",
      "changes": [
        {
          "key": "macro.CE",
          "mode": 0,
          "value": "Blinded",
          "priority": "20"
        },
        {
          "key": "macro.CE",
          "mode": 0,
          "value": "Deafened",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 2,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": 6,
        "rounds": 1
      },
      "icon": "icons/creatures/eyes/humanoid-single-purple-blue.webp",
      "label": "Swap Senses (Familiar)",
      "transfer": false,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [
            "turnStartSource"
          ],
          "transfer": false
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Short Rest"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "macro.CE",
        "macro.CE",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro,[preActiveEffects]Run_RuneVFX_onSelf"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "%%Swap Senses (Familiar)%%",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Swap_Senses.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Swap vision from the active token to the actor specified by ID doOnUse() and reverse doOff()\n * \n * 08/30/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim of the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_NAME = `Find Familiar`\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n  * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    // Get the Familiar data, or falsy\n    //\n    let famToken = await getFamiliarData({ traceLvl: TL })\n    if (!famToken) {\n        if (TL > 1) jez.trace(`${TAG} Cleaning up, since familiar is MIA`);\n        deleteTempSpells({ traceLvl: TL })\n        let existingEffect = aActor.effects.find(ef => ef.data.label.startsWith(\"Swap Senses \"))\n        if (existingEffect) existingEffect.delete()\n        return\n    }\n    if (TL > 2) jez.trace(`${TAG} Familiar Token data`, famToken);\n    //-----------------------------------------------------------------------------------------------\n    // Make sure the familiar is no further than 100 feet\n    //\n    let distance = jez.getDistance5e(aToken, famToken)\n    if (TL > 2) jez.trace(`${TAG} Distance to the familiar: ${distance}`);\n    if (distance > 100) {\n        let existingEffect = aActor.effects.find(ef => ef.data.label.startsWith(\"Swap Senses \"))\n        if (TL > 1) jez.trace(`${TAG} Existing effect`,existingEffect);\n        if (existingEffect) {\n            if (TL > 1) jez.trace(`${TAG} Deleting existing effect`);\n            let rc = await existingEffect.delete()\n            if (TL > 1) jez.trace(`${TAG} Deleting rc`,rc);\n        }\n        jez.badNews(`${famToken.name} is more than 100 feet away. Attempt to share senses failed.`,\"i\")\n        return\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Activate vision on the familiar, deactivate vision on the caster\n    //\n    await famToken.document.update({ vision: true });\n    await aToken.document.update({ vision: false });\n    //-----------------------------------------------------------------------------------------------\n    // Post descriptive message\n    //\n    if (TL > 3) jez.trace(`${TAG} More Detailed Trace Info.`)\n    msg = `<b>${aToken.name}</b> is sharing <b>${famToken.name}</b>'s, senses.  ${aToken.name} can see \n    and hear what ${famToken.name} can, but is blind and deaf while doing so.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Reverse the vision swap that was performed by doOnUse()\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //-----------------------------------------------------------------------------------------------\n    // Get the Familiar data, or falsy\n    //\n    let famToken = await getFamiliarData({ traceLvl: TL })\n    if (!famToken) return\n    if (TL > 2) jez.trace(`${TAG} Familiar Token data`, famToken);\n    //-----------------------------------------------------------------------------------------------\n    // Deactivate vision on the familiar, activate vision on the caster\n    //\n    await famToken.document.update({ vision: false });\n    await aToken.document.update({ vision: true });\n    //-----------------------------------------------------------------------------------------------\n    // Post descriptive message\n    //\n    msg = `<b>${aToken.name}</b>'s vision and hearing returns to normal.`\n    jez.postMessage({\n        color: jez.randomDarkColor(), fSize: 14, icon: aToken.data.img,\n        msg: msg, title: `Senses Return to Normal`, token: aToken\n    })\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Obtain the data for existing familiar\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function getFamiliarData(options = {}) {\n    const FUNCNAME = \"getFamiliarData(options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // Look for an existing Find_Familiar effect on the caster and dig into it to find the id of our\n    // familiar's token.\n    //\n    existingEffect = aActor.effects.find(ef => ef.data.label === SPELL_NAME)\n    if (!existingEffect) {\n        deleteTempSpells({ traceLvl: TL })\n        return jez.badNews(`Seemingly no active familiar is defined`, 'i')\n    }\n    if (TL > 1) jez.trace(`${TAG} existingEffect data`, existingEffect);\n    famTokId = existingEffect.data.changes[0].value.split(\" \")[1]   // Second token must be a tokenID\n    if (TL > 2) jez.trace(`${TAG} Token ID of our familiar: ${famTokId}`);\n    //-----------------------------------------------------------------------------------------------\n    // Make sure the familiar exists and grab its data\n    //\n    let famToken = canvas.tokens.placeables.find(ef => ef.id === famTokId)\n    if (!famToken) return jez.badNews(`Could not find familiar token (${famTokId})`)\n    if (TL > 2) jez.trace(`${TAG} Familiar Token data`, famToken)\n    //-----------------------------------------------------------------------------------------------\n    // Send back our results\n    //\n    return (famToken)\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Delete existing temporary spell items, if any.  They must be at-will spells that start with \n * NEW_SPELL_PREFIX\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function deleteTempSpells(options = {}) {\n    const FUNCNAME = \"deleteTempSpell(options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // Delete all of the at-will spells that start with NEW_SPELL_PREFIX\n    //\n    const NEW_SPELL_PREFIX = \"Swap Senses with\"\n    let itemFound = null\n    while (itemFound = aActor.items.find(item => item.data.name.startsWith(NEW_SPELL_PREFIX) &&\n        item.type === \"spell\" && item.data.data.preparation.mode === \"atwill\")) {\n        await itemFound.delete();\n        jez.badNews(`At-Will Spell \"${itemFound.name}\" has been deleted from ${aToken.name}'s spell book`, 'i')\n        await jez.wait(50)\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}