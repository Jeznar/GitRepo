{
  "name": "Sleep",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/light-blue-1.jpg",
  "data": {
    "description": {
      "value": "<p>This spell sends creatures into a magical slumber. Roll 5d8; the total is how many hit points of creatures this spell can affect. Creatures within 20 feet of a point you choose within range are affected in ascending order of their current hit points (ignoring unconscious creatures).</p>\n<p>Starting with the creature that has the lowest current hit points, each creature affected by this spell falls unconscious until the spell ends, the sleeper takes damage, or someone uses an action to shake or slap the sleeper awake. Subtract each creature’s hit points from the total before moving on to the creature with the next lowest hit points. A creature’s hit points must be equal to or less than the remaining total for that creature to be affected.</p>\n<p>Undead and creatures immune to being charmed aren’t affected by this spell.</p>\n<p><strong>Higher Levels.</strong> When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d8 for each slot level above 1st.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This spell sets the VFX color based on color string found in the item icon.  Defined mappings are: royal:dark_orangepurple, eerie:dark_purple, sky:blue, blue:blue, jade:green, magenta:pink, fire:yellow</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 276",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "sphere"
    },
    "range": {
      "value": 90,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "5d8",
          "midi-none"
        ]
      ],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A pinch of fine sand, rose petals, or a cricket.",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "2d8"
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.YmU3MWUzNmM5ODVi"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Sleep",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Sleep.1.6.js\"\n//############################################################################################################\n// READ FIRST\n// based on @ccjmk macro for sleep. Gets targets and ignores those who are immune to sleep.\n// Midi-qol \"On Use\"\n// Uses Damage roll on item, set damage to \"no damage\" in the drop down\n//############################################################################################################\n/* Downloaded from Crymic's repository\n * https://gitlab.com/crymic/foundry-vtt-macros/-/blob/8.x/5e/Spells/Level%201/Sleep.js\n *\n * 11/02/21 1.1 JGB Added debug statements to trace apparent issue\n * 11/03/21 1.2 JKM Expanded really wide non-working immunity line\n * 11/03/21 1.3 JGB Minor reformatting and debug level setting\n * 11/04/21 1.4 JGB Workaround for Mini-QoL feature that breaks \"isDamaged\" effect when on zero damage attack. \n *                  Also, avoid double application of prone contion.      \n * 02/18/22 1.5 JGB Update to use jez.lib functions and handle VFX          \n * 05/13/22 1.6 JGB Update to read color string from icon to set VFX color   \n *************************************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\n\nlet immuneRaces = [\"undead\", \"construct\", \"elf\"];    // Set strings that define immune races\nconst condition = \"Unconscious\";                     // Condition to be slept representing sleep \nlet gameRound = game.combat ? game.combat.round : 0; // Added missing initilization -JGB\nlet effectData = [];                                 // Array to hold effect data\njez.log(`Starting: ${MACRONAME}`); \n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst sleepHp = await args[0].damageTotal;\nif (!sleepHp) return ui.notifications.error(\"Set the Spells Damage Details to 'No Damage'\");\n\njez.log(`Sleep Spell => Available HP Pool [${sleepHp}] points`);\nlet targets = await args[0].targets.filter(i=> i.actor.data.data.attributes.hp.value != 0).sort((a, b) => canvas.tokens.get(a.id).actor.data.data.attributes.hp.value < canvas.tokens.get(b.id).actor.data.data.attributes.hp.value ? -1 : 1);\nlet remainingSleepHp = sleepHp;\n\nrunVFX()\n\nlet slept_target = [];\n\ncheckTarget: for (let target of targets) {\n   jez.log(`Target ${target.name}`, target);\n   let find_target = await canvas.tokens.get(target.id);\n   jez.log(` find_target: ${target.id}`); \n\n   let targetRace = find_target.actor.data.data.details.race;   // Shorten subsequent lines for Target Details Race\n   let targetType = find_target.actor.data.data.details.type;   // Shorten subsequent lines for Target Details Type\n\n   /* Following line from original macro is both hard to read and fails on player characters.  \n   let immune_type = find_target.actor.data === \"character\" ? [\"undead\", \"construct\"].some(race => (find_target.actor.data.data.details.race || \"\").toLowerCase().includes(race)) : [\"undead\", \"construct\"].some(value => (find_target.actor.data.data.details.type.value || \"\").toLowerCase().includes(value));\n   */  \n   // Rewritten Giant line of code from above, in longer (working) form\n   let immune_type = false;\t\n   if(find_target.actor.data.type === \"character\")\t{\n       jez.log(`${target.name} is a PC`, target);\n       for(let immuneRace of immuneRaces) {\n           if(targetRace) {\n               if(immuneRace.toLowerCase().includes(targetRace.toLowerCase()))\n               {\n                   jez.log(`${target.name}'s race is ${immuneRace}`, target, immuneRace);\n                   immune_type = true;\n               }\n            } else jez.log(`${target.name} has no race`, target);\n       }\t\t\n   } else { \n       jez.log(`${target.name} is an NPC`, target);\n       // Loop through each creature types found in the immuneRaces array.\n       for(let immuneRace of immuneRaces) {\n           jez.log(`Checking against ${immuneRace}`);\n           // If the creature type is custom...\n           if (targetType.value.toLowerCase() === \"custom\") {\n               jez.log(` Beginning custom type Checker`);          \n               // Check custom creature type against our immuneRaces collection\n               if(targetType.custom.toLowerCase().includes(immuneRace.toLowerCase())) {\n                   jez.log(` Found a dirty ${immuneRace} spy.`, immuneRace);\n                   immune_type = true;\n               }\n           } else jez.log(` ${target.name} does not have a custom race -- ${targetType.value}`);\n           // If the creature has a subtype...\n           if(!targetType.subtype == \"\") {\n           // if(targetType.subtype) {\n                   // If the creature's subtype is found in the immuneRaces collection...\n                   if (targetType.subtype.toLowerCase() === immuneRace.toLowerCase()) {\t\t\t\t\t\n                   jez.log(\" Beginning subtype Checker\");\n\n                   // Check creature Subtypes for the types in our immuneRaces collection.\n                   if(targetType.custom.toLowerCase().includes(immuneRace.toLowerCase())) {\n                       jez.log(\" Found a sneaky subtype.\");\n                       immune_type = true;\n                   }\n               }\n           } else jez.log(` ${target.name} does not have a subtype`);\n           \n           // Check creature type against our immuneRaces collection.\n           if(immuneRace.toLowerCase() === targetType.value.toLowerCase()) {\n               jez.log(` target's npc type is ${immuneRace}`);\n               immune_type = true;\n           } else jez.log(` ${target.name} vulnerable npc type is ${targetType.value}`);\n       }\n   }      \n   // End of rewritten Giant line of code from above\n    jez.log(` immune type:`, immune_type);\n    let immune_ci = find_target.actor.data.data.traits.ci.custom.includes(\"Sleep\");\n    jez.log(` custom immunity:`, immune_ci);\n    jez.log(` find_target.actor: `, find_target.actor);\n    // Set sleeping to \"true\" (load its data structure) if token is currently \"unconscious\"\n    let sleeping = find_target.actor.effects.find(i => i.data.label === condition); \n        if (sleeping) { // Sleeping creatures are immune to this spell and should be skipped\n            jez.log(` ${target.name} is ${condition}`,sleeping);\n            jez.log(` remaining unconscious: ${sleeping.data.duration.rounds} rounds, ${sleeping.data.duration.seconds} seconds`);\n        } else { jez.log(` ${target.name} is not ${condition}`) }\n    \n    // Set prone to \"true\" (load its data structure) if token is currently \"prone\"\n    let prone = find_target.actor.effects.find(i => i.data.label === \"Prone\"); \n        if (prone) { \n            jez.log(` ${target.name} is already prone`), prone;\n        } else jez.log(` ${target.name} is not yet prone`)\n\n   let targetHpValue = find_target.actor.data.data.attributes.hp.value;\n   jez.log(` targetHpValue: `,targetHpValue); \n   if ((immune_type) || (immune_ci) || (sleeping)) {\n       jez.log(`Sleep Results => Target: ${find_target.name} | HP: ${targetHpValue} | Status: Not Affected`);\n       slept_target.push(`<div class=\"midi-qol-flex-container\"><div>no effect</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${find_target.id}\"> ${find_target.name}</div><div><img src=\"${find_target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n\n       // Sleeping target needs sleep reapplied as Midi-QoL will remove it due to a \"feature\" which takes zero damage applied as damage applied.\n       if (sleeping) { \n           effectData = addSleepEffectData(effectData, sleeping.data.duration.rounds, sleeping.data.duration.seconds);\n           await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: find_target.actor.uuid, effects: effectData }); \n       }\n       continue checkTarget;\n   }\n   if (remainingSleepHp > targetHpValue) {\n       remainingSleepHp -= targetHpValue;\n       jez.log(`Sleep Results => Target: ${find_target.name} |  HP: ${targetHpValue} | HP Pool: ${remainingSleepHp} | Status: Slept`);\n       slept_target.push(`<div class=\"midi-qol-flex-container\"><div>slept</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${find_target.id}\"> ${find_target.name}</div><div><img src=\"${find_target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n\n       if (!prone) {                                    // If target is not prone load array to add sleep and prone effects\n           effectData = addSleepProneEffectData(effectData);\n           // game.cub.addCondition(\"Prone\", target);   // Combat Utility Belt mod to add Prone generated unhappiness\n       } else {                                         // If target is already prone load array to add sleep effect only\n           effectData = addSleepEffectData(effectData, 10, 60);\n       }\n \n       await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: find_target.actor.uuid, effects: effectData });\n       continue;\n   } else {\n       console.log(`Sleep Results => Target: ${target.name} | HP: ${targetHpValue} | HP Pool: ${remainingSleepHp - targetHpValue} | Status: Missed`);\n       slept_target.push(`<div class=\"midi-qol-flex-container\"><div>misses</div><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${find_target.id}\"> ${find_target.name}</div><div><img src=\"${find_target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n       break;\n   } \n}\nlet slept_list = slept_target.join('');\nawait wait(500);\nlet slept_results = `<div><div class=\"midi-qol-nobox\">${slept_list}</div></div>`;\nconst chatMessage = game.messages.get(args[0].itemCardId);\nlet content = duplicate(chatMessage.data.content);\nconst searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\nconst replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${slept_results}`;\ncontent = await content.replace(searchString, replaceString);\nawait chatMessage.update({ content: content });\n\n/***********************************************************************************************************************\n * Function to load up array with data to be used to apply unconscious and prone effects to target\n************************************************************************************************************************/\nfunction addSleepProneEffectData(_effectData) {\n    jez.log(` ...add Sleep & Prone effect data`)\n    _effectData = [\n        {\n            label: condition,\n            icon: \"icons/svg/sleep.svg\",\n            origin: args[0].uuid,\n            disabled: false,\n            // duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n            duration: { rounds: 10, startRound: gameRound, startTime: game.time.worldTime },\n            flags: { dae: { specialDuration: [\"isDamaged\"] } },\n            changes: [\n                { key: `flags.midi-qol.grants.critical.mwak`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.all`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.fail.ability.save.str`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.fail.ability.save.dex`, mode: 2, value: 1, priority: 20 },\n                { key: `data.attributes.movement.all`, mode: 5, value: 0, priority: 20 }\n            ]\n        }, {\n            label: \"Prone\",\n            icon: \"modules/combat-utility-belt/icons/prone.svg\",\n            origin: args[0].uuid,\n            disabled: false,\n            duration: { rounds: 99, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n            changes: [\n                { key: `flags.midi-qol.disadvantage.attack.all`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.mwak`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.msak`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.disadvantage.attack.rwak`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.disadvantage.attack.rsak`, mode: 2, value: 1, priority: 20 }\n            ]\n        }];\n        return(_effectData);\n    }\n/***********************************************************************************************************************\n * Function to load up array with data to be used to apply unconscious only (already prone) effect to target.\n * _rounds and _seconds are optional parameters intendedto be used for reapplying a partially timed out effect.\n************************************************************************************************************************/\nfunction addSleepEffectData(_effectData, _rounds, _seconds) {\n    jez.log(` ...add Sleep effect data`)\n    let newRounds = _rounds || 10;\n    // let newSeconds = _seconds || 60;\n    _effectData = [\n        {\n            label: condition,\n            icon: \"icons/svg/sleep.svg\",\n            origin: args[0].uuid,\n            disabled: false,\n            // duration: { rounds: newRounds, seconds: newSeconds, startRound: gameRound, startTime: game.time.worldTime },\n            duration: { rounds: newRounds, startRound: gameRound, startTime: game.time.worldTime },\n            flags: { dae: { specialDuration: [\"isDamaged\"] } },\n            changes: [\n                { key: `flags.midi-qol.grants.critical.mwak`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.all`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.fail.ability.save.str`, mode: 2, value: 1, priority: 20 },\n                { key: `flags.midi-qol.fail.ability.save.dex`, mode: 2, value: 1, priority: 20 },\n                { key: `data.attributes.movement.all`, mode: 5, value: 0, priority: 20 }\n            ]\n        }];\n    return (_effectData);\n}\n/***************************************************************************************************\n * Perform the VFX code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function runVFX() {\n    jez.log(\"Launch VFX\")\n    jez.log(\"args[0]\", args[0])\n    const FUNCNAME = \"doOnUse()\";\n    const VFX_NAME = `${MACRO}`\n    const VFX_OPACITY = 1.0;\n    const VFX_SCALE = 2.7;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    const templateID = args[0].templateId\n    jez.log('templateID', templateID)\n    //----------------------------------------------------------------------------------------------\n    // Pick a colour based on a colour string found in the icon's name.\n    // Color Mappings (Icon String : VFX Color):\n    // royal:dark_orangepurple, eerie:dark_purple, sky:blue, blue:blue, jade:green, magenta:pink, fire:yellow\n    //\n    let color = \"yellow\"\n    const IMAGE = aItem.img.toLowerCase()\n    if (IMAGE.includes(\"royal\")) color = \"Dark_OrangePurple\"\n    else if (IMAGE.includes(\"eerie\")) color = \"Dark_Purple\"\n    else if (IMAGE.includes(\"sky\")) color = \"Regular_Blue\"\n    else if (IMAGE.includes(\"blue\")) color = \"Regular_Blue\"\n    else if (IMAGE.includes(\"jade\")) color = \"Regular_Green\"\n    else if (IMAGE.includes(\"magenta\")) color = \"Regular_Pink\"\n    else if (IMAGE.includes(\"fire\")) color = \"Regular_Yellow\"\n    //jez.log(`Color ${color}`)\n    const VFX_LOOP = `modules/jb2a_patreon/Library/1st_Level/Sleep/Cloud01_01_${color}_400x400.webm`\n    jez.log(`VFX_File: ${VFX_LOOP}`)\n    new Sequence()\n    .effect()\n        .file(VFX_LOOP)\n        .atLocation(templateID) // Effect will appear at  template, center\n        .scale(VFX_SCALE)\n        .scaleIn(0.25, 1000)    // Expand from 0.25 to 1 size over 1 second\n        .rotateIn(180, 1000)    // 1/2 Rotation over 1 second \n        .scaleOut(0.25, 1000)   // Contract from 1 to 0.25 size over 1 second\n        .rotateOut(180, 1000)   // 1/2 Counter Rotation over 1 second\n        .opacity(VFX_OPACITY)\n        .duration(6000)\n        .name(VFX_NAME)         // Give the effect a uniqueish name\n        .fadeIn(10)             // Fade in for specified time in milliseconds\n        .fadeOut(1000)          // Fade out for specified time in milliseconds\n        .extraEndDuration(1200) // Time padding on exit to connect to Outro effect\n    .play();\n    await jez.wait(100)         // Don't delete till VFX established\n    canvas.templates.get(templateID).document.delete()\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": {
      "killAnim": false,
      "below": false,
      "override": true,
      "targetToken": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}