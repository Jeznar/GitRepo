{
  "name": "Sleep",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/light-blue-1.jpg",
  "data": {
    "description": {
      "value": "<p>This spell sends creatures into a magical slumber. Roll 5d8; the total is how many hit points of creatures this spell can affect. Creatures within 20 feet of a point you choose within range are affected in ascending order of their current hit points (ignoring unconscious creatures).</p>\n<p>Starting with the creature that has the lowest current hit points, each creature affected by this spell falls unconscious until the spell ends, the sleeper takes damage, or someone uses an action to shake or slap the sleeper awake. Subtract each creature’s hit points from the total before moving on to the creature with the next lowest hit points. A creature’s hit points must be equal to or less than the remaining total for that creature to be affected.</p>\n<p>Undead and creatures immune to being charmed aren’t affected by this spell.</p>\n<p><strong>Higher Levels.</strong> When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d8 for each slot level above 1st.</p>\n<hr />\n<p><strong>FoundryVTT:</strong> This spell sets the VFX color based on color string found in the item icon.  Defined mappings are: royal:dark_orangepurple, eerie:dark_purple, sky:blue, blue:blue, jade:green, magenta:pink, fire:yellow</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 276",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "sphere"
    },
    "range": {
      "value": 90,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "5d8",
          "midi-none"
        ]
      ],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A pinch of fine sand, rose petals, or a cricket.",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "2d8"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.YmU3MWUzNmM5ODVi"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Sleep",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Sleep.2.0.js\"\n//############################################################################################################\n// READ FIRST\n// based on @ccjmk macro for sleep. Gets targets and ignores those who are immune to sleep.\n// Midi-qol \"On Use\"\n// Uses Damage roll on item, set damage to \"no damage\" in the drop down\n//############################################################################################################\n/* Downloaded from Crymic's repository\n * https://gitlab.com/crymic/foundry-vtt-macros/-/blob/8.x/5e/Spells/Level%201/Sleep.js\n *\n * 11/02/21 1.1 JGB Added debug statements to trace apparent issue\n * 11/03/21 1.2 JKM Expanded really wide non-working immunity line\n * 11/03/21 1.3 JGB Minor reformatting and debug level setting\n * 11/04/21 1.4 JGB Workaround for Mini-QoL feature that breaks \"isDamaged\" effect when on zero damage attack. \n *                  Also, avoid double application of prone contion.      \n * 02/18/22 1.5 JGB Update to use jez.lib functions and handle VFX          \n * 05/13/22 1.6 JGB Update to read color string from icon to set VFX color   \n * 08/01/22 2.0 JGB Rewritten so that it has a more logical flow and handles multiple choices for last sleeper\n *************************************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nconst TL = 0\nconst TAG = MACRO\nif (TL>0) jez.trace(`${TAG} ============== Starting === ${MACRONAME} =================`);\nif (TL>2) for (let i = 0; i < args.length; i++) jez.trace(`${TAG} args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;         \nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor; \n//\n// Set the value for the Active Item (aItem)\nlet aItem;         \nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nlet immuneRaces = [\"undead\", \"construct\", \"elf\"];   // Set strings that define immune races\nconst CONDITION = \"Unconscious\";                    // CONDITION to be slept representing sleep \nlet gameRound = game.combat ? game.combat.round : 0;// Added missing initilization -JGB\nlet effectData = [];                                // Array to hold effect data\nlet sleptCount = 0                                  // Count of targets slept\nlet sleptNames = []                                 // Array of names of slet targets\n//---------------------------------------------------------------------------------------------------\n// Define the HP Pool for this execution\n//\nconst sleepHp = await args[0].damageTotal;\nif (!sleepHp) return ui.notifications.error(\"Set the Spells Damage Details to 'No Damage'\");\nif (TL>1) jez.trace(`${TAG} Available HP Pool [${sleepHp}] points`);\nlet remainingSleepHp = sleepHp;\n//---------------------------------------------------------------------------------------------------\n// Build array of eligible targets from all those tokens targeted.\n//\nlet ct = canvas.tokens\nif (TL>3) jez.trace(`${TAG} canvas.tokens`, ct);\nlet targets = await args[0].targets.filter(i=> i.actor.data.data.attributes.hp.value != 0).sort((a, b) => \n    ct.get(a.id).actor.data.data.attributes.hp.value + ct.get(a.id).actor.data.data.attributes.hp.temp < \n    ct.get(b.id).actor.data.data.attributes.hp.value + ct.get(b.id).actor.data.data.attributes.hp.temp ? \n    -1 : 1);\nif (TL>3) jez.trace(`${TAG} targets`, targets);\n//---------------------------------------------------------------------------------------------------\n// Slice off those targets that have more health (normal + temp) than the entire HP Pool\n//\nfor (let i = 0; i < targets.length; i++) {\n    if (TL>4) jez.trace(`${TAG} Checking ${targets[i].name}`, targets[i]);\n    if (targets[i].actor.data.data.attributes.hp.value + targets[i].actor.data.data.attributes.hp.temp <= \n        sleepHp) continue\n    if (TL>1) jez.trace(`${TAG} ${targets[i].name} has more HP than pool, truncating target list`);\n    targets.length = i; // Clip the array just before the current entry\n    break;              // Terminate our scan as we have all those that have HP that could be slept\n}\n//---------------------------------------------------------------------------------------------------\n// Launch the VFX\n//\nrunVFX({traceLvl: 0})\n//---------------------------------------------------------------------------------------------------\n// Build array of eligible targets from all those tokens targeted.\n//\nlet eTargs = pruneImmunes(targets, {traceLvl: 0})\nconsole.log(\"\")\nif (TL>2) for (let target of eTargs) {      // If tracing, spit out eligible list\n    let normalHP = target.actor.data.data.attributes.hp.value\n    let tempHP = target.actor.data.data.attributes.hp.temp\n    jez.trace(`${TAG} Eligible: ${target.name} HP: ${normalHP} Normal, ${tempHP} Temp`)\n}\n//---------------------------------------------------------------------------------------------------\n// Build array of slept targets checking to make sure that we randomly select from targets that are\n// tied in HP value at the end of the pool so that those excluded are actually random.\n//\nlet sleepers = pickSleepers(eTargs, { traceLvl: 0 })\nif (TL>1) for (let target of sleepers) {    // If tracing, spit out to be slept list\n    let normalHP = target.actor.data.data.attributes.hp.value\n    let tempHP = target.actor.data.data.attributes.hp.temp\n    jez.trace(`${TAG} Sleeper: ${target.name} HP: ${normalHP} Normal, ${tempHP} Temp`)\n}\n//---------------------------------------------------------------------------------------------------\n// Obtain, modify and CE CONDITION to be used \n//\nlet effect = game.dfreds.effectInterface.findEffectByName(CONDITION).convertToObject();\neffect.duration = { rounds: 10, startRound: gameRound, startTime: game.time.worldTime }\n// Following line seems to tickle a bug in CE that causes the special duration to be set into \n// reference copy so I'll make my function that applies sleep add this condition to each\n// effect.flags.dae.specialDuration = [\"isDamaged\"]  // Add to the effect's special duration\n//---------------------------------------------------------------------------------------------------\n// Loop through the sleepers list, putting them to sleep (yea!)\n//\nfor (let sleeper of sleepers) {\n    if (TL > 1) jez.trace(`${TAG} Putting ${sleeper.name} to sleep`, sleeper);\n    applySleep(sleeper, effect, {traceLvl:0})\n    sleptNames.push(sleeper.name)\n    sleptCount++\n}\n//---------------------------------------------------------------------------------------------------\n// Update the chat card with results\n//\nlet nameList = \"\"\nmsg = `${sleptCount} creatures have been put to sleep.`\nif (sleptCount === 1) msg = msg + `<br><br>${sleptNames[0]}`\nif (sleptCount > 1) {\n    sleptNames.sort()\n    for (let i = 0; i < sleptCount; i++)\n        if (nameList) nameList = `${nameList},<br>${sleptNames[i]}`\n        else nameList = `<br><br>${sleptNames[i]}`\n    msg = msg + nameList\n}\npostResults(msg)\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n}\n/***********************************************************************************************************************\n * Function to actually apply sleep and prone (unless already prone)\n************************************************************************************************************************/\nasync function applySleep(TARG, effectData, options={}) {\n    const TL = options.traceLvl ?? 0\n    const FUNCNAME = \"applySleep(TARG, effectData, options=())\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |` \n    if (TL>1) jez.trace(`${TAG} --- Start ---`);\n    //----------------------------------------------------------------------------------------\n    // Apply CE CONDITION passed to us\n    //\n    if (TL>2) jez.trace(`${TAG} target data`, TARG);\n    if (TL>2) jez.trace(`${TAG} effect data`, effectData);\n    game.dfreds.effectInterface.addEffectWith({ effectData: effectData, uuid: TARG.actor.uuid,\n        origin: aActor.uuid\n    });\n    await jez.wait(1000)\n    //----------------------------------------------------------------------------------------\n    // Just for fun, have them pop out some Z's\n    //\n    await jez.wait(Math.floor(Math.random() * 3000))\n    bubbleForAll(TARG.id, `Zzzzz...`, true, true)\n    //----------------------------------------------------------------------------------------\n    // Find CONDITION just applied and patch in a special duration to dance around CE oddness\n    // This seems like it shouldn't be required.  Issue opened against CE Module.\n    //\n    //          https://github.com/DFreds/dfreds-convenient-effects/issues/161\n    //\n    let effect = await TARG.actor.effects.find(i => i.data.label === CONDITION);\n    if (!effect) return jez.badNews(`Could not find ${CONDITION} effect on ${TARG.name}`, \"w\")\n    await effect.update({ 'flags.dae.specialDuration': [\"isDamaged\"] });\n    //----------------------------------------------------------------------------------------\n    // Knock the target prone, if it isn't already prone\n    //\n    await jezcon.addCondition(\"Prone\", TARG.actor.uuid, { allowDups: false })\n    //----------------------------------------------------------------------------------------\n    // Just for fun, have them pop out some Z's\n    //\n    await jez.wait(Math.floor(Math.random() * 5000))\n    bubbleForAll(TARG.id, `Zzzzz...`, true, true)\n}\n/*****************************************************************************************************\n * Prune out the immune or otherwise unaffectable targets from our list and return the result\n *****************************************************************************************************/\n function pruneImmunes(targets, options = {}) {\n    const TL = options.traceLvl ?? 0\n    const FUNCNAME = \"pruneImmunes(targets, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |` \n    if (TL>1) jez.trace(`${TAG} --- Start ---`);\n    let eligibleTargets = []\n    //---------------------------------------------------------------------------------------------------\n    // Loop through the targets only keeping eligible targets\n    //\n    chkTarget: for (let target of targets) {\n        const THIS_TARG = target._object\n        if (TL > 2) jez.trace(`${TAG} Considering ${THIS_TARG.name}`, THIS_TARG);\n        let rtnVal = jezcon.hasCE(\"Unconscious\", THIS_TARG.actor.uuid, { traceLvl: 0 })\n        if (rtnVal) {\n            if (TL > 1) jez.trace(`${TAG} ${THIS_TARG.name} is aleady slept (unconscious)`);\n            continue chkTarget\n        }\n        // Check Specific Condition Immunities looking for \"unconscious\"\n        if (THIS_TARG.actor.data.data.traits.ci) {\n            const CI = THIS_TARG.actor.data.data.traits.ci.value\n            for (let i = 0; i < CI.length; i++)\n                if (CI[i] === \"unconscious\") {\n                    if (TL > 1) jez.trace(`${TAG} ${THIS_TARG.name} has immunity to unconscious checked`);\n                    continue chkTarget\n                }\n        }\n        // Check Custom Condition Immunities looking for \"sleep\" and \"slept\"\n        if (THIS_TARG.actor.data.data.traits.ci.custom) {\n            const CUST_IMMUNITY = THIS_TARG.actor.data.data.traits.ci.custom.toLowerCase()\n            if (CUST_IMMUNITY.includes(\"slept\") || CUST_IMMUNITY.includes(\"sleep\")) {\n                if (TL > 1) jez.trace(`${TAG} ${THIS_TARG.name} has custom immunity (sleep or slept)`, CUST_IMMUNITY);\n                continue chkTarget\n            }\n        }\n        // Check Race for immunity against immuneRaces array\n        let RACE = jez.getRace(THIS_TARG).toLowerCase()\n        if (TL > 3) jez.trace(`${TAG} ${THIS_TARG.name} race`, RACE)\n        if (RACE) {\n            for (let immuneRace of immuneRaces) {\n                if (RACE.includes(immuneRace)) {\n                    if (TL > 1) jez.trace(`${TAG} ${THIS_TARG.name}'s immune race is ${RACE}`);\n                    continue chkTarget\n                }\n            }\n        }\n        // Check individual HP normal plus temp against total available, eliminating if more than possible.\n        eligibleTargets.push(THIS_TARG)\n    }\n    // Return our restultant list\n    if (TL > 1) jez.trace(`${TAG} Finished, returning`, eligibleTargets)\n    return eligibleTargets\n}\n/*****************************************************************************************************\n * Pick out the sleepers from the targets available\n *****************************************************************************************************/\n function pickSleepers(eTargs, options = {}) {\n    const TL = options.traceLvl ?? 0\n    const FUNCNAME = \"pickSleepers(eTargs, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Start ---`);\n    //---------------------------------------------------------------------------------------------------\n    // Loop through the targets only keeping eligible targets\n    //\n    let sleepers = []\n    addSleepers: for (let i = 0; i < eTargs.length; i++) {\n        const TARG_HP = eTargs[i].actor.data.data.attributes.hp.value + eTargs[i].actor.data.data.attributes.hp.temp\n        if (TARG_HP > remainingSleepHp) break       // Ran out of budget on this item\n        if (i < eTargs.length - 1) {                // At least one more to consider, need to look ahead\n            let nextHPnorm = eTargs[i + 1].actor.data.data.attributes.hp.value\n            let nextHPtemp = eTargs[i + 1].actor.data.data.attributes.hp.temp\n            let nextHP = nextHPnorm + nextHPtemp    // Total health of next target in list\n            if (TARG_HP < nextHP) {                // Current target has less health than next\n                if (TL > 2) jez.trace(`${TAG} ${eTargs[i].name} added to sleepers list`);\n                sleepers.push(eTargs[i])            // Store current target in our sleepers list\n                remainingSleepHp -= TARG_HP         // Remove the target's HP from pool\n                continue addSleepers                // Go on to next target\n            } else {                                // At least next target has same health\n                if (TL > 3) jez.trace(`${TAG} Starting at ${eTargs[i].name} multiple with same HP (${TARG_HP})`);\n                let matches = [];                   // So far we have one HP match\n                for (let j = i; j < eTargs.length; j++) {   // step forward through list\n                    matches.push(eTargs[j])         // Add target to our list of matches\n                    let n = eTargs[j + 1].actor.data.data.attributes.hp.value\n                    let t = eTargs[j + 1].actor.data.data.attributes.hp.temp\n                    if (n + t > TARG_HP) { i = j; break }\n                    if (TL > 2) jez.trace(`${TAG} ${eTargs[j].name} has same HP (${n}+${t})`);\n                }\n                // Print out info on the set of matches\n                if (TL > 1) for (let j = 0; j < matches.length; j++)\n                    jez.trace(`${TAG} Matches at ${TARG_HP}HP ${j} ${matches[j].name}`);\n                // Need to randomly pick those from the matches that fit inside the budget\n                let x = 0\n                while (TARG_HP < remainingSleepHp) {// Select matches while budge allows\n                    if (TL > 2) jez.trace(`${TAG} Looking through ${matches.length} matches`, matches);\n                    if (!matches.length) break      // No remaining matches break out\n                    matches = pickMatch(matches)    // Pick a match and set new list of matches\n                }\n                // Function to pick a match\n                function pickMatch(matches) {\n                    // Obtain a random integer from 0 to matches.length-1\n                    let sel = Math.floor(Math.random() * matches.length);\n                    if (TL > 1) jez.trace(`${TAG} Selected #${sel} ${matches[sel].name} from matches`, matches);\n                    sleepers.push(matches[sel])         // Store selected target in our sleepers list\n                    remainingSleepHp -= TARG_HP         // Remove the selection's HP from pool\n                    // Remove the selection from matches array\n                    if (TL > 3) jez.trace(`${TAG} matches list before splice`, matches);\n                    matches.splice(sel, 1)              // splice out match used    \n                    if (TL > 3) jez.trace(`${TAG} matches list after splice`, matches);\n                    return matches\n                }\n\n            }\n        }\n        else sleepers.push(eTargs[i])           // Last one fit inside budget, rare occurance\n    }\n    return(sleepers)\n}\n/***************************************************************************************************\n * Perform the VFX code\n ***************************************************************************************************/\nasync function runVFX(options = {}) {\n    const TL = options.traceLvl ?? 0\n    const FUNCNAME = \"runVFX()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |` \n    if (TL>1) jez.trace(`${TAG} --- Start ---`);\n    const VFX_NAME = `${MACRO}`\n    const VFX_OPACITY = 0.5;\n    const VFX_SCALE = 2.7;\n    const templateID = args[0].templateId\n    if (TL>2) jez.trace(`${TAG} templateID`, templateID)\n    //----------------------------------------------------------------------------------------------\n    // Pick a colour based on a colour string found in the icon's name.\n    // Color Mappings (Icon String : VFX Color):\n    // royal:dark_orangepurple, eerie:dark_purple, sky:blue, blue:blue, jade:green, magenta:pink, fire:yellow\n    //\n    let color = \"yellow\"\n    const IMAGE = aItem.img.toLowerCase()\n    if (IMAGE.includes(\"royal\")) color = \"Dark_OrangePurple\"\n    else if (IMAGE.includes(\"eerie\")) color = \"Dark_Purple\"\n    else if (IMAGE.includes(\"sky\")) color = \"Regular_Blue\"\n    else if (IMAGE.includes(\"blue\")) color = \"Regular_Blue\"\n    else if (IMAGE.includes(\"jade\")) color = \"Regular_Green\"\n    else if (IMAGE.includes(\"magenta\")) color = \"Regular_Pink\"\n    else if (IMAGE.includes(\"fire\")) color = \"Regular_Yellow\"\n    if (TL>2) jez.trace(`${TAG} Color selected: ${color}`)\n    const VFX_LOOP = `modules/jb2a_patreon/Library/1st_Level/Sleep/Cloud01_01_${color}_400x400.webm`\n    if (TL>2) jez.trace(`${TAG} VFX_File: ${VFX_LOOP}`)\n    new Sequence()\n    .effect()\n        .file(VFX_LOOP)\n        .atLocation(templateID) // Effect will appear at  template, center\n        .scale(VFX_SCALE)\n        .scaleIn(0.25, 1000)    // Expand from 0.25 to 1 size over 1 second\n        .rotateIn(180, 1000)    // 1/2 Rotation over 1 second \n        .scaleOut(0.25, 1000)   // Contract from 1 to 0.25 size over 1 second\n        .rotateOut(180, 1000)   // 1/2 Counter Rotation over 1 second\n        .opacity(VFX_OPACITY)\n        .duration(6000)\n        .name(VFX_NAME)         // Give the effect a uniqueish name\n        .fadeIn(10)             // Fade in for specified time in milliseconds\n        .fadeOut(1000)          // Fade out for specified time in milliseconds\n        .extraEndDuration(1200) // Time padding on exit to connect to Outro effect\n    .play();\n    await jez.wait(100)         // Don't delete till VFX established\n    canvas.templates.get(templateID).document.delete()\n    if (TL>1) jez.trace(`${TAG} --- Finish ---`);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": {
      "killAnim": false,
      "below": false,
      "override": true,
      "targetToken": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}