{
  "name": "%%Hex - Move%%",
  "type": "spell",
  "img": "icons/magic/perception/silhouette-stealth-shadow.webp",
  "data": {
    "description": {
      "value": "<p><strong>%%This item is used by the Jez's Hex Macro don't casually mess with it, please%%</strong></p>\n<p>This macro can be used as a bonus action to move an existing Hex effect from a dead target to a living opponent.</p>\n<p><strong>FoundryVTT</strong>: The dead token must exist in the current scene to be used as a source of the copy.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 4,
    "school": "con",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "atwill",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "%%Hex - Move%%",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Hex-Move.js\"\n/*****************************************************************************************\n * Basic Structure for a rather complete macro\n * \n * 02/11/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]   // Trim of the version number and extension\nconst MAC = MACRONAME.split(\"-\")[0]     // Extra short form of the MACRONAME\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nlet msg = \"\";\nconst FLAG = MAC    // Name of the DAE Flag       \n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif (!preCheck()) return;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults();\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults() {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(`First Targeted Token (tToken) of ${args[0].targets?.length}, ${tToken?.name}`, tToken);\n    jez.log(`First Targeted Actor (tActor) ${tActor?.name}`, tActor)\n    //----------------------------------------------------------------------------------------------\n    // Obtain the existing hexMark\n    //\n    let oldHexMark = getProperty(aToken.actor.data.flags, \"midi-qol.hexMark\")\n    jez.log(\"hexMark target:\", oldHexMark)\n    //----------------------------------------------------------------------------------------------\n    // Get the token for the old hex target\n    //\n    let oToken = canvas.tokens.placeables.find(ef => ef.id === oldHexMark)\n    if (!oToken) {\n        msg = `The token that had the old hex was not found.  Sorry, can not automatically move hex.`\n        ui.notifications.warn(msg);\n        postResults(msg);\n        return (false);\n    }\n    jez.log(`${oToken.name} was the old hex target`,oToken)\n    //----------------------------------------------------------------------------------------------\n    // Verify the old hex mark is actually, you know, dead\n    //\n    jez.log(\"oToken.actor.data.data.attributes.hp.value\", oToken.actor.data.data.attributes.hp.value)\n    if (oToken.actor.data.data.attributes.hp.value !== 0) {\n        msg = `Perhaps sadly, ${oToken.name} is alive!  The hex may not be moved.`\n        ui.notifications.warn(msg);\n        postResults(msg);\n        return (false);\n    } else jez.log(`Yea? ${oToken.name} is dead and can have hex moved`)\n    //----------------------------------------------------------------------------------------------\n    // Stash the token ID of the new target into the DAE Flag\n    //\n    await DAE.setFlag(aToken.actor, FLAG, tToken.id)\n    //----------------------------------------------------------------------------------------------\n    // Update the hexMark to the token ID in the effect data\n    //\n    let newHexMark = tToken.id\n    /** setProperty(object, key, value)\n     * A helper function which searches through an object to assign a value using a string key\n     * This string key supports the notation a.b.c which would target object[a][b][c]\n     * @param {object} object   The object to update\n     * @param {string} key      The string key\n     * @param {*} value         The value to be assigned\n     * @return {boolean}        Whether the value was changed from its previous value\n     */\n    setProperty(aToken.actor.data.flags, \"midi-qol.hexMark\", newHexMark)\n \n    //----------------------------------------------------------------------------------------------\n    // Get the data of the original hex on the target, then delete it.\n    //\n    let oldEffect = await oToken.actor.effects.find(i => i.data.label === FLAG);\n    jez.log(`**** ${FLAG} found?`, oldEffect)\n    if (!oldEffect) {\n        msg = `${FLAG} sadly not found on ${oToken.name}.`\n        ui.notifications.error(msg);\n        postResults(msg);\n        return (false);\n    }\n    //let icon = aItem.img\n    let origin = oldEffect.data.origin ? oldEffect.data.origin : args[0].uuid;\n    const LEVEL = args[0].spellLevel;\n    const RNDS = LEVEL === 3 ? 480 : LEVEL === 4 ? 480 : LEVEL >= 5 ? 1440 : 60;\n    let rounds = oldEffect.data.duration.rounds ? oldEffect.data.duration.rounds : RNDS\n    let seconds = 6 * rounds\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let startRound = oldEffect.data.duration.startRound ? oldEffect.data.duration.startRound : GAME_RND\n    let startTime = oldEffect.data.duration.startTime ? oldEffect.data.duration.startTime : game.time.worldTime\n    let itemData = oldEffect.data.flags.dae.itemData ? oldEffect.data.flags.dae.itemData : aItem\n    let spellLevel = oldEffect.data.flags.dae.spellLevel ? oldEffect.data.flags.dae.spellLevel : args[0].spellLevel\n    const hexEffect = await aToken.actor.effects.find(i => i.data.label === \"Hex\");\n    const concEffect = await aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n    let concId = oldEffect.data.flags.dae.concId ? oldEffect.data.flags.dae.concId : concEffect.id\n    let ability = \"\"\n    //-----------------------------------------------------------------------------------------------\n    // Build up ability list for following dialog\n    //\n    let ability_list = \"\";\n    const ABILITY_FNAME = Object.values(CONFIG.DND5E.abilities);\n    const ABILITY_SNAME = Object.keys(CONFIG.DND5E.abilities);\n    for (let i = 0; i < ABILITY_FNAME.length; i++) {\n        let full_name = ABILITY_FNAME[i];\n        let short_name = ABILITY_SNAME[i];\n        ability_list += `<option value=\"${short_name}\">${full_name}</option>`;\n    }\n    //-----------------------------------------------------------------------------------------------\n    // My new dialog code\n    //\n    let template = `\n<div>\n<label>Pick stat to be hexed (disadvantage on ability checks)</label>\n<div class=\"form-group\" style=\"font-size: 14px; padding: 5px; border: 2px solid silver; margin: 5px;\">\n`   // Back tick on its on line to make the console output better formatted\n    for (let i = 0; i < ABILITY_FNAME.length; i++) {\n        let fName = ABILITY_FNAME[i];\n        let sName = ABILITY_SNAME[i];\n        if (i === 0) template += `<input type=\"radio\" id=\"${sName}\" name=\"selectedLine\" value=\"${sName}\" checked=\"checked\"> <label for=\"${sName}\">${fName}</label><br>\n`\n        else template += `<input type=\"radio\" id=\"${sName}\" name=\"selectedLine\" value=\"${sName}\"> <label for=\"${sName}\">${fName}</label><br>\n`\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Build and display the dialog to pick stat being hexed\n    //\n    new Dialog({\n        title: aItem.name,\n        content: template,\n        buttons: {\n            hex: {\n                label: \"Hex\",\n                callback: async (html) => {\n                    ability = html.find(\"[name=selectedLine]:checked\").val();\n                    //bonusDamage(tToken, aItem, UUID, aToken, aActor, RNDS, SECONDS, GAME_RND);\n                    await jez.wait(500);\n                    applyDis(tToken, ability, itemData, origin, spellLevel, aToken, rounds, seconds, GAME_RND);\n                }\n            }\n        },\n        default: \"hex\"\n    }).render(true);\n    //----------------------------------------------------------------------------------------------\n    // Delete the old effect\n    //\n    oldEffect.delete();\n\n    /***************************************************************************************************\n     * Apply the hex debuff to the target\n    ***************************************************************************************************/\n    async function applyDis(tToken, ability, aItem, UUID, LEVEL, aToken, RNDS, SECONDS, GAME_RND) {\n        let effectData = {\n            label: aItem.name,\n            icon: aItem.img,\n            origin: UUID,\n            disabled: false,\n            duration: { rounds: RNDS, SECONDS: SECONDS, startRound: startRound, startTime: startTime },\n            flags: { dae: { itemData: aItem, spellLevel: LEVEL, tokenId: aToken.id, hexId: hexEffect, concId: concId } },\n            changes: [{ key: `flags.midi-qol.disadvantage.ability.check.${ability}`, mode: ADD, value: 1, priority: 20 }]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [effectData] });\n        //----------------------------------------------------------------------------------------------\n        // Post the results message\n        //\n        msg = `Hex removed from corpse of ${oToken.name}. ${tToken.name}'s ${ability.toUpperCase()} is now hexed,\n    and will make stat checks at disadvantage. ${aToken.name} will do additional damage on each hit to \n    ${tToken.name}`\n        postResults(msg)\n        jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n        return (true);\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}