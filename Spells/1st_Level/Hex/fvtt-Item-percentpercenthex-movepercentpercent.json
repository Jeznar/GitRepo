{
  "name": "%%Hex - Move%%",
  "type": "spell",
  "img": "icons/magic/perception/silhouette-stealth-shadow.webp",
  "data": {
    "description": {
      "value": "<p><strong>%%This item is used by the Jez's Hex Macro don't casually mess with it, please%%</strong></p>\n<p>This macro can be used as a bonus action to move an existing Hex effect from a dead target to a living opponent.</p>\n<p><strong>FoundryVTT</strong>: The dead token must exist in the current scene to be used as a source of the copy.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 4,
    "school": "con",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "atwill",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "%%Hex - Move%%",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Hex-Move.0.5.js\"\n/*****************************************************************************************\n * Basic Structure for a rather complete macro\n * \n * 02/11/22 0.1 Creation of Macro\n * 07/10/22 0.2 Move the hex if the taregt is missing and confirmed in a dialog\n * 07/31/22 0.3 Add convenientDescription\n * 11/01/22 0.4 Dealing with player permission issue clering old hex from corpse\n * 12/04/22 0.5 Handling missing base hex effect\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set standard variables\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst MAC = MACRONAME.split(\"-\")[0]                 // Extra short form of the MACRONAME\nconst FLAG = MAC                                    // Name of the DAE Flag    \n// const NEW_ITEM_NAME = `${aToken.name} ${}` // Name of item in actor's spell book\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif (!preCheck()) return;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({traceLvl:TL});          // Midi ItemMacro On Use\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return (true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-----------------------------------------------------------------------------------------------\n    // set the target data object\n    //\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //----------------------------------------------------------------------------------------------\n    // Is Hex currenty active?  If not, delete this action and quit\n    //\n    const HEX_EFFECT = await aToken.actor.effects.find(i => i.data.label === \"Hex\");\n    if (HEX_EFFECT) {\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} has an active hex`)\n    }\n    else {\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} does not have an active hex`)\n        await jez.deleteItems(aItem.name, \"spell\", aActor);\n        jez.badNews(`${aToken.name} has no active hex, deleting ${aItem.name}`, 'i')\n        return\n    }\n    //----------------------------------------------------------------------------------------------\n    // Obtain the existing hexMark\n    //\n    let oldHexMark = getProperty(aToken.actor.data.flags, \"midi-qol.hexMark\")\n    if (TL>1) jez.trace(`${TAG} hexMark target:`, oldHexMark)\n    //----------------------------------------------------------------------------------------------\n    // Get the token for the old hex target\n    //\n    let oToken = canvas.tokens.placeables.find(ef => ef.id === oldHexMark)\n    if (!oToken) {\n        let content = `<p style=\"color:DarkRed;\">Your previously hex'ed target appears to be missing \n                       from the current scene. Your hex can be moved only if that creature is now \n                       dead.</p>\n                       <p style=\"color:DarkSlateBlue;\">Is that target actually dead?</p>`\n        let targetDead = await Dialog.confirm({\n            title: 'Previous Hex Target is Missing!',\n            content: content,\n        });\n        if (TL>0) jez.trace(`${TAG} ***** targetDead`, targetDead)\n        if (!targetDead) {\n            msg = `The token that had the old hex is still alive.  Sorry, can not move hex.`\n            ui.notifications.warn(msg);\n            postResults(msg);\n            return (false);\n        }\n    }\n    //----------------------------------------------------------------------------------------------\n    // Verify the old hex mark is actually, you know, dead\n    //\n    if (oToken) {\n        if (TL > 1) jez.trace(`${TAG} ${oToken.name} was the old hex target`, oToken)\n        if (TL > 2) jez.trace(`${TAG} oToken.actor.data.data.attributes.hp.value`, oToken.actor.data.data.attributes.hp.value)\n        if (oToken.actor.data.data.attributes.hp.value !== 0) {\n            msg = `Perhaps sadly, ${oToken.name} is alive!  The hex may not be moved.`\n            ui.notifications.warn(msg);\n            postResults(msg);\n            return (false);\n        } else if (TL>1) jez.trace(`${TAG} Yea? ${oToken.name} is dead and can have hex moved`)\n    }\n    //----------------------------------------------------------------------------------------------\n    // Stash the token ID of the new target into the DAE Flag\n    //\n    if (TL > 3) jez.trace(`${TAG} Flag setting data`,\n        `aActor   `, aActor,\n        `FLAG     `, FLAG,\n        `tToken.id`, tToken?.id)\n    await DAE.setFlag(aToken.actor, FLAG, tToken.id)\n    if (TL > 1) jez.trace(`${TAG} Flag Value`,await DAE.getFlag(aToken.actor, FLAG))\n    //----------------------------------------------------------------------------------------------\n    // Update the hexMark to the token ID in the effect data\n    //\n    let newHexMark = tToken.id\n    /** setProperty(object, key, value)\n     * A helper function which searches through an object to assign a value using a string key\n     * This string key supports the notation a.b.c which would target object[a][b][c]\n     * @param {object} object   The object to update\n     * @param {string} key      The string key\n     * @param {*} value         The value to be assigned\n     * @return {boolean}        Whether the value was changed from its previous value\n     */\n    let rc = setProperty(aToken.actor.data.flags, \"midi-qol.hexMark\", newHexMark)\n    if (TL > 1) jez.trace(`${TAG} setProperty returned`,rc)\n    //----------------------------------------------------------------------------------------------\n    // Get the data of the original hex on the target, then delete it.\n    //\n    let oldEffect = null\n    if (oToken) {\n        oldEffect = await oToken.actor.effects.find(i => i.data.label === FLAG);\n        if (TL>1) jez.trace(`${TAG} **** ${FLAG} found?`, oldEffect)\n        if (TL>1) jez.trace(`${TAG} **** Effect UUID`, oldEffect.uuid) // Scene.MzEyYTVkOTQ4NmZk.Token.KVTYA7FwushIK9h9.ActiveEffect.ztlq9s7jopvvevn9\n        if (!oldEffect) {\n            msg = `${FLAG} sadly not found on ${oToken.name}.`\n            ui.notifications.error(msg);\n            postResults(msg);\n            return (false);\n        }\n    }\n    //----------------------------------------------------------------------------------------------\n    // Set a bunch of values\n    //\n    //let icon = aItem.img\n    let origin = oldEffect?.data?.origin ? oldEffect?.data?.origin : args[0].uuid;\n    const LEVEL = args[0].spellLevel;\n    const RNDS = LEVEL === 3 ? 480 : LEVEL === 4 ? 480 : LEVEL >= 5 ? 1440 : 60;\n    let rounds = oldEffect?.data?.duration?.rounds ? oldEffect?.data?.duration?.rounds : RNDS\n    let seconds = 6 * rounds\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let startRound = oldEffect?.data?.duration?.startRound ? oldEffect?.data?.duration?.startRound : GAME_RND\n    let startTime = oldEffect?.data?.duration?.startTime ? oldEffect?.data?.duration?.startTime : game.time.worldTime\n    let itemData = oldEffect?.data?.flags?.dae?.itemData ? oldEffect?.data?.flags?.dae?.itemData : aItem\n    let spellLevel = oldEffect?.data?.flags?.dae?.spellLevel ? oldEffect?.data?.flags?.dae?.spellLevel : args[0].spellLevel\n    // const HEX_EFFECT = await aToken.actor.effects.find(i => i.data.label === \"Hex\");\n    const concEffect = await aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n    let concId = oldEffect?.data?.flags?.dae?.concId ? oldEffect?.data?.flags?.dae?.concId : concEffect.id\n    const OLD_UUID = oldEffect?.uuid\n    let ability = \"\"\n    //-----------------------------------------------------------------------------------------------\n    // Build up ability list for following dialog\n    //\n    let ability_list = \"\";\n    const ABILITY_FNAME = Object.values(CONFIG.DND5E.abilities);\n    const ABILITY_SNAME = Object.keys(CONFIG.DND5E.abilities);\n    for (let i = 0; i < ABILITY_FNAME.length; i++) {\n        let full_name = ABILITY_FNAME[i];\n        let short_name = ABILITY_SNAME[i];\n        ability_list += `<option value=\"${short_name}\">${full_name}</option>`;\n    }\n    //-----------------------------------------------------------------------------------------------\n    // My new dialog code\n    //\n    let template = `\n<div>\n<label>Pick stat to be hexed (disadvantage on ability checks)</label>\n<div class=\"form-group\" style=\"font-size: 14px; padding: 5px; border: 2px solid silver; margin: 5px;\">\n`   // Back tick on its on line to make the console output better formatted\n    for (let i = 0; i < ABILITY_FNAME.length; i++) {\n        let fName = ABILITY_FNAME[i];\n        let sName = ABILITY_SNAME[i];\n        if (i === 0) template += `<input type=\"radio\" id=\"${sName}\" name=\"selectedLine\" value=\"${sName}\" checked=\"checked\"> <label for=\"${sName}\">${fName}</label><br>\n`\n        else template += `<input type=\"radio\" id=\"${sName}\" name=\"selectedLine\" value=\"${sName}\"> <label for=\"${sName}\">${fName}</label><br>\n`\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Build and display the dialog to pick stat being hexed\n    //\n    new Dialog({\n        title: aItem.name,\n        content: template,\n        buttons: {\n            hex: {\n                label: \"Hex\",\n                callback: async (html) => {\n                    ability = html.find(\"[name=selectedLine]:checked\").val();\n                    //bonusDamage(tToken, aItem, UUID, aToken, aActor, RNDS, SECONDS, GAME_RND);\n                    await jez.wait(500);\n                    applyDis(tToken, ability, itemData, origin, spellLevel, aToken, rounds, seconds, GAME_RND);\n                }\n            }\n        },\n        default: \"hex\"\n    }).render(true);\n    //----------------------------------------------------------------------------------------------\n    // Delete the old effect\n    //\n    if (oldEffect) jez.deleteEffectAsGM(OLD_UUID, { traceLvl: TL })\n    vfxPlayHex(tToken, { color: \"*\" })\n    /***************************************************************************************************\n     * Apply the hex debuff to the target\n    ***************************************************************************************************/\n    async function applyDis(tToken, ability, aItem, UUID, LEVEL, aToken, RNDS, SECONDS, GAME_RND) {\n        const C_DESC = `Takes extra damage from ${aToken.name}'s attacks`\n        let effectData = {\n            label: aItem.name,\n            icon: aItem.img,\n            origin: UUID,\n            disabled: false,\n            duration: { rounds: RNDS, SECONDS: SECONDS, startRound: startRound, startTime: startTime },\n            flags: {\n                dae: {\n                    itemData: aItem,\n                    spellLevel: LEVEL,\n                    tokenId: aToken.id,\n                    hexId: HEX_EFFECT,\n                    concId: concId\n                },\n                convenientDescription: C_DESC\n\n            },\n            changes: [{ key: `flags.midi-qol.disadvantage.ability.check.${ability}`, mode: jez.ADD, value: 1, priority: 20 }]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: [effectData] });\n        //----------------------------------------------------------------------------------------------\n        // Post the results message\n        //\n        msg = `Hex removed from ${oToken?.name}'s corpse. <b>${tToken.name}</b>'s ${ability.toUpperCase()} is now hexed,\n    and will make stat checks at disadvantage.`\n        postResults(msg)\n        if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n        return (true);\n    }\n}\n/***************************************************************************************************\n * Function to play a VFX hex on a specified target.  \n * \n * Supported colors: \"Blue\", \"Green\", \"Red\", \"*\"\n * \n * @typedef  {Object} optionObj\n * @property {string} color - one of the supported colors\n * @property {number} opactity - real number defining opacity, defaults to 1.0\n * @property {number} scale - real number defining scale, defaults to 1.0\n***************************************************************************************************/\nasync function vfxPlayHex(token, optionObj) {\n    //-------------------------------------------------------------------------------------------------\n    // Anticipated VFX files include\n    // modules/jb2a_patreon/Library/Generic/Token_Stage/TokenStageHex01_04_Regular_Green_400x400.webm\n    // modules/jb2a_patreon/Library/Generic/Token_Stage/TokenStageHex01_04_Regular_Blue_400x400.webm\n    // modules/jb2a_patreon/Library/Generic/Token_Stage/TokenStageHex01_04_Regular_Red_400x400.webm\n    //\n    // Sequencer Docs: https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki/Effects\n    //\n    const colors = [\"Blue\", \"Green\", \"Red\", \"*\"]\n    let color // = optionObj.color ?? \"Green\"\n    if (colors.includes(optionObj?.color)) color = optionObj?.color\n    else color = \"*\"\n    const SCALE = optionObj?.scale ?? 1.4\n    const OPACITY = optionObj?.opacity ?? 1.0\n    //const VFX_FILE = `modules/jb2a_patreon/Library/Generic/Explosion/Explosion_*_${color}_400x400.webm`\n    const VFX_FILE = `modules/jb2a_patreon/Library/Generic/Token_Stage/TokenStageHex01_04_Regular_${color}_400x400.webm`\n    if (TL>1) jez.trace(`${TAG} VFX_FILE`, VFX_FILE)\n    new Sequence()\n        .effect()\n        .file(VFX_FILE)\n        .atLocation(token)\n        .center()\n        // .scale(SCALE)\n        .scaleToObject(SCALE)\n        .repeats(8, 2000, 3000)\n        .opacity(OPACITY)\n        .play()\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.4iDsSzQfV7CL5APW"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}