{
  "name": "Hideous Laughter",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/explosion-magenta-2.jpg",
  "data": {
    "description": {
      "value": "<p><em>A creature of your choice that you can see within range perceives everything as hilariously funny and falls into fits of laughter if this spell affects it. </em></p>\n<p>The target must succeed on a <strong>Wisdom saving throw or fall prone, becoming Incapacitated and unable to stand up for the Duration.</strong> A creature with an Intelligence score of 4 or less isn't affected.</p>\n<p>At the <strong>end of each</strong> of its turns, and <strong>each time it takes damage</strong>, the target can make <strong>another Wisdom saving</strong> throw. The target has <strong>advantage </strong>on the saving throw if it's triggered by damage. On a success, the spell ends.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This is implmented with Crymic's macro.Â  The Int less than 4 being immune is not automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 30,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": 13,
      "scaling": "spell"
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "Tiny tarts and a feather that is waved in the air",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "2uNNhG0teoyGCX2W",
      "changes": [
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 5,
          "value": "turn=end,saveAbility=wis,saveDC=@attributes.spelldc,label=Tashas Hideous Laughter",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        },
        {
          "key": "macro.CE",
          "mode": 0,
          "value": "Incapacitated",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/explosion-magenta-2.jpg",
      "label": "Hideous Laughter",
      "transfer": false,
      "flags": {
        "core": {
          "statusId": ""
        },
        "dae": {
          "stackable": "none",
          "macroRepeat": "startEveryTurn",
          "specialDuration": [],
          "transfer": false,
          "durationExpression": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "flags.midi-qol.OverTime",
        "macro.itemMacro",
        "macro.CE"
      ]
    }
  ],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "forceCEOn": false
    },
    "core": {
      "sourceId": "Item.Nyl9SSFSG5lloLF0"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Hideous Laughter",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Hideous_Laughter.0.4.js\"\n/*****************************************************************************************\n * \n * 06/02/22 0.1 Creation of Macro\n * 07/09/22 0.2 Replace CUB.addCondition with CE\n * 07/31/22 0.3 Add convenientDescription, prevent duplicate prones\n * 10/14/22 0.4 Fix bug that causes save to occur when any token is damaged \n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//----------------------------------------------------------------------------------\n// Setup global variables\n//\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor;\nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst EFFECT_NAME = \"Hideous Laughter\"\n//##################################\n// Read First!!! Requires both Dynamic Active Effects + Midi-QoL\n// DAE setup\n// Requires: Cub_Condition Callback Macro, Times Up Module.\n// Duration: Macro Repeat: End of each turn.\n// Effects: Either use Item Macro or Macro Execute, no args needed.\n//##################################\nconst origin = LAST_ARG.origin;\njez.log(\"origin\", origin)\nlet itemUuid = null\nif (origin) itemUuid = await fromUuid(origin);\njez.log(\"itemUuid\", itemUuid)\nconst caster = itemUuid?.actor; // curious setting here...makes the clearing conc work\njez.log(`*** caster`, caster)\nconst GAME_RND = game.combat ? game.combat.round : 0;\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE every round\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is launched by DAE placing effect\n ***************************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // Crymic retained code\n    // Next line is what Crymic used, sadly it triggers when any token is damaged.\n    // let hookId = Hooks.on(\"midi-qol.DamageRollComplete\", damageCheck);\n    //----------------------------------------------------------------------------------------------\n    // Setup a hook that fires when the target and only the target is subject to damage\n    // Logic taken from Regeneration_Vampire_Initialize.0.1.js.  This fixes bug as of version 0.4.\n    let hookId = Hooks.on(\"midi-qol.DamageRollComplete\", (workflow) => {\n        if (workflow.targets.first() === aToken) damageCheck(workflow)\n    })\n    //----------------------------------------------------------------------------------------------\n    // Stash the hook id (likely a 3 or 4 digit number)\n    //\n    DAE.setFlag(aActor, \"hLaughter\", hookId);\n    //----------------------------------------------------------------------------------------------\n    // Perform some pre-req checks to protect the VFX\n    //\n    if ((!(game.modules.get(\"jb2a_patreon\")?.active ||\n        game.modules.get(\"JB2A_DnD5e\")?.active) && !(game.modules.get(\"sequencer\")?.active)))\n        return jez.badNews(`${MACRO} can not find pre-req modules to run the VFX`, \"w\")\n    //----------------------------------------------------------------------------------------------\n    // Fire the VFX and go home\n    //\n    runVFX(aToken);\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is launched by DAE removing effect\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // Crymic retained code\n    //\n    let hookId = DAE.getFlag(aActor, \"hLaughter\");\n    Hooks.off(\"midi-qol.DamageRollComplete\", hookId);\n    DAE.unsetFlag(aActor, \"hLaughter\");\n    let conc = caster.effects.find(i => i.data.label === \"Concentrating\");\n    if (conc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: caster.uuid, effects: [conc.id] });\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Crymic's damageCheck(workflow)\n ***************************************************************************************************/\nasync function damageCheck(workflow) {\n    const FUNCNAME = \"damageCheck(workflow)\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(`### workflow`, workflow)\n    //----------------------------------------------------------------------------------------------\n    // (Crymic) Place Damage Save Effect on afflicted token ... this is a VERY short duration effect \n    // that manages the saving throw from damage.  \n    //\n    const C_DESC = `Incapacitated with laughter.  DC${SAVE_DC} WIS Save to end end of each turn and when damaged.`\n    let effectData = [{\n        label: \"Damage Save\",\n        icon: \"icons/skills/wounds/injury-triple-slash-bleed.webp\",\n        origin: origin,\n        disabled: false,\n        flags: {\n            dae: { specialDuration: [\"isDamaged\"] },\n            convenientDescription: C_DESC\n        },\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        changes: [{ key: `flags.midi-qol.advantage.ability.save.all`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: 1, priority: 20 }]\n    }];\n    jez.log(\">>> effectData\", effectData)\n    let damageSave = await aActor.effects.find(i => i.data.label === \"Damage Save\");\n    jez.log(\">>> damageSave\", damageSave)\n    if (!damageSave) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: LAST_ARG.actorUuid, effects: effectData });\n    await jez.wait(600);\n    //----------------------------------------------------------------------------------------------\n    // (Crymic) Do something mysterious with workflow.damageList (which doesn't exist at this point)\n    //\n    //jez.log(\">>> workflow.damageList\", workflow?.damageList)\n    //let attackWorkflow = workflow.damageList.map((i) => ({ tokenId: i?.tokenId, totalDamage: i?.totalDamage })).filter(i => i.tokenId === aToken.id);\n    //jez.log(\">>> attackWorkflow\", attackWorkflow)\n    //let lastAttack = attackWorkflow[attackWorkflow.length - 1];\n    //jez.log(\">>> lastAttack\", lastAttack)\n    //----------------------------------------------------------------------------------------------\n    // (Crymic) If the triggering attack did more than zero damage\n    //\n    //if (lastAttack?.totalDamage > 0) { // Original if statement\n    if (workflow.damageTotal > 0) {\n        jez.log(\">>> workflow.damageTotal\", workflow.damageTotal)\n        let midiWorkFlow = await MidiQOL.Workflow.getWorkflow(origin);\n        jez.log(\">>> midiWorkFlow\", midiWorkFlow)\n        midiWorkFlow.advantage = true;\n        //let itemCard = await MidiQOL.showItemCard.bind(midiWorkFlow.item)(false, midiWorkFlow, false);\n        //jez.log(\">>> itemCard\", itemCard)\n        //midiWorkFlow.itemCardId = await itemCard.id;\n        await midiWorkFlow.checkSaves(false);\n        //await midiWorkFlow.displaySaves(false, true);\n        let save = await midiWorkFlow.saveResults[0];\n        jez.log(\">>> save\", save)\n        let DC = midiWorkFlow.item.data.data.save.dc;\n        jez.log(\">>> DC\", DC)\n        // game.dice3d?.showForRoll(save);\n        await ui.chat.scrollBottom();\n        if (save.total >= DC) {\n            let removeConc = caster.effects.find(i => i.data.label === \"Concentrating\");\n            jez.log(\">>> removeConc\", removeConc)\n            bubbleForAll(aToken.id, `Ouch, not funny`, true, true)\n            if (removeConc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: caster.uuid, effects: [removeConc.id] });\n            ChatMessage.create({\n                user: game.user._id,\n                speaker: ChatMessage.getSpeaker({ token: aToken }),\n                content: `${aToken.name} ceases uncontrolled laughter growing more serious, even though remaining prone.`,\n                type: CONST.CHAT_MESSAGE_TYPES.EMOTE\n            });\n        } else {\n            runVFX(aToken);\n            bubbleForAll(aToken.id, `That tickles!`, true, true)\n            ChatMessage.create({\n                user: game.user._id,\n                speaker: ChatMessage.getSpeaker({ token: aToken }),\n                content: `${aToken.name} laughs maniacally, finding everything to be hilariously funny, \n                rolling on the ground in fits of laughter.`,\n                type: CONST.CHAT_MESSAGE_TYPES.EMOTE\n            });\n        }\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n}\n/***************************************************************************************************\n *    END_OF_CRYMIC_CODE\n *                                END_OF_CRYMIC_CODE\n *                                                             END_OF_CRYMIC_CODE\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\nfunction postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    if (!preCheck()) return;\n    //----------------------------------------------------------------------------------------------\n    // If Intelligence is 4 or less, immune to this spell.\n    //\n    let tInt = tToken.actor.data.data.abilities['int'].value\n    if (tInt < 5) {\n        msg = `${tToken.name} doesn't see why that is funny.  Might be because its intelligence is less than 5.`\n        jez.log(msg)\n        postResults(msg)\n        await jez.wait(100) // Allow earlier effects to complete \n        let conc = aActor.effects.find(i => i.data.label === \"Concentrating\");\n        if (conc) conc.delete();\n        // Generate a chat bubble on the scene, using a World script!\n        msg = `I don't get it.  That's not funny!`\n        bubbleForAll(tToken.id, msg, true, true)\n        return\n    }\n    //----------------------------------------------------------------------------------------------\n    // Proceed with saving throw\n    //\n    if (args[0].failedSaveUuids.length === 1) {         // target failed save\n        msg = `<b>${tToken.name}</b> failed save and is affected by ${aItem.name}, incapacitated\n        and falling prone.`\n        bubbleForAll(tToken.id, `That is hillarious!`, true, true)\n        await jez.wait(50) // Allow earlier effects to complete \n        // Knock the target prone, if it isn't already prone\n        await jezcon.addCondition(\"Prone\", tToken.actor.uuid, { allowDups: false })\n        await jez.wait(100) // Allow earlier effects to complete \n    }\n    else bubbleForAll(tToken.id, `Yea, right, not that funny`, true, true)\n    //----------------------------------------------------------------------------------------------\n    // Modify recently created effect to have a convenientDescription\n    //\n    let effect = await tToken.actor.effects.find(i => i.data.label === EFFECT_NAME);\n    if (!effect) return jez.badNews(`Could not find ${EFFECT_NAME} effect on ${tToken.name}`, \"e\")\n    const C_DESC = `Incapacitated with laughter.  DC${SAVE_DC} WIS Save to clear, end of turns and when damaged.`\n    await effect.update({ flags: { convenientDescription: C_DESC } });\n    //----------------------------------------------------------------------------------------------\n    // Post results\n    //\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return (true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    runVFX(aToken)\n    jez.postMessage({\n        color: jez.randomDarkColor(),\n        fSize: 14,\n        icon: aToken.data.img,\n        msg: `${aToken.name} finds everything hilariously funny and rolls on the ground in fits of \n        laughter. `,\n        title: `<b>${aToken.name}</b> ROFL!`,\n        token: aToken\n    })\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Play a little VFX on our afflicted token\n ***************************************************************************************************/\nasync function runVFX(token5e) {\n    new Sequence()\n        .effect()\n        .file(\"jb2a.toll_the_dead.purple.skull_smoke\")\n        .atLocation(token5e)\n        .scaleToObject(1.5)\n        .waitUntilFinished(-500)\n        .play()\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": null,
      "elevation": null,
      "depth": null,
      "environment": ""
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}