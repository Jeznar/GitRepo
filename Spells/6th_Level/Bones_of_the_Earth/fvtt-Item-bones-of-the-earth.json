{
  "name": "Bones of the Earth",
  "type": "spell",
  "img": "icons/commodities/stone/masonry-block-cube-grey-teal.webp",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\">You cause up to six pillars of stone to burst from places on the ground that you can see within range. Each pillar is a cylinder that has a diameter of 5 feet and a height of up to 30 feet. The ground where a pillar appears must be wide enough for its diameter, and you can target the ground under a creature if that creature is Medium or smaller. Each pillar has AC 5 and 30 hit points. When reduced to 0 hit points, a pillar crumbles into rubble, which creates an area of difficult terrain with a 10-foot radius that lasts until the rubble is cleared. Each 5-foot-diameter portion of the area requires at least 1 minute to clear by hand.</p>\n<p class=\"Core-Styles_Core-Body\">If a pillar is created under a creature, that creature must succeed on a Dexterity saving throw or be lifted by the pillar. A creature can choose to fail the save.</p>\n<p class=\"Core-Styles_Core-Body\">If a pillar is prevented from reaching its full height because of a ceiling or other obstacle, a creature on the pillar takes 6d6 bludgeoning damage and is restrained, pinched between the pillar and the obstacle. The restrained creature can use an action to make a Strength or Dexterity check (the creature’s choice) against the spell’s save DC. On a success, the creature is no longer restrained and must either move off the pillar or fall off it.</p>\n<p class=\"Core-Styles_Core-Body\"><strong><span class=\"Serif-Character-Style_Inline-Subhead-Serif\">At Higher Levels.</span></strong> When you cast this spell using a spell slot of 7th level or higher, you can create two additional pillars for each slot level above 6th.</p>\n<hr />\n<p class=\"Core-Styles_Core-Body\"><strong>FoundryVTT</strong>: This spell will guide placement of the columns.  The columns each have an item that can be used to force the saving throw and apply damage/condition.  Subsequent escape attempts are not automated.   If the column is destroyed, GM should delete the token and place rubble or other marker (tile, Icons_JGB/traps/rubble2x2) to indicate new difficult terrain. </p>",
      "chat": "<p class=\"Core-Styles_Core-Body\">You cause up to six pillars of stone to burst from places on the ground that you can see within range. Each pillar is a cylinder that has a diameter of 5 feet and a height of up to 30 feet. The ground where a pillar appears must be wide enough for its diameter, and you can target the ground under a creature if that creature is Medium or smaller. Each pillar has AC 5 and 30 hit points. When reduced to 0 hit points, a pillar crumbles into rubble, which creates an area of difficult terrain with a 10-foot radius that lasts until the rubble is cleared. Each 5-foot-diameter portion of the area requires at least 1 minute to clear by hand.</p>\n<p class=\"Core-Styles_Core-Body\">If a pillar is created under a creature, that creature must succeed on a Dexterity saving throw or be lifted by the pillar. A creature can choose to fail the save.</p>\n<p class=\"Core-Styles_Core-Body\">If a pillar is prevented from reaching its full height because of a ceiling or other obstacle, a creature on the pillar takes 6d6 bludgeoning damage and is restrained, pinched between the pillar and the obstacle. The restrained creature can use an action to make a Strength or Dexterity check (the creature’s choice) against the spell’s save DC. On a success, the creature is no longer restrained and must either move off the pillar or fall off it.</p>\n<p class=\"Core-Styles_Core-Body\"><strong><span class=\"Serif-Character-Style_Inline-Subhead-Serif\">At Higher Levels.</span></strong> When you cast this spell using a spell slot of 7th level or higher, you can create two additional pillars for each slot level above 6th.</p>",
      "unidentified": ""
    },
    "source": "Elemental Evil Player's Companion pg 150",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 120,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "ItemMacro",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 6,
    "school": "trs",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 137865,
      "definitionId": 2371,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 4,
          "pageNumber": 150,
          "sourceType": 1
        }
      ],
      "tags": [
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_s4ls9woie3n"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.84PYE3mG3fV2LJcJ"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Bones of the Earth",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Bones_of_the_Earth.0.1.js\"\nconst TL = 0;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Summon pillars to the scene to implement the 6th level spell Bones of the Earth\n * \n * 03/22/24 0.1 Creation of Macro, borrowing from Animate_Objects.0.4.js\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.log(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_LEVEL = args[0].spellLevel\nconst SPELL_DC = aActor.data.data.attributes.spelldc\nconst NUM_BONES = 6 + (SPELL_LEVEL -6) * 2  // 6 plus 2 per spell cast level above 6\nconst BONE_TEMPLATE = '%Bone of the Earth%'\nconst ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\nconst MAX_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 120\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.log(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Grab template creature data from actor's directory.\n    //\n    let summonData = game.actors.getName(BONE_TEMPLATE)\n    if (!summonData) return jez.badNews(`$TAG \"${BONE_TEMPLATE}\" could not be found in actor directory`, \"e\")\n    //--------------------------------------------------------------------------------------------------\n    // Build the dataObject for our summon call\n    //\n    let argObj = {\n        defaultRange: MAX_RANGE,            // Defaults to 30, but this varies per spell\n        duration: 1000,                     // Duration of the intro VFX\n        img: aItem.img,                     // Image to use on the summon location cursor\n        introTime: 1000,                    // Amount of time to wait for Intro VFX\n        introVFX: '~Explosion/Explosion_01_${color}_400x400.webm', // default introVFX file\n        minionName: `Bone of Earth`,\n        name: aItem.name,                   // Name of action (message only), typically aItem.name\n        outroVFX: '~Smoke/SmokePuff01_01_Regular_${color}_400x400.webm', // default outroVFX file\n        scale: 0.7,\t\t\t\t\t\t\t\t// Default value but needs tuning at times\n        source: aToken,                     // Coords for source (with a center), typically aToken\n        width: 1,                           // Width of token to be summoned, 1 is the default\n        traceLvl: TL                        // Trace level, matching calling function decent choice\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Modify template setting save DC to SPELL_DC\n    //\n    argObj.updates = customization(`Column`, SPELL_DC, summonData, { traceLvl: TL })\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Perform actual summons\n    //\n    for (let i = 0; i < NUM_BONES; i++) {\n        if (TL > 1) jez.log(`${TAG} Summoning Bone #${i+1}`)\n        const BONE_ID_ARRAY = await jez.spawnAt(BONE_TEMPLATE, aToken, aActor, aItem, argObj)\n        await jez.wait(500)\n        if (TL > 2) jez.log(`${TAG} Bone_ID_ARRAY`, BONE_ID_ARRAY) \n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    msg = `${NUM_BONES} columns have errupted, potentially pinning unfortunates who were standing on point of erruption.`\n    postResults(msg)\n    if (TL > 0) jez.log(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Customize the summon data and return it.  Specificially:\n *  - change %SPELL_DC% in action description\n *  - set save DC \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction customization(MINION_NAME, SPELL_DC, SUMMON_DATA, options = {}) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL > 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.log(`${TAG} Customization Parms`, 'MINION_NAME', MINION_NAME, 'SPELL_DC   ', SPELL_DC,\n        'SUMMON_DATA', SUMMON_DATA, \"options    \", options)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Function Variables\n    //\n    let updates = {}\n    const ITEM_NAME_TO_BE_UPDATED = \"Pin to Ceiling\"\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Grab the current contents of the item to be updated\n    //\n    let oldDescription = \"\"\n    for([key,value] of SUMMON_DATA.data.items.entries()) {\n        if (value.data.name === ITEM_NAME_TO_BE_UPDATED) {\n            oldDescription = value.data.data.description.value\n            break\n        }\n    }\n    if (!oldDescription) return jez.badNews(`Could not find '${ITEM_NAME_TO_BE_UPDATED}'`,'w')\n    if (TL > 3) jez.log(`${TAG} Description to update`, oldDescription)\n    const regExp = new RegExp(`%SPELL_DC%`, \"g\");\n    newDescription = oldDescription.replace(regExp, SPELL_DC);\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Modifications\n    // \n    updates = {\n        token: {\n            \"name\": MINION_NAME,\n        },\n        actor: {\n            \"name\": MINION_NAME,\n        },\n        embedded: {\n            Item: {\n                [ITEM_NAME_TO_BE_UPDATED]: {                    // Brackets needed to force evaluation before use\n                    \"data.description.value\": newDescription,\n                    \"data.save.dc\": SPELL_DC\n                },\n            },\n        }\n    }\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Done\n    //\n    return updates\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}