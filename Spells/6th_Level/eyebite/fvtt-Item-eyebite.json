{
  "name": "Eyebite",
  "type": "spell",
  "img": "Icons_JGB/Conditions/evil-eye-red-3.png",
  "data": {
    "description": {
      "value": "<p>For the spell’s Duration, your eyes become an inky void imbued with dread power. One creature of your choice within 60 feet of you that you can see must succeed on a Wisdom saving throw or be affected by one of the following Effects of your choice for the Duration. On each of your turns until the spell ends, you can use your action to target another creature but can’t target a creature again if it has succeeded on a saving throw against this casting of eyebite.</p>\n<ul>\n<li><strong>Asleep</strong>. The target falls Unconscious. It wakes up if it takes any damage or if another creature uses its action to shake the sleeper awake.</li>\n<li><strong>Panicked</strong>. The target is Frightened of you. On each of its turns, the frigh⁠tened creature must take the Dash action and move away from you by the safest and shortest available route, unless there is nowhere to move. If the target moves to a place at least 60 feet away from you where it can no longer see you, this effect ends.</li>\n<li><strong>Sickened</strong>. The target has disadvantage on Attack rolls and Ability Checks. At the end of each of its turns, it can make another Wisdom saving throw. If it succeeds, the effect ends</li>\n</ul>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 238",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "flat"
    },
    "level": 6,
    "school": "nec",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "z1vYz44IiLnxCyKe",
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none",
          "specialDuration": [],
          "macroRepeat": "startEveryTurn"
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "hostile": false,
          "onlyOnce": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Short Rest"
        }
      },
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "@attributes.spelldc",
          "priority": "0"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "rounds": 10
      },
      "icon": "systems/dnd5e/icons/spells/evil-eye-red-3.jpg",
      "label": "Eyebite",
      "tint": null,
      "transfer": false,
      "selectedKey": "macro.itemMacro"
    }
  ],
  "sort": 0,
  "flags": {
    "dynamiceffects": {
      "equipActive": false,
      "alwaysActive": false,
      "effects": [
        {
          "modSpecKey": "macro.execute",
          "value": "Eyebite @target @attributes.spelldc ",
          "mode": "+",
          "targetSpecific": false,
          "id": 1,
          "itemId": "XcK0JcIi8L5qpnzF",
          "active": true,
          "_targets": [],
          "label": "Macro Execute"
        }
      ]
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Eyebite",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"eyebite\"\n/*****************************************************************************************\n * For the spell’s Duration, your eyes become an inky void imbued with dread power. One \n * creature of your choice within 60 feet of you that you can see must succeed on a Wisdom \n * saving throw or be affected by one of the following Effects of your choice for the \n * Duration. On each of your turns until the spell ends, you can use your action to target \n * another creature but can’t target a creature again if it has succeeded on a saving \n * throw against this casting of eyebite.\n * \n * -- Asleep. The target falls Unconscious. It wakes up if it takes any damage or if  \n *    another creature uses its action to shake the sleeper awake. \n *    EXP_COND: takes any damage\n * \n * -- Panicked. The target is Frightened of you. On each of its turns, the frigh⁠tened \n *    creature must take the Dash action and move away from you by the safest and shortest \n *    available route, unless there is nowhere to move. If the target moves to a place at \n *    least 60 feet away from you where it can no longer see you, this effect ends.\n *    EXP_COND: 60+ feet away and can no longer see the caster\n * \n * -- Sickened. The target has disadvantage on Attack rolls and Ability Checks. At the end \n *    of each of its turns, it can make another Wisdom saving throw. If it succeeds, the\n *    effect ends\n *    EXP_COND:End of each turn a WIS Save\n * \n * Implementaion idea: Place a effect on the caster that runs ever turn and asks what to \n * do with this spell, offering the three effects and nothing as options.  It will need \n * to put an effect with appropriate settings on the target to handle effect expirations. \n * \n * 02/21/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\njez.log(\"moving on\")\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet spellDC = aActor.data.data.attributes.spelldc;\njez.log(\"spellDC\", spellDC)\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nconst IMMUNE_COND = `Eyebite Immune ${LAST_ARG.actorUuid}`\njez.log('IMMUNE_COND', IMMUNE_COND)\nconst EYEBITE_ICON = \"Icons_JGB/Conditions/evil-eye-red-3.png\"\nconst IMMUNE_ICON = \"Icons_JGB/Conditions/evil-eye-red-3-immune.png\"\nconst GAME_RND = game.combat ? game.combat.round : 0;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif ((args[0]?.tag === \"OnUse\") && !preCheck())return;\n//----------------------------------------------------------------------------------\n// Alternative method for finding CUB Condition macro -JGB for Kandashi's macro\n//\nconst CUBControl = game.macros?.getName(\"CUB Condition\");\nif (!CUBControl) return ui.notifications.error(`Cannot locate CUB Condition Macro`);\njez.log(\"CUBControl\",CUBControl)\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE removal\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if(!game.modules.get(\"advanced-macros\")?.active) {ui.notifications.error(\"Please enable the Advanced Macros module\") ;return;}\n    if(!game.modules.get(\"combat-utility-belt\")?.active) {ui.notifications.error(\"Please enable the CUB module\"); return;}\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        ui.notifications.warn(msg)\n        jez.log(msg)\n        return(false);\n    }\n    return (true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n ***************************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    firstEyebiteDialog()\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\n async function doEach() {\n    const FUNCNAME = \"doEach()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    eachEyebiteDialog()\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Eyebite Dialog from eyebite_midi-srd_1.02.js (Perhaps by Kandashi)\n ***************************************************************************************************/\nfunction firstEyebiteDialog() {\n    const FUNCNAME = \"EyebiteDialog()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    spellDC = args[1]\n    //----------------------------------------------------------------------------------\n    //\n    new Dialog({\n        title: \"Eyebite options\",\n        content: \"<p>Target a token and select the effect to attempt.</p>\",\n        buttons: {\n            one: {\n                label: \"Asleep\",\n                callback: async () => { await checkTokenSave(\"Unconscious\") },\n            },\n            two: {\n                label: \"Panicked\",\n                callback: async () => { await checkTokenSave(\"Frightened\") },\n            },\n            three: {\n                label: \"Sickened\",\n                callback: async () => { await checkTokenSave(\"Poisoned\") },\n            },\n        }\n    }).render(true);\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n}\n/***************************************************************************************************\n * Eyebite Dialog from eyebite_midi-srd_1.02.js (Perhaps by Kandashi)\n ***************************************************************************************************/\n function eachEyebiteDialog() {\n    const FUNCNAME = \"EyebiteDialog()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    spellDC = args[1]\n    //----------------------------------------------------------------------------------\n    //\n    const qTitle = \"Use Action to Inflict Eyebite?\"\n    const qText = `If you want to use your action this turn to inflict an eyebite, target\n        your victim, select the effect, and click <b>ok</b>; otherwise, click the \n        <b>Cancel</b> button.`\n    const qChoices = [\n        \"Sleep\",\n        \"Panic\",\n        \"Sicken\"\n    ]\n    jez.pickRadioListArray(qTitle, qText, pickRadioCallBack, qChoices);\n    //----------------------------------------------------------------------------------\n    //\n    async function pickRadioCallBack(selection) {\n        jez.log(\"pickRadioCallBack(selection)\", selection)\n        let effect = \"\"\n        jez.log(\"pickRadioCallBack\", selection)\n        if (!selection) return;\n        switch (selection) {\n            case \"Sleep\"  : effect = \"Unconscious\"; break;\n            case \"Panic\"  : effect = \"Frightened\";  break;\n            case \"Sicken\" : effect = \"Poisoned\";    break;\n        }\n        checkTokenSave(effect)\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n}\n/***************************************************************************************************\n * check the save \n ***************************************************************************************************/\nasync function checkTokenSave(selectedEffect) {\n    const DAEItem = LAST_ARG.efData.flags.dae.itemData\n    let tToken = null\n    let tactor;\n    if (LAST_ARG.tokenId) tactor = canvas.tokens.get(LAST_ARG.tokenId).actor;\n    else tactor = game.actors.get(LAST_ARG.actorId);\n    jez.log(\"canvas.tokens.get(LAST_ARG.tokenId)\", canvas.tokens.get(LAST_ARG.tokenId))\n    jez.log(\"game.actors.get(LAST_ARG.actorId)\", game.actors.get(LAST_ARG.actorId))\n    //------------------------------------------------------------------------------------------\n    // Check the target count, should be only one.\n    //\n    let count = 0;\n    for (tToken of game.user.targets) jez.log(`${++count} ${tToken.name}`)\n    if (count !== 1) {\n        msg = `Need to target exactly one target, ${count} were selected.`\n        ui.notifications.warn(msg)\n        jez.log(msg)\n        eachEyebiteDialog() // Call dialog function again until user gets it right.\n        return (false);  \n    }\n    //------------------------------------------------------------------------------------------\n    // If the target is immune, post message and quit\n    //\n    if (await isImmune(tToken)) {\n        msg = `<b>${tToken.name}</b> has recently resisted <b>${aToken.name}'s</b> eyebite and \n            has short term immunity to its effects.`\n        jez.postMessage({color:\"dodgerblue\", fSize:14, icon:IMMUNE_ICON, \n            msg:msg, title:`${tToken.name} has immunity`, token:tToken})\n        return;\n    }\n    //------------------------------------------------------------------------------------------\n    // Perform save, apply condition on failure\n    //\n    jez.log(`Targeted ${tToken}.name`, tToken)\n    const flavor = `${CONFIG.DND5E.abilities[\"wis\"]} DC${spellDC} ${DAEItem?.name || \"\"}`;\n    let saveRoll = (await tToken.actor.rollAbilitySave(\"wis\", { flavor })).total;\n    if (saveRoll < spellDC) {\n        //ChatMessage.create({ content: `${tToken.name} failed the save with a ${saveRoll}` });\n        await CUBControl.execute(\"apply\", selectedEffect, tToken);\n        msg = `<b>${tToken.name}</b> failed save (with a ${saveRoll}) and is subject to \n            <b>${aToken.name}</b>'s eyebite effect.`\n        jez.postMessage({color:\"dodgerblue\", fSize:14, icon:EYEBITE_ICON, \n            msg:msg, title:`${tToken.name} fails save`, token:tToken})\n    }\n    else {\n        //ChatMessage.create({ content: `${tToken.name} passed the save with a ${saveRoll}` });\n        applyImmunity(tToken)\n        msg = `<b>${tToken.name}</b> made save (with a ${saveRoll}) and has temporary immunity to  \n            <b>${aToken.name}</b>'s eyebite effects.`\n        jez.postMessage({color:\"dodgerblue\", fSize:14, icon:IMMUNE_ICON, \n            msg:msg, title:`${tToken.name} makes save`, token:tToken})\n        return;\n    }\n// COOL-THING: Modify existing effect\n    //------------------------------------------------------------------------------------------\n    // If we're dealing with \"Sickened\" (poison), modify the effect to include a Midi-qol \n    // overtime element that will perform a wisdom save at the end of the target's turn.\n    //\n    jez.log(\"Set specific settings for selectedEffect\", selectedEffect)\n    if (selectedEffect === \"Poisoned\") {\n        jez.log(\"Need to update the effect to include a save overtime\")\n        //----------------------------------------------------------------------------------\n        // Seach the token to find the just added effect\n        //\n        await jez.wait(100)\n        let effect = await tToken.actor.effects.find(i => i.data.label === \"selectedEffect\");\n        //----------------------------------------------------------------------------------\n        // Define the desired modification to existing effect.\n        //\n        //    https://gitlab.com/tposney/midi-qol#flagsmidi-qolovertime-overtime-effects\n        //\n        let overTimeVal = `turn=end,label=${selectedEffect},saveDC=${spellDC},saveAbility=wis,saveRemove=true,saveMagic=true,rollType=save`\n        effect.data.changes.push({ key: `flags.midi-qol.OverTime`, mode: OVERRIDE, value: overTimeVal, priority: 20 })\n        jez.log(`effect.data.changes 2`, effect.data.changes)\n        //----------------------------------------------------------------------------------\n        // Apply the modification to existing effect\n        //\n        const result = await effect.update({ 'changes': effect.data.changes });\n        if (result) jez.log(`Active Effect ${selectedEffect} updated!`, result);\n        return (true)\n    }\n    //------------------------------------------------------------------------------------------\n    // If we're dealing with \"Panicked\" (Frightened), modify the effect to include a Midi-qol \n    // overtime that will run a world macro that can check distance and LoS for possible removal.\n    //\n    if (selectedEffect = \"Frightened\") {\n        //----------------------------------------------------------------------------------\n        // Seach the token to find the just added effect\n        //\n        await jez.wait(100)\n        let effect = await tToken.actor.effects.find(i => i.data.label === selectedEffect);\n        //----------------------------------------------------------------------------------\n        // Define the desired modification to existing effect.\n        //\n        //    https://gitlab.com/tposney/midi-qol#flagsmidi-qolovertime-overtime-effects\n        //\n        let overTimeVal = `turn=end,label=${selectedEffect},macro=eyebite_frightened_helper`\n        effect.data.changes.push({ key: `flags.midi-qol.OverTime`, mode: OVERRIDE, value: overTimeVal, priority: 20 })\n        //----------------------------------------------------------------------------------\n        // Apply the modification to existing effect\n        //\n        const result = await effect.update({ 'changes': effect.data.changes });\n        if (result) jez.log(`Active Effect 1 ${selectedEffect} updated!`, result);\n        await jez.wait(1000)\n        const result2 = await effect.data.update({ 'origin': aToken.id });\n        if (result2) jez.log(`Active Effect 2 ${selectedEffect} updated!`, result2);\n        return (true)\n    }\n}\n/***************************************************************************************************\n * Apply Immunity to a token that made its saving throw.\n * \n * Rather than making the immunity specific to this instance of eyebite, I will make the immunity \n * specific to the caster and last for 10 rounds, 1 minute.\n ***************************************************************************************************/\n async function applyImmunity(token1) {\n    const FUNCNAME = \"applyImmunity(token1)\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let immuneEffect = [{\n        label: IMMUNE_COND,\n        icon: IMMUNE_ICON,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        flags: { dae: { itemData: aItem, specialDuration: [\"newDay\", \"longRest\", \"shortRest\"] } },\n        duration: { rounds: 10, startRound: GAME_RND, seconds: 60, startTime: game.time.worldTime }, \n        changes: [\n            { key: `flags.gm-notes.notes`, mode: CUSTOM, value: \"Immune to Eyebite from this source\", priority: 20 },\n        ]\n    }]\n    await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:token1.actor.uuid, effects: immuneEffect });\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Check for immunity effect on passed token. Return boolean (true = immune)\n ***************************************************************************************************/\n async function isImmune(token1) {\n    const FUNCNAME = \"isImmune(token1)\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let rtn = false\n    jez.log(\"token1.actor.effects\", token1.actor.effects)\n    let immuneEffect = await token1.actor.effects.find(i => i.data.label === IMMUNE_COND);\n    jez.log(\"immuneEffect\",immuneEffect)\n    if (immuneEffect) rtn = true\n    jez.log(\"Immune Effect Found?\", rtn)\n    jez.log(`-------------- Finishing --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return(rtn)\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Compendium.Dynamic-Effects-SRD.DAE SRD Spells.kBzkcCyByTZsnYPD"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "autoanimations": {
      "killAnim": false,
      "options": {
        "ammo": false,
        "overrideAuto": false
      },
      "override": true,
      "allSounds": {
        "item": {
          "enableAudio": false
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}