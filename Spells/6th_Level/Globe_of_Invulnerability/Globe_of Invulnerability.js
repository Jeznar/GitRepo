const MACRONAME = "Globe_of_Invulnerability.js"
/*****************************************************************************************
 * Run an appropriate VFX and a RuneVFX on the caster
 * 
 * 04/11/22 0.1 Creation
 *****************************************************************************************/
const MACRO = MACRONAME.split(".")[0]     // Trim of the version number and extension
jez.log(`============== Starting === ${MACRONAME} =================`);
for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);
const LAST_ARG = args[args.length - 1];
let aActor;         // Acting actor, creature that invoked the macro
if (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor;
else aActor = game.actors.get(LAST_ARG.actorId);
let aToken;         // Acting token, token for creature that invoked the macro
if (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);
else aToken = game.actors.get(LAST_ARG.tokenId);
let aItem;          // Active Item information, item invoking this macro
if (args[0]?.item) aItem = args[0]?.item;
else aItem = LAST_ARG.efData?.flags?.dae?.itemData;
let msg = "";
//---------------------------------------------------------------------------------------
// See https://gitlab.com/tposney/dae#lastarg for info on what is included in lastArg
//
const lastArg = args[args.length - 1];
if (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);
if (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;
const EFFECT_NAME = aItem.name || MACRO || "Minor_Globe_of_Invulnerability";
const VFX_INTRO = "jb2a.shield.02.intro.purple"
const VFX_LOOP = "jb2a.shield.02.loop.purple";
const VFX_OUTRO = "jb2a.shield.02.outro_explode.purple";
const VFX_NAME = `${MACRO}-${aToken.name}`
const VFX_SCALE = 1.95
const VFX_OPACITY = 0.7
//---------------------------------------------------------------------------------------
// Do something Useful
//
if (args[0] === "on") doOn();          		    // DAE Application
if (args[0] === "off") doOff();        			// DAE removal
if (args[0]?.tag === "OnUse") await doOnUse();          // Midi ItemMacro On Use
/***************************************************************************************
 *    END_OF_MAIN_MACRO_BODY
 *                                END_OF_MAIN_MACRO_BODY
 *                                                             END_OF_MAIN_MACRO_BODY
 ***************************************************************************************
 * Post results to the chat card
 ***************************************************************************************/
function postResults(msg) {
    jez.log(msg);
    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);
    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: "saves" });
}
/***************************************************************************************************
 * Perform the code that runs when this macro is invoked as an ItemMacro "OnUse"
 ***************************************************************************************************/
 async function doOnUse() {
    jez.runRuneVFX(aToken, jez.getSpellSchool(aItem), "purple")
    msg = `An immobile, faintly shimmering barrier springs into existence. Any spell of 5th level or 
    lower cast from outside the barrier can't affect creatures or objects within it...`
    postResults(msg)
    return (true);
}
/***************************************************************************************
 * Perform the steps that runs when this macro is executed by DAE to add to target
 ***************************************************************************************/
async function doOn() {

    await jez.wait(250)
    jez.log("---------------------------------")
    jez.log("aToken.center >>>>", aToken.center)
    jez.log("---------------------------------")
    await DAE.unsetFlag(aToken.actor, MACRONAME);
    await DAE.setFlag(aToken.actor, MACRONAME, aToken.center);

    new Sequence()
    .effect()
        .file(VFX_INTRO)
        .opacity(VFX_OPACITY)
        //.attachTo(aToken)
        .atLocation(aToken)
        .scale(VFX_SCALE)
        .waitUntilFinished(-500) // Negative wait time (ms) clips the effect to avoid fadeout
    .effect()
        .file(VFX_LOOP)
        //.attachTo(aToken)
        .atLocation(aToken)
        .opacity(VFX_OPACITY)
        .scale(VFX_SCALE)
        //.belowTokens()
        .persist()
        .name(VFX_NAME)             // Give the effect a uniqueish name
        .fadeIn(500)                // Fade in for specified time in milliseconds
        //.fadeOut(500)               // Fade out for specified time in milliseconds
        .extraEndDuration(800)      // Time padding on exit to connect to Outro effect
    .play()
    return;
}
/***************************************************************************************
 * Perform the code that runs when this macro is removed by DAE, set Off
 ***************************************************************************************/
async function doOff() {
Sequencer.EffectManager.endEffects({ name: VFX_NAME });

let center = await DAE.getFlag(aToken.actor, MACRONAME, aToken.center);
await DAE.unsetFlag(aToken.actor, MACRONAME);
jez.log("---------------------------------")
jez.log("center >>>>>>>>>>", center)
jez.log("---------------------------------")

    new Sequence()
    .effect()
        .file(VFX_OUTRO)
        .opacity(VFX_OPACITY)
        .scale(VFX_SCALE)
        //.attachTo(aToken)
        .atLocation(center)
    .play()
    return;
}
