{
  "name": "Ice Storm",
  "type": "spell",
  "img": "icons/magic/water/projectiles-ice-faceted-shard-salvo-blue.webp",
  "data": {
    "description": {
      "value": "<p>A hail of rock-hard ice pounds to the ground in a 20-foot-radius, 40-foot-high cylinder centered on a point within range. Each creature in the cylinder must make a Dexterity saving throw. A creature takes 2d8 bludgeoning damage and 4d6 cold damage on a failed save, or half as much damage on a successful one.</p><p></p><p>Hailstones turn the storm's area of effect into difficult terrain until the end of your next turn.</p><p><strong>Higher Level.</strong>When you cast this spell using a spell slot of 5th level or higher, the bludgeoning damage increases by 1d8 for each slot level above 4th.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "radius"
    },
    "range": {
      "value": 300,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "2d8",
          "bludgeoning"
        ],
        [
          "4d6",
          "cold"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "dex",
      "dc": 14,
      "scaling": "spell"
    },
    "level": 4,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A pinch of dust and a few drops of water",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Ice Storm",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Ice_Storm.0.1.js\"\n/*****************************************************************************************\n * Tasks for this macro\n *  1. Place a tile containing a VFX to mark the difficult terrain\n *  2. Spit out a message to chat describing the effect\n *  3. Remove the tile at the end of this actor's next turn\n * \n * 02/11/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\n//if (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n//if (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE removal\n// DamageBonus must return a function to the caller\n//if (args[0]?.tag === \"DamageBonus\") return(doBonusDamage());    \njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    const TILE_ID = args[1]\n    jez.log(`Delete the VFX tile`, TILE_ID)\n    await canvas.scene.deleteEmbeddedDocuments(\"Tile\", [TILE_ID])\n    jez.log(`Deleted Tile ${TILE_ID}`)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    // ---------------------------------------------------------------------------------------\n    // Place a nifty tile... \n    //\n    const VFX_FILE = \"modules/jb2a_patreon/Library/Generic/Fire/GroundCrackLoop_03_Regular_Blue_600x600.webm\"\n    const SQUARES_ACROSS = 12\n    // Obtain the ID of the template created by the calling item\n    const TEMPLATE_ID = args[0].templateId\n    // Call function to place the tile and grab the returned ID\n    let newTileId = await placeTileVFX(TEMPLATE_ID, VFX_FILE, SQUARES_ACROSS);\n    jez.log(\"newTileId\", newTileId)\n    // Grab the tile's TileDocument object from the scene\n    let fetchedTile = await canvas.scene.tiles.get(newTileId)\n    jez.log(`fetchedTile ${fetchedTile.id}`, fetchedTile)\n    // Format and result message \n    msg = `Placed Tile ID: ${fetchedTile.id}. <br>Image file used as source:<br>${fetchedTile.data.img}`;\n    jez.log(\"msg\", msg);\n    // ---------------------------------------------------------------------------------------\n    // Add an effect to the active token that expires at the end of its next turn. \n    // BUG: For some reason the special Duration code in this effect is tossing an error\n    //   times-up.js:31 times-up |  Could not process combat update  TypeError: Cannot read properties of undefined (reading 'startsWith')\n    //   at combatUpdate.js:96\n    //   at Map.filter (collection.mjs:66)\n    //   at Combat.handlePreUpdateCombat (combatUpdate.js:91)\n    //   at Combat.preUpdateCombat (combatUpdate.js:141)\n    //   at Wrapper.üéÅcall_wrapper [as call_wrapper] (libWrapper-wrapper.js:620)\n    //   at Combat.processOverTime (utils.js:794)\n    //   at async ClientDatabaseBackend._preUpdateDocumentArray (foundry.js:10203)\n    //   at async ClientDatabaseBackend._updateDocuments (foundry.js:10122)\n    //   at async Function.updateDocuments (document.mjs:373)\n    //   at async Combat.update (document.mjs:456)\n    //   at async MonksCombatTracker._onCombatControl (foundry.js:58779)\n    // I'm leaving it as I think it should be and will research the issue when I have time and better \n    // connectivity.\n    //\n    let gameRound = game.combat ? game.combat.round : 0;\n    let specialDuration = [\"turnEndSource\"]\n    let effectData = {\n        label: \"Ice Storm\",\n        icon: aItem.img,\n        origin: aToken.uuid,\n        disabled: false,\n        duration: { rounds: 2, startRound: gameRound },\n        flags: { dae: { itemData: aItem, specialDuration: specialDuration } },\n        changes: [\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: fetchedTile.id, priority: 20 },\n        ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: [effectData] });\n    msg = `The ice storm leaves behind an area of difficult terrain until the end of \n    <b>${aToken.name}</b>'s next turn.`\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Pop a VFX Tile where the template was and return the ID of the tile\n ***************************************************************************************************/\n async function placeTileVFX(TEMPLATE_ID, vfxFile, tilesAcross) {\n    // Grab the size of grid in pixels per square\n    const GRID_SIZE = canvas.scene.data.grid;   \n    // Search for the MeasuredTemplate that should have been created by the calling item\n    let template = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    // Delete the template to clean up the scene\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    // Place the tile with an embedded VFX\n    let tileProps = {  \n        x: template.center.x - GRID_SIZE*tilesAcross/2,   // X coordinate is center of the template\n        y: template.center.y - GRID_SIZE*tilesAcross/2,   // Y coordinate is center of the template\n        //img: \"modules/jb2a_patreon/Library/Generic/Fire/GroundCrackLoop_03_Regular_Orange_600x600.webm\",\n        img: vfxFile,\n        width: GRID_SIZE * tilesAcross,   // VFX should occupy 2 tiles across\n        height: GRID_SIZE * tilesAcross   // ditto\n    };\n    // let newTile = await Tile.create(tileProps)   // Depricated \n    let newTile = await game.scenes.current.createEmbeddedDocuments(\"Tile\", [tileProps]);  // FoundryVTT 9.x \n    jez.log(\"newTile\", newTile);\n    return(newTile[0].data._id);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.ZmFjMzdmMmIyZTRi"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}