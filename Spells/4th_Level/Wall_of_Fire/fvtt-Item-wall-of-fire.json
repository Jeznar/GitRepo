{
  "name": "Wall of Fire",
  "type": "spell",
  "img": "icons/magic/air/fog-gas-smoke-swirling-orange.webp",
  "data": {
    "description": {
      "value": "<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">You create a wall of fire on a solid surface within range. You can make the wall up to 60 feet long, 20 feet high, and 1 foot thick, or a ringed wall up to 20 feet in diameter, 20 feet high, and 1 foot thick. The wall is opaque and lasts for the duration.</p>\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><a style=\"box-sizing: border-box; user-select: text;\" href=\"https://www.dndbeyond.com/spells/wall-of-fire\" target=\"_blank\" rel=\"noopener\">See D&amp;D Beyond for more details.</a></p>\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">At Higher Levels.</strong>&nbsp;When you cast this spell using a spell slot of 5th level or higher, the damage increases by 1d8 for each slot level above 4th.</p>\n<hr />\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong>FoundryVTT:&nbsp;</strong>This spell will create a temporary at-will spell to inf lict damage.&nbsp; Players are responsible for noting the location of the wall and applying damage as appropriate.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 285",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 120,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 0,
      "scaling": "spell"
    },
    "level": 4,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A small piece of phosphorous",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.ZTg5MzI4NmM1Zjc4"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Wall of Fire",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Wall_of_Fire.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Macro that automates a porttion of the wall of fire spell.  Specifically it manages a temporary spell that handles the damage \n * bit of the spell.  It makes no attempt to show the spell on screen or to manage when the damage should be applied.\n * \n * This macro uses OnUse to acomplish the following:\n * 1. Manage a temporary spell to inflict damage as an at-will spell ability\n * 2. Modify concentration to remove the temp spell on expiration\n * 3. Post a message about drawing the onscreen location of the wall\n * \n * doOff is used to:\n * 1. Remove the temp spell\n * 2. Post message about spell termination.\n * \n * 07/11/23 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_LEVEL = L_ARG?.spellLevel;\nconst SPELL_NAME = `Wall of Fire`\nconst TEMPLATE_NAME = `%%${SPELL_NAME} Damage%%`\nconst ATTACK_ITEM = `${SPELL_NAME} Damage`\nconst NUM_DICE = SPELL_LEVEL + 1\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Remove any preexisting copies of the temporary item\n    //\n    await jez.deleteItems(ATTACK_ITEM, \"spell\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Slap the template item onto the actor\n    //\n    await jez.itemAddToActor(aToken, TEMPLATE_NAME)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the item's name and extract the comments from the description\n    //\n    let itemUpdate = {\n        name: ATTACK_ITEM,                 // Change to actor specific name for temp item\n    }\n    await jez.itemUpdateOnActor(aToken, TEMPLATE_NAME, itemUpdate, \"spell\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Grab the data for the new item from the actor\n    //\n    let getItem = await jez.itemFindOnActor(aToken, ATTACK_ITEM, \"spell\");\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the description field\n    //\n    let description = getItem.data.data.description.value\n    description = description.replace(/%NUMDICE%/g, `${NUM_DICE}`);         // Replace %NUMDICE%\n    description = description.replace(/%ATOKEN%/g, `${aToken.name}`);       // Replace %ATOKEN%\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build a new itemUpdate Object\n    //\n    itemUpdate = {\n        data: { \n            description: { \n                value: description \n            },\n            damage: {\n                parts: [[`${NUM_DICE}d8[fire]`,'fire']]\n            }\n        },  \n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Update the item with new information\n    //\n    await jez.itemUpdateOnActor(aToken, ATTACK_ITEM, itemUpdate, \"spell\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Modify the just applied concentation effect to call this macro so that doOff can do its thing\n    //\n    const CON_EFFECT = \"Concentrating\"\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(100)\n    let conEffect = await aToken.actor.effects.find(i => i.data.label === CON_EFFECT);\n    if (TL > 1) jez.log(`${TAG} **** ${CON_EFFECT} found?`, conEffect)\n    if (!conEffect) return jez.badNews(`${CON_EFFECT} sadly not found on ${aToken.name}.`, \"error\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. \n    //    \n    conEffect.data.changes.push({key: `macro.itemMacro`, mode: jez.ADD, value:`Data field`, priority: 20})\n    if (TL > 1) jez.log(`${TAG} conEffect.data.changes`, conEffect.data.changes)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the modification to concentrating effect\n    //\n    const result = await conEffect.update({ 'changes': conEffect.data.changes });\n    if (result && TL > 1) jez.log(`${TAG} Active Effect ${CON_EFFECT} updated!`, result);\n    //-----------------------------------------------------------------------------------------------\n    // Update the convenientDescription of the Concentrating effect to describe the spell\n    //\n    const CE_DESC = `Concentrating on Wall of Fire`\n    await jez.setCEDesc(aActor, \"Concentrating\", CE_DESC, { traceLvl: TL });\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    msg = `<b>${aToken.name}</b> has cast wall of fire at level ${SPELL_LEVEL}.  Players need to annotate the map appropriately.<br>\n    <br>Casting actor needs to use its new, At-Will spell <i${ATTACK_ITEM}<\\i> to inflict damage at appropriate times.`\n    postResults(msg)\n    if (TL > 0) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Remove any preexisting copies of the temporary item\n    //\n    await jez.deleteItems(ATTACK_ITEM, \"spell\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    msg = `<b>${aToken.name}</b>'s ${SPELL_NAME} has ended.  Players need to update map annotation appropriatly.`\n    let title = `${SPELL_NAME} ended`\n    jez.postMessage({color: jez.randomDarkColor(), fSize: 14, icon: aToken.data.img, msg: msg, title: title, token: aToken})\n    //-------------------------------------------------------------------------------------------------------------------------------\n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}