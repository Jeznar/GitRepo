{
  "name": "Compulsion",
  "type": "spell",
  "img": "Icons_JGB/Spells/4th_Level/Compulsion.png",
  "data": {
    "description": {
      "value": "<p>Creatures of your choice that you can see within range and that can hear you must make a Wisdom saving throw. A target automatically succeeds on this saving throw if it can't be charmed. On a failed save, a target is affected by this spell. Until the spell ends, you can use a bonus action on each of your turns to designate a direction that is in the same plain as you, e.g. North or South West.</p>\n<p>See: <a href=\"https://www.dndbeyond.com/spells/compulsion\" target=\"_blank\" rel=\"noopener\">D&amp;D Beyond Description</a> for spell details.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This is pretty heavily automated.  No need to target anything before casting, it will offer a selection dialog to pick targets.  Each turn it will pop a dialog and ask if the caster wants to issue a directive on where to move.</p>",
      "chat": "<p>Creatures of your choice that you can see within range and that can hear you must make a Wisdom saving throw. A target automatically succeeds on this saving throw if it can't be charmed. On a failed save, a target is affected by this spell. Until the spell ends, you can use a bonus action on each of your turns to designate a direction that is horizontal to you.</p>\n<p>Each affected target must use as much of its movement as possible to move in that direction on its next turn. It can take its action before it moves. After moving in this way, it can make another Wisdom saving throw to try to end the effect.</p>\n<p>A target isn't compelled to move into an obviously deadly hazard, such as a fire or pit, but it will provoke opportunity attacks to move in the designated direction.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 224",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 99,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 4,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 136249,
      "definitionId": 2036,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 224,
          "sourceType": 1
        }
      ],
      "tags": [
        "Control"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_5bhigw4ca0a"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.kLnBHBnC9WEdCVQX"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "forceCEOn": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Compulsion",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Compulsion.0.3.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * This is a complex macro to implement Compulsion.\n * \n * 07/22/22 0.1 Creation of Macro\n * 08/29/22 0.3 Fix for case where no targets are selected\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim of the version number and extension\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst VFX_FILE = 'Icons_JGB/Spells/4th_Level/Compulsion.png'        // Move in random direction\nconst DIRECTIONS = [\n    \"East (Right)\", \"South East (Down/Right)\", \"South (Down)\", \"South West (Down/Left)\",\n    \"West (Left)\", \"North West (Up/Left)\", \"North (Up)\", \"North East (Up/Right)\"];\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"each\") doEach();\t\t\t\t\t        // DAE everyround\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff();                   // DAE removal\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    //-----------------------------------------------------------------------------------------------\n    // Do different steps for the origin and target actor(s)\n    //\n    if (LAST_ARG.origin.includes(LAST_ARG.actorUuid)) { // doEach running on originating actor\n        doEachOrigin();  // Origin Actor\n        return\n    }\n    doEachTarget();      // Target Actor\n    return;\n}\n/***********************************************************************************************\n* Do the every turn operations for the ORIGIN of this macro\n************************************************************************************************/\nasync function doEachOrigin() {\n    const FUNCNAME = \"doEachOrigin()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    if (TL > 1) jez.trace(`${MACRO} ${FNAME} | Executing on originating actor`);\n    //------------------------------------------------------------------------------------------\n    // Prepare for and pop a dialog asking the originator what direction his/her minions should \n    // move\n    //\n    const Q_TITLE = `What Direction for ${aToken.name}'s Minions?`\n    const Q_TEXT = `If you want to use your bonus action this round on this spell, pick a \n    direction you will order your compulsion victims to move and click the OK button.  Otherwise, \n    click the Cancel button to save Bonus action for something else.`\n    jez.pickRadioListArray(Q_TITLE, Q_TEXT, dirCallBack, DIRECTIONS);\n    /********************************************************************************************\n     * Callback function to handle menu choice.\n     *******************************************************************************************/\n    async function dirCallBack(choice) {\n        const FUNCNAME = \"dirCallBack(choice)\"\n        const FNAME = FUNCNAME.split(\"(\")[0]\n        if (TL > 0) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n        if (TL > 1) jez.trace(`${MACRO} ${FNAME} | Menu choice`, choice);\n        if (!choice) {\n            if (TL > 1) jez.trace(\"${MACRO} ${FNAME} | Falsy choice made\", choice)\n            await DAE.unsetFlag(aToken.actor, MACRO);\n            // doEachOrigin()\n            return null;\n        }\n        if (TL > 1) jez.trace(`${MACRO} ${FNAME} | Choice made: ${choice}`)\n        // Generate a chat bubble on the scene, using a World script!\n        msg = `I do declare, my minions must move <b>${choice}</b>!`\n        bubbleForAll(aToken.id, msg, true, true)\n        msg = msg + `<br><br>I spent my BONUS ACTION to issue that command.`\n        jez.postMessage({\n            color: jez.randomDarkColor(), fSize: 14, icon: aToken.data.img,\n            msg: msg, title: `${aToken.name} says...`, token: aToken\n        })\n        //-----------------------------------------------------------------------------------------\n        // Display flag object for our actor\n        //\n        if (TL > 3) jez.trace(`${aToken.name} current DAE flagObj content`, aToken.actor.data.flags.dae)\n        //-----------------------------------------------------------------------------------------\n        // Clear any prexisting value of the flag set for this macro\n        //\n        await DAE.unsetFlag(aToken.actor, MACRO);\n        //-----------------------------------------------------------------------------------------\n        // Display the value of the flag afetr the clearing\n        //\n        let currentValue = await DAE.getFlag(aToken.actor, MACRO);\n        if (TL > 4) jez.trace(\"Value of flag after clear\", currentValue)\n        //-----------------------------------------------------------------------------------------\n        // Add the direction choice to the flag\n        //\n        await DAE.setFlag(aToken.actor, MACRO, choice);\n        //-----------------------------------------------------------------------------------------\n        // Display the value of the flag\n        //\n        currentValue = await DAE.getFlag(aToken.actor, MACRO);\n        if (TL > 3) jez.trace(`Value of flag after adding ${choice}`, currentValue)\n    }\n}\n/************************************************************************************************\n// Do the every turn operations for a TARGET of this macro\n************************************************************************************************/\nasync function doEachTarget() {\n    const FUNCNAME = \"doEachTarget()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    //-----------------------------------------------------------------------------------------------\n    // Extract actor UUID from LAST_ARG.origin. UUID should look like one of the following:\n    //\n    let oToken = await jez.getTokenObjFromUuid(LAST_ARG.origin, { traceLvl: TL })\n    if (!oToken) return\n    //-----------------------------------------------------------------------------------------------\n    // Obtain the dirction of movement from the flag set within the originator\n    // oToken is likely a PrototypeTokenData in which case actor5e is hiding under document\n    //\n    let actorObj = null\n    if (oToken?.constructor.name === \"Token5e\") actorObj = oToken.actor\n    else if (oToken?.constructor.name === \"PrototypeTokenData\") actorObj = oToken.document\n    else return jez.badNews(`Failed to find actor for ${oToken.name}`, \"e\")\n    let direction = await DAE.getFlag(actorObj, MACRO);\n    if (!direction) {\n        return\n    }\n    if (TL > 2) jez.trace(\"Value of flag obtained from oToken.actor\", direction)\n    //-----------------------------------------------------------------------------------------------\n    // Call out direction of movement.\n    //\n    msg = `I feel compelled to move <b>${direction}</b!`\n    bubbleForAll(aToken.id, msg, true, true)\n    msg += \" But I can use my action normally.\"\n    jez.postMessage({\n        color: jez.randomDarkColor(), fSize: 14, icon: aToken.data.img,\n        msg: msg, title: `${aToken.name} says...`, token: aToken\n    })\n    //-----------------------------------------------------------------------------------------------\n    // Run the visual effects (VFX) on the target\n    //\n    runVFX(VFX_FILE)\n    //-----------------------------------------------------------------------------------------------\n    // Done\n    //\n    if (TL > 1) jez.trace(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n    return true;\n    //-----------------------------------------------------------------------------------------------\n    // Run simple video on the token with the attitude change\n    //\n    function runVFX(fileName) {\n        new Sequence()\n            .effect()\n            .file(fileName)\n            .atLocation(aToken)\n            .center()\n            .scaleToObject(1)\n            .opacity(1)\n            .fadeIn(1500)\n            .duration(7000)\n            .fadeOut(1500)\n            .play()\n    }\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    await jez.wait(100)\n    const RANGE = jez.getRange(aItem, [\"\", \"ft\", \"any\"]) ?? 30\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    await pickProcessTargets(RANGE, {traceLvl: TL})\n    if (TL > 1) jez.trace(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n    return true;\n}\n/***************************************************************************************************\n * Check for targets that can hear and are in range. Pop a dialog to pick actual targets. Do saves\n * apply compulsion effect to those who failed. \n * \n *  1. Build list of all tokens in range that are not deafened and have unblocked LoS\n *  2. Build and pop dialog to pick targets, passing control onto callback function.\n *  3. Setup variables and handle cancel or X choices from the dialog\n *  4. Handle a cancel or X button from previous dialog, cancel loops back to calling function\n *  5. Build an array of objects representing the selected targets of this spell\n *  6. Process the tokens that might be affected, rolling saves and making lists of results\n *  7. Apply our CE Compulsion effect modified to include an overTime element to failues\n *  8. Craft results message with summary of made and failed saves and post it. \n *  9. Modify the (hopefully) existant concentration effect on the caster.\n * 10. Run the each turn function for the initial time on the caster.\n ***************************************************************************************************/\nasync function pickProcessTargets(RANGE=30, optionObj = {}) {\n    const FUNCNAME = \"pickProcessTargets(RANGE=30, optionObj = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TL = optionObj?.traceLvl ?? 0\n    if (TL === 1) jez.trace(`--- Called --- ${FNAME} ---`);\n    if (TL > 1) jez.trace(`--- Called --- ${FUNCNAME} ---`);\n    let potTargNames = []\n    //-------------------------------------------------------------------------------------------------------\n    // Step 1. Build list of all tokens in range that are not deafened and have unblocked LoS\n    //\n    let options = {\n        chkHear: true,          // Boolean (false is default)\n        chkDeaf: true,          // Boolean (false is default)\n        traceLvl: TL,           // Trace level, integer typically 0 to 5\n    }\n    let potTargs = await jez.inRangeTargets(aToken, RANGE, options);\n    if (TL > 0) jez.trace(`${MACRO} ${FNAME} | potTargs`, potTargs)\n    if (!potTargs) return jez.badNews(`No effectable targets in range`, \"i\")  \n    for (let i = 0; i < potTargs.length; i++) {\n        if (TL > 0) jez.trace(`${MACRO} ${FNAME} | ${i+1}) ${potTargs[i].name} is a potential victim.`)\n        potTargNames.push(`${potTargs[i].name} {${potTargs[i].id}}`)\n    }\n    //-------------------------------------------------------------------------------------------------------\n    // Step 2. Build and pop dialog to pick targets, passing control onto callback function.\n    //\n    const Q_TITLE = `Targets for ${aToken.name}'s Spell?`\n    const Q_TEXT = `Pick targets that ${aToken.name} wants to force to roll saves or be affected by Spell.`\n    await jez.pickCheckListArray(Q_TITLE, Q_TEXT, checkCallBack, potTargNames.sort());\n    //-------------------------------------------------------------------------------------------------------\n    // Step 3. Setup variables \n    //\n    async function checkCallBack(selection) {\n        const FUNCNAME = \"checkCallBack(selection)\";\n        const FNAME = FUNCNAME.split(\"(\")[0]\n        const TL = optionObj?.traceLvl ?? 0\n        const SAVE_TYPE = \"wis\"\n        const SAVE_DC = aActor.data.data.attributes.spelldc;\n        let failSaves = []  // Array to contain the tokens that failed their saving throws\n        let madeSaves = []  // Array to contain the tokens that made their saving throws\n        let madeNames = \"\"  // String with concatination of names that made saves\n        let failNames = \"\"  // String with concatination of names that fail saves\n        if (TL === 1) jez.trace(`--- Called --- ${FNAME} ---`);\n        if (TL > 1) jez.trace(`--- Called --- ${FUNCNAME} ---`, \"Selection\", selection);\n        //---------------------------------------------------------------------------------------------------\n        // Step 4. Handle a cancel or X button from previous dialog\n        //\n        msg = `pickCheckCallBack: ${selection.length} actor(s) selected in the dialog`\n        if (TL > 3) jez.trace(msg)\n        if (selection === null) return;     // Cancel button was selected on the preceding dialog\n        if (selection.length === 0) {       // Nothing was selected\n            if (TL > 0) jez.trace(`${MACRO} ${FNAME} | No selection passed to pickCheckCallBack(selection), trying again.`)\n            // itemCallBack(itemSelected)\t\t// itemSelected is a global that is passed to preceding func\n            pickProcessTargets(RANGE, optionObj)\n            return;\n        }\n        //--------------------------------------------------------------------------------------------\n        // Step 5. Build array of objects representing the selected targets of this spell from dialog\n        //\n        let tObjs = []                                  // Target Objects array\n        for (let i = 0; i < selection.length; i++) {\n            const TOKEN_ARRAY = selection[i].split(\"{\") // Split the selection of braces \"{\"\n            if (TOKEN_ARRAY.length < 2) return jez.badNews(`${MACRO} ${FNAME} | Bad parse of ${selection[i]}`, \"e\")\n            const TOKEN_ID = TOKEN_ARRAY[TOKEN_ARRAY.length - 1].slice(0, -1);  // Clip trailing }\n            tObjs.push(canvas.tokens.placeables.find(ef => ef.id === TOKEN_ID)) // Add object to array\n        }\n        //---------------------------------------------------------------------------------------------\n        // Step 6. Process the tokens that might be affected, rolling saves and making lists of results\n        //         Also, run a RuneVFX on each targeted token, saves get shorter duration.\n        //\n        const COLOR = jez.getRandomRuneColor()\n        const SCHOOL = jez.getSpellSchool(aItem)      \n        for (let i = 0; i < tObjs.length; i++) {\n            let save = (await tObjs[i].actor.rollAbilitySave(SAVE_TYPE, { chatMessage: false, fastforward: true }));\n            if (save.total < SAVE_DC) {\n                jez.runRuneVFX(tObjs[i], SCHOOL, COLOR)\n                if (TL > 2) jez.trace(`${MACRO} ${FNAME} | ${tObjs[i].name} failed: ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n                failSaves.push(tObjs[i])\n                failNames += `<b>${tObjs[i].name}</b>: ${save.total} (${save._formula})<br>`\n            } else {\n                runRuneVFX(tObjs[i], SCHOOL, COLOR)\n                if (TL > 2) jez.trace(`${MACRO} ${FNAME} | ${tObjs[i].name} saved: ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n                madeSaves.push(tObjs[i])\n                madeNames += `<b>${tObjs[i].name}</b>: ${save.total} (${save._formula})<br>`\n            }\n        }\n        if (TL > 3) jez.trace(`${FNAME} | Failed Saves ===>`, failSaves)\n        //---------------------------------------------------------------------------------------------\n        // Step 7. Apply our CE Compulsion effect modified to include an overTime element to failues\n        //\n        let effectUuids = \"\"\n        let effectData = game.dfreds.effectInterface.findEffectByName(\"Compulsion\").convertToObject();\n        if (TL > 3) jez.trace(`${FNAME} | effectData >`, effectData)\n        let overTimeVal = `turn=end, saveAbility=${SAVE_TYPE}, saveDC=${SAVE_DC},label=\"Save vs Compulsion\"`\n        effectData.changes.push({\n            key: `flags.midi-qol.OverTime`, mode: jez.OVERRIDE, value: overTimeVal,\n            priority: 20\n        })\n        if (TL > 3) jez.trace(`${FNAME} | updated ===>`, effectData)\n        for (let i = 0; i < failSaves.length; i++) {\n            if (TL > 2) jez.trace(`${FNAME} | Apply affect to ${failSaves[i].name}`)\n            await game.dfreds.effectInterface.addEffectWith({\n                effectData: effectData,\n                uuid: failSaves[i].actor.uuid, origin: aItem.uuid\n            });\n            compulsionEffect = failSaves[i].actor.effects.find(ef => ef.data.label === \"Compulsion\")\n            if (!compulsionEffect) return badNews(`Compulsion effect didn't stick...`, \"e\")\n            // Strip off the last part of the UUID: <Goodstuff>.ActiveEffect.3F8dtbZ6JqNZ21av\n            let xyz = compulsionEffect.uuid.slice(0, -30) // Chop off .ActiveEffect.3F8dtbZ6JqNZ21av\n            effectUuids = effectUuids + xyz + ' '\n        }\n        if (TL > 2) jez.trace(`${FNAME} | effectUuids >${effectUuids}<`)\n        //---------------------------------------------------------------------------------------------\n        // Step 8. Craft results message with summary of made and failed saves and post it.\n        //\n        let chatMessage = await game.messages.get(args[args.length - 1].itemCardId);\n        await jez.wait(100)\n        if (madeNames) {\n            msg = `<b><u>Successful ${SAVE_TYPE.toUpperCase()} Save</u></b> vs DC${SAVE_DC}<br>${madeNames}`\n            await jez.wait(100)\n            jez.addMessage(chatMessage, { color: \"darkgreen\", fSize: 14, msg: msg, tag: \"damage\" })\n        }\n        if (failNames) {\n            msg = `<b><u>Failed ${SAVE_TYPE.toUpperCase()} Save</u></b> vs DC${SAVE_DC}<br>${failNames}`\n            await jez.wait(100)\n            jez.addMessage(chatMessage, { color: \"darkred\", fSize: 14, msg: msg, tag: \"damage\" })\n        }\n        //---------------------------------------------------------------------------------------------\n        // Step 9. Modify the (hopefully) existant concentration effect on the caster.\n        //\n        await modConcentratingEffect(aToken, effectUuids, { traceLvl: TL })\n        //---------------------------------------------------------------------------------------------\n        // Step 10. Run the each turn function for the initiial time on the caster.\n        //\n        await doEachOrigin()\n    }\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call this macro as an ItemMacro that will run each turn.\n ***************************************************************************************************/\nasync function modConcentratingEffect(token5e, effectUuids, optionObj = {}) {\n    const FUNCNAME = \"modConcentratingEffect(token5e, effectUuids, optionObj = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TL = optionObj?.traceLvl ?? 0\n    if (TL === 1) jez.trace(`--- Called --- ${FNAME} ---`);\n    if (TL > 1) jez.trace(`--- Called --- ${FUNCNAME} ---`, \"token5e\", token5e, \"effectUuids\", \n        effectUuids, \"optionObj\", optionObj);\n    const EFFECT = \"Concentrating\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the token to find the just added concentrating effect\n    //\n    await jez.wait(100)\n    let effect = await token5e.actor.effects.find(i => i.data.label === EFFECT);\n    if (TL > 1) jez.trace(`${FNAME} | ${EFFECT}`, effect);\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to the changes data\n    //  \n    effect.data.flags.dae = {\n        itemData: aItem,\n        macroRepeat: \"startEveryTurn\",\n        stackable: false\n    }\n    await effect.data.update({ 'flags': effect.data.flags });\n    await jez.wait(50)\n    effect.data.changes.push({ key: `macro.itemMacro`, mode: jez.CUSTOM, value: effectUuids, priority: 20 })\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to add changes infoto existing effect\n    //\n    if (TL > 1) jez.trace(`${FNAME} | effect.data`, effect.data)\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result && TL>1) jez.trace(`${FNAME} | Active Effect ${EFFECT} updated!`, result);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set Off. Treating the origin and \n * targeted tokens differently.\n * \n * Origin: Clear the applied to all targets who still have it and clear flag\n * Target: Do nothing, just return (this will be called since we need the each for targets)\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL === 1) jez.trace(`--- Called --- ${MACRO} --- ${FNAME} ---`);\n    if (TL > 1) jez.trace(`--- Called --- ${MACRO} ${FUNCNAME} ---`);\n    //-----------------------------------------------------------------------------------------------\n    // Do different steps for the origin and target actor(s)\n    //\n    if (LAST_ARG.origin.includes(LAST_ARG.actorUuid)) { // doEach running on originating actor\n        //-------------------------------------------------------------------------------------------\n        // Clear any remaining effects on targeted tokens\n        //\n        for (let i = 1; i <= args.length -2; i++) {\n            if (TL>1) jez.trace(`${MACRO} ${FNAME} | Clearing effect from target #${i}`, args[i] );\n            await jez.wait(100)\n            jezcon.remove(\"Compulsion\", args[i], {traceLvl: TL});\n        }\n        //-------------------------------------------------------------------------------------------\n        // Clear prexisting value of the flag set for this macro\n        //\n        await DAE.unsetFlag(aToken.actor, MACRO);\n        return\n    }\n    return jez.trace(`${MACRO} ${FNAME} | doOff invoked for ${aToken.name} doing nothing`)\n}\n/***************************************************************************************************\n * Run a 2 part spell rune VFX on indicated token  with indicated rune, Color, scale, and opacity\n * may be optionally specified.\n * \n * If called with an array of target tokens, it will recursively apply the VFX to each token \n ***************************************************************************************************/\n async function runRuneVFX(target, school, color, scale, opacity) {\n    school = school || \"enchantment\"            // default school is enchantment \\_(ツ)_/\n    color = color || jez.getRandomRuneColor()   // If color not provided get a random one\n    scale = scale || 1.2                        // If scale not provided use 1.0\n    opacity = opacity || 1.0                    // If opacity not provided use 1.0\n    // jez.log(\"runRuneVFX(target, school, color, scale, opacity)\",\"target\",target,\"school\",school,\"scale\",scale,\"opacity\",opacity)\n    if (Array.isArray(target)) {                // If function called with array, do recursive calls\n        for (let i = 0; i < target.length; i++) jez.runRuneVFX(target[i], school, color, scale, opacity);\n        return (true)                           // Stop this invocation after recursive calls\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Build names of video files needed\n    // \n    const INTRO = `jb2a.magic_signs.rune.${school}.intro.${color}`\n    const OUTRO = `jb2a.magic_signs.rune.${school}.outro.${color}`\n    //-----------------------------------------------------------------------------------------------\n    // Play the VFX\n    // \n    new Sequence()\n        .effect()\n        .file(INTRO)\n        .atLocation(target)\n        .scaleToObject(scale)\n        .opacity(opacity)\n        .waitUntilFinished(-500)\n        .fadeOut(1500)\n        .effect()\n        .file(OUTRO)\n        .atLocation(target)\n        .scaleToObject(scale)\n        .opacity(opacity)\n        .fadeOut(2000)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}