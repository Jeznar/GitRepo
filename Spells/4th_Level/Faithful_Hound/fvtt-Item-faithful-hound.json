{
  "name": "Faithful Hound",
  "type": "spell",
  "img": "Tokens/Spells/4th_Level/Faithful_Hound_Token.png",
  "data": {
    "description": {
      "value": "<p>You conjure a phantom watchdog in an unoccupied space that you can see within range, where it remains for the duration, until you <strong>dismiss it as an action</strong>, or until you <strong>move more than 100 feet away </strong>from it.</p>\n<p>The hound is <strong>invisible to all creatures except you and can't be harmed</strong>. When a <strong>Small or larger creature comes within 30 feet of it without first speaking the password that you specify when you cast this spell, the hound starts barking loudly.</strong> The hound sees <strong>invisible</strong> creatures and can see into the <strong>Ethereal Plane</strong>. It ignores illusions.</p>\n<p>At the start of each of your turns, the hound attempts to <strong>bite one creature within 5 feet of it that is hostile to you</strong>. The hound's attack bonus is equal to your spellcasting ability modifier + your proficiency bonus. On a hit, it deals 4d8 piercing damage.</p>\n<hr />\n<p><strong>FoundryVTT: </strong>This spell will summon a faithful hound token to the scene.  That token will contain a scaled attack that can be used for the once per turn attack.  Triggering barking is not automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 8,
      "units": "hour"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 4,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A tiny silver whistle, a piece of bone, and a thread",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Item.MDc4ZjYxYmUxMGEy"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Faithful Hound",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Faithful_Hound.0.2.js\"\n/*****************************************************************************************\n * Summon a Faithful Hound to the current scene.  Some key points:\n * \n * - Summon with WarpGate\n * - Modify Bite ability to have correct to-hit bonus\n * - Delete summon when effect on original caster is removed (or expires)\n * \n * 02/11/22 0.1 Creation of Macro\n * 07/15/22 0.2 Suppress Tokenmold and limit range of summoning\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor;\nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst TL = 5;                               // Trace Level for this macro\n//----------------------------------------------------------------------------------\n// Setup some specific global values\n//\nconst MINION = `%Faithful Hound%`;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n    jez.log(`Checking for creature: \"${MINION}\"`)\n    let critter = game.actors.getName(MINION)\n    jez.log(\"Template Creature\", critter)\n    if (!critter) {\n        msg = `Configuration problem: <b>${MINION}</b> was not found in the actor's directory.`\n        ui.notifications.error(msg)\n        postResults(msg)\n        return (false)\n    }\n    return (true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\nfunction postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    for (let i = 1; i < args.length - 1; i++) {\n        jez.log(`  args[${i}]`, args[i]);\n        await jez.wait(250)\n        warpgate.dismiss(args[i], game.scenes.viewed.id)\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    if (!await preCheck()) return (false);\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    let houndInfo = await summonHound()\n    jez.log(\"Hound Info\", houndInfo)\n    addWatchdogEffect(houndInfo);\n    msg = `Maybe say something useful...${houndInfo}`\n    postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Summon the minion and update HP\n * \n * https://github.com/trioderegion/warpgate\n ***************************************************************************************************/\nasync function summonHound() {\n    const CAST_MOD = jez.getCastMod(aToken);\n    const PROF_MOD = jez.getProfMod(aToken);\n    const NAME = `${aToken.name}'s Faithful Hound`\n    //-----------------------------------------------------------------------------------------------\n    //\n    //\n    // Below based on: https://github.com/trioderegion/warpgate/wiki/Summon-Spiritual-Badger\n    let updates = {\n        token: { name: NAME },\n        actor: { name: NAME },\n        embedded: {\n            Item: {\n                \"Bite, Faithful Hound\": {\n                    'data.damage.parts': [[`4d8`, \"piercing\"]],\n                    'data.attackBonus': `${CAST_MOD}[mod] + ${PROF_MOD}[prof]`,    // 5[mod] + 3[prof]\n                },\n            }\n        }\n    }\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n      pre: async (template) => {\n        preEffects(template);\n        await warpgate.wait(500);\n      },\n      post: async (template, token) => {\n        postEffects(template);\n        await warpgate.wait(500);\n      }\n    };\n    //-----------------------------------------------------------------------------------------------\n    // Get and set maximum sumoning range\n    //\n    const ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\n    if (TL > 1) jez.trace(\"ALLOWED_UNITS\",ALLOWED_UNITS);\n    const MAX_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 30\n    //-----------------------------------------------------------------------------------------------\n    // Obtan location for spawn\n    //\n    let summonData = game.actors.getName(MINION)\n    if (TL > 1) jez.trace(\"summonData\",summonData);\n    let {x,y} = await jez.warpCrosshairs(aToken,MAX_RANGE,summonData.img,aItem.name,{},-1,{traceLvl:TL})\n    //-----------------------------------------------------------------------------------------------\n    // Suppress Token Mold for a wee bit\n    //\n    jez.suppressTokenMoldRenaming() \n    await jez.wait(50) \n    //-----------------------------------------------------------------------------------------------\n    // Return while executing the summon\n    //\n    // return (await warpgate.spawn  (          MINION, updates, CALLBACKS, OPTIONS));\n    return (await warpgate.spawnAt({ x, y }, MINION, updates, CALLBACKS, OPTIONS));\n\n  }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n   async function preEffects(template) {\n    const VFX_FILE = \"jb2a.explosion.07.bluewhite\"\n    new Sequence()\n      .effect()\n      .file(VFX_FILE)\n      .atLocation(template)\n      .center()\n      .scale(0.25)\n      .opacity(0.75)\n      .play()\n  }\n  /***************************************************************************************************\n   * \n   ***************************************************************************************************/\n   async function postEffects(template) {\n    const VFX_OPACITY = 1.0\n    const VFX_SCALE = 1.0\n    const VFX_FILE = \"modules/jb2a_patreon/Library/Generic/Smoke/SmokePuff01_*_Regular_Blue_400x400.webm\"\n    new Sequence()\n      .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE*.5)\n        .opacity(VFX_OPACITY*0.75)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE*.75)\n        .opacity(VFX_OPACITY*0.5)\n        .waitUntilFinished(-1000) \n    .effect()\n        .file(VFX_FILE)\n        .atLocation(template)\n        .center()\n        .scale(VFX_SCALE*1)\n        .opacity(VFX_OPACITY*0.25)\n        .waitUntilFinished(-1000) \n    .play()\n  }\n/***************************************************************************************************\n * \n ***************************************************************************************************/\n async function addWatchdogEffect(tokenIdArray) {\n    let tokenIds = \"\"\n    const EXPIRE = [\"longRest\"];\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    // Build list of token IDs seperated by spaces\n    for (let i = 0; i < tokenIdArray.length; i++) tokenIds+= `${tokenIdArray[i]} ` \n    let effectData = {\n      label: aItem.name,\n      icon: aItem.img,\n      origin: LAST_ARG.uuid,\n      disabled: false,\n      duration: { rounds: 4800, startRound: GAME_RND, seconds: 28800, startTime: game.time.worldTime },\n      flags: { dae: { macroRepeat: \"none\", specialDuration: EXPIRE } },\n      changes: [\n        { key: `macro.itemMacro`, mode: jez.ADD, value: tokenIds, priority: 20 },\n      ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });\n  }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}