{
  "name": "Black Tentacles",
  "type": "spell",
  "img": "icons/magic/nature/vines-thorned-entwined-glow-teal-purple.webp",
  "data": {
    "description": {
      "value": "<p>Squirming, ebony tentacles fill a <strong>20-foot square</strong> on ground that %TOKENNAME% can see within range. For the duration, these tentacles turn the ground in the area into difficult terrain.</p>\n<p>When a creature <strong>enters the affected area</strong> for the first time on a turn <strong>or starts its turn there</strong>, the creature must succeed on a <strong>Dexterity saving</strong> throw or take <strong>3d6 bludgeoning </strong>damage, no damage on save, and be <strong>@JournalEntry[CZWEqV2uG9aDWJnD]{Restrained}Â by the tentacles</strong> until the spell ends.</p>\n<p>A creature that starts its turn in the area and is <strong>already restrained</strong> by the tentacles<strong> takes 3d6 bludgeoning damage</strong>.</p>\n<p>A creature restrained by the tentacles <strong>can use its action to make a Strength or Dexterity check </strong>(its choice) against your spell save DC. On a success, it frees itself.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Temporary At-Will ability to be used to apply debuff on subsequent turns.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "cube"
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "3d6",
          "bludgeoning"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "dex",
      "dc": 17,
      "scaling": "spell"
    },
    "level": 4,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A piece of tentacle of an octopus or a giant squid",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "xG5lWkao9mJIUbpi",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "@attributes.spelldc @token",
          "priority": "20"
        },
        {
          "key": "macro.CUB",
          "mode": 0,
          "value": "Restrained",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.OverTime",
          "mode": 5,
          "value": "turn=start,damageRoll=3d6,damageType=bludgeoning,label=Black Tentacles Damage",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "rounds": 10
      },
      "icon": "systems/dnd5e/icons/spells/vines-eerie-3.jpg",
      "label": "Black Tentacles",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "startEveryTurn",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "macro.itemMacro",
        "macro.CUB",
        "flags.midi-qol.OverTime"
      ]
    }
  ],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Black Tentacles",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Black_Tentacles.0.5.js\"\n/*****************************************************************************************\n * Black Tentacles!\n * \n *   Squirming, ebony tentacles fill a 20-foot square on ground that you can see within \n *   range. For the duration, these tentacles turn the ground in the area into difficult \n *   terrain.\n * \n *   When a creature enters the affected area for the first time on a turn or starts its \n *   turn there, the creature must succeed on a Dexterity saving throw or take 3d6 \n *   bludgeoning damage and be restrained by the tentacles until the spell ends.\n * \n *   A creature that starts its turn in the area and is already restrained by the \n *   tentacles takes 3d6 bludgeoning damage.\n * \n *   A creature restrained by the tentacles can use its action to make a Strength or \n *   Dexterity check (its choice) against your spell save DC. On a success, it frees \n *   itself.\n * \n * 03/28/22 0.1 Creation of Macro\n * 05/03/22 0.2 Update for FoundryVTT 9.x (Tile.create)\n * 06/03/22 0.3 Fixed bug introduced by using external macro (ItemMacro fixed it)\n * 06/29/22 0.4 Fix for permission issue on game.scenes.current.createEmbeddedDocuments & \n *              canvas.scene.deleteEmbeddedDocuments\n * 07/01/22 0.5 Swap in calls to jez.tileCreate and jez.tileDelete\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlet trcLvl = 1;\njez.trc(2, trcLvl, `=== Starting === ${MACRONAME} ===`);\nfor (let i = 0; i < args.length; i++) jez.trc(3, trcLvl,`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst ITEM_NAME = \"Black Tentacles Effect\"\nconst SPEC_ITEM_NAME = `%%${ITEM_NAME}%%`  // Name as expected in Items Directory \nconst NEW_ITEM_NAME = `${aToken.name}'s ${ITEM_NAME}` // Name of item in actor's spell book\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE removal\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n async function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.log(\"##### chatMsg\",chatMsg)\n    await jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * doOff is expected to be called when concentration drops and should remove the items passed as \n * arguments.  The first will be a tile id.  The rest...???\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    const EFFECT = \"Black Tentacles Effect\" // Must match DAE effect applied by temp item\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    const TILE_ID = args[1];    // Must be a 12 character string:  chN3vMQvayMx6kWQ\n    jez.log(TILE_ID.length)\n    if (TILE_ID.length != 16) return\n    //-----------------------------------------------------------------------------------------------\n    // Delete the tile we just built with library function. \n    //\n    jez.tileDelete(TILE_ID)\n    //----------------------------------------------------------------------------------------------\n    // Delete the temporary item\n    //\n    let oldActorItem = aToken.actor.data.items.getName(NEW_ITEM_NAME)\n    if (oldActorItem) await deleteItem(aToken.actor, oldActorItem)\n    msg = `${NEW_ITEM_NAME} has been deleted from ${aToken.name}`\n    ui.notifications.info(msg);\n    //----------------------------------------------------------------------------------------------\n    // Grab the flag, clear the flag\n    //\n    let tokenIdArray = []\n    let flagValue = await DAE.getFlag(aToken.actor, MACRO);     // Get the flag value\n    if (flagValue) tokenIdArray = flagValue.split(\" \")          // Populate array \n    await DAE.unsetFlag(aToken.actor, MACRO);                   // await??\n    //----------------------------------------------------------------------------------------------\n    // Loop through the IDs in flagValue, clearing the effect if present on each token\n    //\n    for (let i = 0; i < tokenIdArray.length; i++) {\n        let tToken = canvas.tokens.placeables.find(ef => ef.id === tokenIdArray[i])\n        jez.log(`Processing ${i}: ${tToken.name}`)\n        let effect = await tToken.actor.effects.find(i => i.data.label === EFFECT);\n        jez.log(`  ${EFFECT} found?`, effect)\n        if (effect) {\n            jez.log(`  ${EFFECT} found on ${aToken.name}, removing...`)\n            effect.delete();  // await??\n        } else jez.log(`  ${EFFECT} not found on ${aToken.name}, continuing...`)\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n  }\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    const TEMPLATE_ID = args[0].templateId\n    const TEMPLATE = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    jez.log(\"Place the VFX Tile\")\n    const TILE_ID = await placeTile(TEMPLATE_ID, TEMPLATE.center);\n    jez.log(\"TILE_ID\", TILE_ID)\n    copyEditItem(aToken)\n    jez.log(\"Post message to a chat card\")\n    msg = `An At-Will Spell \"${NEW_ITEM_NAME}\" has been added to ${aToken.name}'s spell book`\n    ui.notifications.info(msg);\n    jez.log(\"Clear the flag that will be used to store token.id values of afflicted tokens\")\n    DAE.unsetFlag(aToken.actor, MACRO);                         // await??\n    // Call function to modify concentration effect to delete the VFX tile on concetration removal\n    modConcEffect(TILE_ID)\n    msg = `<b>${NEW_ITEM_NAME}</b> has been added to ${aToken.name}'s spell book, as an At-Will spell.`\n    await postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRO} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\nasync function placeTile(TEMPLATE_ID, templateCenter) {\n    const FUNCNAME = \"placeTile(TEMPLATE_ID, templateCenter)\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(3,trcLvl,\"Parameters\",\"TEMPLATE_ID\",TEMPLATE_ID,\"templateCenter\",templateCenter)\n\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    const GRID_SIZE = canvas.scene.data.grid; // Size of grid in pixels per square\n    let tileProps = { \n        x: templateCenter.x - GRID_SIZE/2,\n        y: templateCenter.y - GRID_SIZE/2,\n        img: \"modules/jb2a_patreon/Library/4th_Level/Black_Tentacles/BlackTentacles_01_Dark_Purple_600x600.webm\",\n        width: GRID_SIZE * 5,\n        height: GRID_SIZE * 5 // ditto\n    }\n    return await jez.tileCreate(tileProps)\n}\n/***************************************************************************************************\n * Each round, ask the GM if the afflicted actor wants to use its action to attemot to break out \n * of the grapple from the tentacles.\n ***************************************************************************************************/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    const CHECK_DC = args[1];\n    const ORIGIN_TOKEN_ID = args[2]\n    jez.log(`Check DC: ${CHECK_DC}, Origin Token ID: ${ORIGIN_TOKEN_ID}`)\n    let strMod = await jez.getStatMod(aToken, \"str\");\n    let dexMod = await jez.getStatMod(aToken, \"dex\");\n    let chkStat = \"Strength\"; let chkSta = \"str\"; let chkMod = strMod\n    let oToken = canvas.tokens.placeables.find(ef => ef.id === ORIGIN_TOKEN_ID)\n    if (dexMod > strMod) { chkStat = \"Dexterity\"; chkSta = \"dex\"; chkMod = dexMod }\n    jez.log(`------${FUNCNAME} Stats for escape check ------`, \"chkStat\", chkStat, \"chkSta\", chkSta, \"chkMod\", chkMod)\n    const DIALOG_TITLE = `Does ${aToken.name} attempt to break restraint?`\n    const DIALOG_TEXT = `The twisty tentacles are keeping <b>${aToken.name}</b> restrained, \n        damaging it each round. Does <b>${aToken.name}</b> want to use its\n        action to attempt a ${chkStat} check against ${oToken.name}'s  Black Tentacles spell, \n        check <b>DC${CHECK_DC}?<br><br>`\n    new Dialog({\n        title: DIALOG_TITLE,\n        content: DIALOG_TEXT,\n        buttons: {\n            yes: {\n                label: \"Attempt Escape\", callback: async () => {\n                    let flavor = `${aToken.name} uses this turn's <b>action</b> to attempt a \n                    ${CONFIG.DND5E.abilities[chkSta]} check vs <b>DC${CHECK_DC}</b> to end the \n                    effect from ${aItem.name}.`;\n                    let check = (await aToken.actor.rollAbilityTest(chkSta,\n                        { flavor: flavor, chatMessage: true, fastforward: true })).total;\n                    jez.log(\"Result of check roll\", check);\n                    if (CHECK_DC < check) {\n                        await aToken.actor.deleteEmbeddedDocuments(\"ActiveEffect\", [LAST_ARG.effectId]);\n                        jez.postMessage({\n                            color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                            msg: `<b>${aToken.name}</b> succesfully broke free.<br>No longer ${RESTRAINED_JRNL}.`,\n                            title: `Succesful Skill Check`, token: aToken\n                        })\n                    } else {\n                        jez.postMessage({\n                            color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                            msg: `<b>${aToken.name}</b> failed to break free.<br>Remains ${RESTRAINED_JRNL}.`,\n                            title: `Failed Skill Check`, token: aToken,\n                        })\n                    }\n                }\n            },\n            no: {\n                label: \"Ignore Tentacles\", callback: async () => {\n                    jez.postMessage({\n                        color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n                        msg: `<b>${aToken.name}</b> opted to ignore the Tentacles and remains ${RESTRAINED_JRNL}.`,\n                        title: `Declined Skill Check`, token: aToken\n                    })\n                }\n            },\n        },\n        default: \"yes\",\n    }).render(true);\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Modify existing effect to include a midi-qol overtime saving throw element\n ***************************************************************************************************/\nasync function modConcEffect(tileId) {\n    const EFFECT = \"Concentrating\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(1000)\n    let effect = await aToken.actor.effects.find(i => i.data.label === EFFECT);\n    jez.log(`**** ${EFFECT} found?`, effect)\n    if (!effect) {\n        msg = `${EFFECT} sadly not found on ${aToken.name}.`\n        ui.notifications.error(msg);\n        postResults(msg);\n        return (false);\n    }\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. In this case, a world macro that will be\n    // given arguments: VFX_Name and Token.id for all affected tokens\n    //    \n    //effect.data.changes.push({key: `macro.execute`, mode: jez.CUSTOM, value:`entangle_helper ${VFX_NAME} ${label}`, priority: 20})\n    effect.data.changes.push({key: `macro.itemMacro`, mode: jez.CUSTOM, value:`${tileId}`, priority: 20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect ${EFFECT} updated!`, result);\n}\n/***************************************************************************************************\n * Copy the temporary item to actor's spell book and edit it as appropriate\n ***************************************************************************************************/\nasync function copyEditItem(token5e) {\n    const FUNCNAME = \"copyEditItem()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    let oldActorItem = token5e.actor.data.items.getName(NEW_ITEM_NAME)\n    if (oldActorItem) await deleteItem(token5e.actor, oldActorItem)\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Get the item from the Items directory and slap it onto the active actor\")\n    let itemObj = game.items.getName(SPEC_ITEM_NAME)\n    if (!itemObj) {\n        msg = `Failed to find ${SPEC_ITEM_NAME} in the Items Directory`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return (false)\n    }\n    console.log('Item5E fetched by Name', itemObj)\n    await replaceItem(token5e.actor, itemObj)\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Edit the item on the actor\")\n    let aActorItem = token5e.actor.data.items.getName(SPEC_ITEM_NAME)\n    jez.log(\"aActorItem\", aActorItem)\n    if (!aActorItem) {\n        msg = `Failed to find ${SPEC_ITEM_NAME} on ${token5e.name}`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return (false)\n    }\n    //-----------------------------------------------------------------------------------------------\n    jez.log(`Remove the don't change this message assumed to be embedded in the item description.  It \n     should be of the form: <p><strong>%%*%%</strong></p> followed by white space`)\n    const searchString = `<p><strong>%%.*%%</strong></p>[\\s\\n\\r]*`;\n    const regExp = new RegExp(searchString, \"g\");\n    const replaceString = ``;\n    let content = await duplicate(aActorItem.data.data.description.value);\n    content = await content.replace(regExp, replaceString);\n    let itemUpdate = {\n        'name': NEW_ITEM_NAME,\n        'data.description.value': content,\n        //'effects[0].value.data.label': NEW_ITEM_NAME\n    }\n    await aActorItem.update(itemUpdate)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/*************************************************************************************\n * replaceItem\n * \n * Replace or Add targetItem to inventory of actor5e passed as parms\n *************************************************************************************/\n async function replaceItem(actor5e, targetItem) {\n    await deleteItem(actor5e, targetItem)\n    return (actor5e.createEmbeddedDocuments(\"Item\", [targetItem.data]))\n}\n/*************************************************************************************\n * deleteItem\n * \n * Delete targetItem to inventory of actor5e passed as parms\n *************************************************************************************/\n async function deleteItem(actor5e, targetItem) {\n    let itemFound = actor5e.items.find(item => item.data.name === targetItem.data.name && item.type === targetItem.type)\n    if (itemFound) await itemFound.delete();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.MzFjZDhhNDJkZDdi"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}