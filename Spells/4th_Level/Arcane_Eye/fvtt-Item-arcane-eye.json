{
  "name": "Arcane Eye",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/evil-eye-eerie-2.jpg",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% creates an invisible, magical eye within range that hovers in the air for the duration.</p>\n<p><span style=\"font-family:var(--font-primary);font-size:var(--font-size-14)\">%TOKENNAME%</span> mentally receives visual information from the eye, which has normal vision and darkvision out to 30 feet. The eye can look in every direction.</p>\n<p>As an <strong>action</strong>, you can move the eye up to<strong> 30 feet i</strong>n any direction. There is no limit to how far away from you the eye can move, but it can't enter another plane of existence. A solid barrier blocks the eye's movement, but the eye can pass through an opening as small as 1 inch in diameter.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 214",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 4,
    "school": "div",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "A bit of bat fur.",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.spells.ImlCJQwR1VL40Qem"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Arcane Eye",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Arcane_Eye.0.1.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Call a token via warpgate, most interesting element is the use of jez.warpCrosshairs to control\n * how far away the token can be summoned.\n * \n * 07/15/22 0.1 Creation of Macro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim of the version number and extension\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst MINION = `%ArcaneEye%`;\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set Off\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n    if (TL > 1) jez.trace(\"Token to dismiss\", args[1])\n    warpgate.dismiss(args[1], game.scenes.viewed.id)\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL === 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    //-----------------------------------------------------------------------------------------------\n    //\n    if (!game.modules.get(\"warpgate\")?.active) \n        return jez.badNews(\"Please enable the Warp Gate module\", \"error\")\n    //--------------------------------------------------------------------------------------\n    // Verify our Minion's Actor exists\n    //\n    const MINION_DATA = game.actors.getName(MINION)\n    if (!MINION_DATA) \n        return jez.badNews(`Could not find ${MINION} in the Actors Directory`,error)\n    if (TL > 2) jez.trace(`MINION_DATA`,MINION_DATA);\n    //--------------------------------------------------------------------------------------\n    // Perform the actual summon\n    //\n    let summonedID = await summonArcaneEye(MINION_DATA.img)\n    //--------------------------------------------------------------------------------------\n    // Add watchdog effect to despawn summoned token at expiration (1 hour) via doOff \n    //\n    const EXPIRE = [\"newDay\", \"longRest\", \"shortRest\"];\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let effectData = {\n      label: aItem.name,\n      icon: aItem.img,\n      origin: LAST_ARG.uuid,\n      disabled: false,\n      duration: { \n          rounds: 600, startRound: GAME_RND, \n          seconds: 3600,  startTime: game.time.worldTime, \n          token: aToken.uuid, stackable: false \n        },\n      flags: { dae: { macroRepeat: \"none\", specialDuration: EXPIRE } },\n      changes: [\n        { key: `macro.itemMacro`, mode: jez.ADD, value: summonedID, priority: 20 },\n      ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aToken.actor.uuid, effects: [effectData] });\n    //-----------------------------------------------------------------------------------------------\n    // post summary effect message\n    //\n    msg = `${aToken.name} creates an invisible, magical eye that hovers in the air for the duration \n    providing darkvision with 30 feet.  See spell description for more.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n    return true;\n}\n/***************************************************************************************************\n * Summon the minion and update \n ***************************************************************************************************/\nasync function summonArcaneEye(texture) {\n    const FUNCNAME = \"summonArcaneEye(texture)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL === 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n    if (TL > 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`,\"texture\",texture);\n    //-----------------------------------------------------------------------------------------------\n    //\n    const ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\n    if (TL > 1) jez.trace(\"ALLOWED_UNITS\",ALLOWED_UNITS);\n    let updates = {\n        token: { name: `${aToken.name}'s Arcane Eye` },\n        actor: { name: `${aToken.name}'s Arcane Eye` }\n    }\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n        pre: async (template) => {\n          jez.vfxPreSummonEffects(template, {color:\"*\", scale:0.5, opacity:1});\n          await warpgate.wait(500);\n        },\n        post: async (template) => {\n          jez.vfxPostSummonEffects(template, {color:\"*\", scale:0.5, opacity:1});\n          await warpgate.wait(500); \n        }\n      };\n    //------------------------------------------------------------------------------------------------\n    // COOL-THING:  Macro that runs displays a range name below the summoning crosshairs\n    //\n    const MAX_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 30\n    let { x, y } = await jez.warpCrosshairs(aToken, MAX_RANGE, texture, aItem.name, {}, -1, { traceLvl: TL })\n    //------------------------------------------------------------------------------------------------\n    // Suppress token mold's renaming of tokens\n    //\n    jez.suppressTokenMoldRenaming(1500, { traceLvl: TL }) \n    await jez.wait(100)             // Wait a bit for TokenMold to be suppressed\n    //------------------------------------------------------------------------------------------------\n    // Spawn in that token\n    //\n    if (TL>2) jez.trace(`Calling warpgate.spawnAt({ x, y }, MINION, updates, { controllingActor: aActor }, OPTIONS)`,\n    \"x\",x,\"y\",y,\"MINION\",MINION,\"updates\",updates,\"aActor\",aActor,\"OPTIONS\",OPTIONS );\n    let returnValue = await warpgate.spawnAt({ x, y }, MINION, updates, CALLBACKS, OPTIONS);\n    //------------------------------------------------------------------------------------------------\n    // That's it, say goodbye\n    //\n    if (TL>1) jez.trace(`warpgate.spawnAt(...) returning`,returnValue)\n    if (TL>0) jez.trace(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n    return returnValue\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}