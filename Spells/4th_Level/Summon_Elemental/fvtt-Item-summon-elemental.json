{
  "name": "Summon Elemental",
  "type": "spell",
  "img": "systems/dnd5e/icons/skills/ice_14.jpg",
  "data": {
    "description": {
      "value": "<p>You call forth an elemental spirit. It manifests in an unoccupied space that you can see within range. This corporeal form uses the Elemental Spirit stat block. When you cast the spell, choose an element: Air, Earth, Fire, or Water. The creature resembles a bipedal form wreathed in the chosen element, which determines certain traits in its stat block. The creature disappears when it drops to 0 hit points or when the spell ends.</p>\n<p>The creature is an ally to you and your companions. In combat, the creature shares your initiative count, but it takes its turn immediately after yours. It obeys your verbal commands (no action required by you). If you don’t issue any, it takes the Dodge action and uses its move to avoid danger.</p>\n<p><em><strong>At Higher Levels.</strong></em> When you cast this spell using a spell slot of 5th level or higher, use the higher level wherever the spell’s level appears in the stat block.</p>\n<div class=\"Basic-Text-Frame stat-block-finder\">\n<p class=\"Stat-Block-Styles_Stat-Block-Title\">Elemental Spirit</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Metadata\">Medium elemental</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Armor Class</strong> 11 + the level of the spell (natural armor)</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Hit Points</strong> 50 + 10 for each spell level above 4th</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Speed</strong> 40 ft.; burrow 40 ft. (Earth only); fly 40 ft. (hover) (Air only); swim 40 ft. (Water only)</p>\n<div class=\"stat-block-ability-scores\">\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">STR</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">18</span> <span class=\"stat-block-ability-scores-modifier\">(+4)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">DEX</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">15</span> <span class=\"stat-block-ability-scores-modifier\">(+2)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">CON</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">17</span> <span class=\"stat-block-ability-scores-modifier\">(+3)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">INT</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">4</span> <span class=\"stat-block-ability-scores-modifier\">(−3)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">WIS</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">10</span> <span class=\"stat-block-ability-scores-modifier\">(+0)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">CHA</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">16</span> <span class=\"stat-block-ability-scores-modifier\">(+3)</span></div>\n</div>\n</div>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Damage Resistances</strong> acid (Water only); lightning and thunder (Air only); piercing and slashing (Earth only)</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Damage Immunities</strong> poison; fire (Fire only)</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Condition Immunities</strong> exhaustion, paralyzed, petrified, poisoned, unconscious</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Senses</strong> darkvision 60 ft., passive Perception 10</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Languages</strong> Primordial, understands the languages you speak</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data-Last\"><strong>Challenge</strong> — <strong>Proficiency Bonus</strong> equals your bonus</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Body\"><em><strong>Amorphous Form (Air, Fire, and Water Only).</strong></em> The elemental can move through a space as narrow as 1 inch wide without squeezing.</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Heading\">Actions</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Body\"><em><strong>Multiattack.</strong></em> The elemental makes a number of attacks equal to half this spell’s level (rounded down).</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Body\"><em><strong>Slam.</strong> Melee Weapon Attack:</em> your spell attack modifier to hit, reach 5 ft., one target. <em>Hit:</em> 1d10 + 4 + the spell’s level bludgeoning damage (Air, Earth, and Water only) or fire damage (Fire only).</p>\n</div>",
      "chat": "<p>You call forth an elemental spirit. It manifests in an unoccupied space that you can see within range. This corporeal form uses the Elemental Spirit stat block. When you cast the spell, choose an element: Air, Earth, Fire, or Water. The creature resembles a bipedal form wreathed in the chosen element, which determines certain traits in its stat block. The creature disappears when it drops to 0 hit points or when the spell ends.</p>\n<p>The creature is an ally to you and your companions. In combat, the creature shares your initiative count, but it takes its turn immediately after yours. It obeys your verbal commands (no action required by you). If you don’t issue any, it takes the Dodge action and uses its move to avoid danger.</p>\n<p><em><strong>At Higher Levels.</strong></em> When you cast this spell using a spell slot of 5th level or higher, use the higher level wherever the spell’s level appears in the stat block.</p>\n<div class=\"Basic-Text-Frame stat-block-finder\">\n<p class=\"Stat-Block-Styles_Stat-Block-Title\">Elemental Spirit</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Metadata\">Medium elemental</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Armor Class</strong> 11 + the level of the spell (natural armor)</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Hit Points</strong> 50 + 10 for each spell level above 4th</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Speed</strong> 40 ft.; burrow 40 ft. (Earth only); fly 40 ft. (hover) (Air only); swim 40 ft. (Water only)</p>\n<div class=\"stat-block-ability-scores\">\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">STR</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">18</span> <span class=\"stat-block-ability-scores-modifier\">(+4)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">DEX</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">15</span> <span class=\"stat-block-ability-scores-modifier\">(+2)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">CON</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">17</span> <span class=\"stat-block-ability-scores-modifier\">(+3)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">INT</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">4</span> <span class=\"stat-block-ability-scores-modifier\">(−3)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">WIS</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">10</span> <span class=\"stat-block-ability-scores-modifier\">(+0)</span></div>\n</div>\n<div class=\"stat-block-ability-scores-stat\">\n<div class=\"stat-block-ability-scores-heading\">CHA</div>\n<div class=\"stat-block-ability-scores-data\"><span class=\"stat-block-ability-scores-score\">16</span> <span class=\"stat-block-ability-scores-modifier\">(+3)</span></div>\n</div>\n</div>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Damage Resistances</strong> acid (Water only); lightning and thunder (Air only); piercing and slashing (Earth only)</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Damage Immunities</strong> poison; fire (Fire only)</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Condition Immunities</strong> exhaustion, paralyzed, petrified, poisoned, unconscious</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Senses</strong> darkvision 60 ft., passive Perception 10</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data\"><strong>Languages</strong> Primordial, understands the languages you speak</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Data-Last\"><strong>Challenge</strong> — <strong>Proficiency Bonus</strong> equals your bonus</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Body\"><em><strong>Amorphous Form (Air, Fire, and Water Only).</strong></em> The elemental can move through a space as narrow as 1 inch wide without squeezing.</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Heading\">Actions</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Body\"><em><strong>Multiattack.</strong></em> The elemental makes a number of attacks equal to half this spell’s level (rounded down).</p>\n<p class=\"Stat-Block-Styles_Stat-Block-Body\"><em><strong>Slam.</strong> Melee Weapon Attack:</em> your spell attack modifier to hit, reach 5 ft., one target. <em>Hit:</em> 1d10 + 4 + the spell’s level bludgeoning damage (Air, Earth, and Water only) or fire damage (Fire only).</p>\n</div>",
      "unidentified": ""
    },
    "source": "Tasha’s Cauldron of Everything pg 111",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 4,
    "school": "con",
    "components": {
      "value": "air, a pebble, ash, and water inside a gold-inlaid vial worth at least 400 gp",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "air, a pebble, ash, and water inside a gold-inlaid vial worth at least 400 gp",
      "consumed": false,
      "cost": 400,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 5854981,
      "definitionId": 721199,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 67,
          "pageNumber": 111,
          "sourceType": 1
        }
      ],
      "tags": [
        "Summoning"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_5bhigw4ca0a"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.3YVoExCBaWeJr0v4"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Summon Elemental",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Summon_Elemental.0.1.js\"\nconst TL = 0;                               // Trace Level for this macro\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Automate Summon Elemental\n * \n * You call forth an elemental spirit. It manifests in an unoccupied space that you can see within range. This corporeal form uses \n * the Elemental Spirit stat block. When you cast the spell, choose an element: Air, Earth, Fire, or Water. The creature resembles \n * a bipedal form wreathed in the chosen element, which determines certain traits in its stat block. The creature disappears when \n * it drops to 0 hit points or when the spell ends.\n * \n * The creature is an ally to you and your companions. In combat, the creature shares your initiative count, but it takes its turn \n * immediately after yours. It obeys your verbal commands (no action required by you). If you don't issue any, it takes the Dodge \n * action and uses its move to avoid danger.\n * \n * At Higher Levels. When you cast this spell using a spell slot of 5th level or higher, use the higher level wherever the spell's \n * level appears in the stat block.\n * \n * - Build list of available summons, verifying existence of each template creature\n * - Dialog to select creature to summon\n * - Place summoned creature, including making creature \"friendly\" (same disposition as caster)\n * - Mod concentration to flip creature to opposite attitude on concentration break\n * - Place timer effect on summoned elemental to delete itself at end of spell duration. Dismiss_Token perhaps?\n * \n * 07/21/22 0.1 Creation of Macro starting from Conjure_Elemental.0.1\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim of the version number and extension\nconst TAG = `${MACRO} |`\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 1) jez.log(`=== Starting === ${MACRONAME} ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_LEVEL = args[0].spellLevel\nconst SPELL_DC = aActor.data.data.attributes.spelldc\nconst ELEMENTAL_TYPES = ['Air', 'Earth', 'Fire', 'Water']\nconst IMAGES = {\n    Air: 'Tokens/Monsters/Elementals/Air-Elemental.png',\n    Earth: 'Tokens/Monsters/Elementals/Earth-Elemental.png',\n    Fire: 'Tokens/Monsters/Elementals/Fire-Elemental.png',\n    Water: 'Tokens/Monsters/Elementals/Water-Elemental.png'\n}\nconst IMAGES_ACTOR = {\n    Air: 'Tokens/Monsters/Elementals/Avatar/Air-Elemental_Avatar.png',\n    Earth: 'Tokens/Monsters/Elementals/Avatar/Earth-Elemental_Avatar.png',\n    Fire: 'Tokens/Monsters/Elementals/Avatar/Fire-Elemental_Avatar.png',\n    Water: 'Tokens/Monsters/Elementals/Avatar/Water-Elemental_Avatar.png'\n}\nconst ELEMENTAL_TEMPLATE = '%Elemental Spirit%'\nconst ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\nconst MAX_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 90\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\n// if (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (TL > 1) jez.log(`=== Starting === ${MACRONAME} ===`);\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Make sure the templates exist in the actor's directory\n    //\n    let summonData = game.actors.getName(ELEMENTAL_TEMPLATE)\n    if (!summonData) return jez.badNews(`$TAG \"${ELEMENTAL_TEMPLATE}\" could not be found in actor directory`, \"e\")\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Pop a dialog to obtain the desired elemental type for this casting\n    //\n    const queryTitle = \"Select Element to be Summoned\"\n    const queryText = \"Pick one from the list (or I'll do it for you!)\"\n    const RANDOM_ELEMENT = ELEMENTAL_TYPES[Math.floor(Math.random() * ELEMENTAL_TYPES.length)]\n    const ELEMENT_SELECTED = await jez.pickRadioListArray(queryTitle, queryText, () => { }, ELEMENTAL_TYPES.sort());\n    const ELEMENT = ELEMENT_SELECTED ? ELEMENT_SELECTED : RANDOM_ELEMENT\n    if (TL > 1) jez.log(`${TAG} ELEMENT selected`, ELEMENT)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Portals need the same color for pre and post effects, so get that set here. Even though only used when we are doing portals\n    //\n    const PORTAL_COLORS = [\"Bright_Blue\", \"Dark_Blue\", \"Dark_Green\", \"Dark_Purple\", \"Dark_Red\",\n        \"Dark_RedYellow\", \"Dark_Yellow\", \"Bright_Green\", \"Bright_Orange\", \"Bright_Purple\", \"Bright_Red\", \"Bright_Yellow\"]\n    let index = Math.floor((Math.random() * PORTAL_COLORS.length))\n    let portalColor = PORTAL_COLORS[index]\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Build the dataObject for our summon call\n    //\n    const MINION_NAME = `${aToken.name}'s Elemental Spirit`\n    let argObj = {\n        defaultRange: MAX_RANGE,             // Defaults to 30, but this varies per spell\n        duration: 4000,                     // Duration of the intro VFX\n        introTime: 250,                     // Amount of time to wait for Intro VFX\n        introVFX: `~Portals/Portal_${portalColor}_H_400x400.webm`, // default introVFX file\n        minionName: MINION_NAME,\n        templateName: ELEMENTAL_TEMPLATE,\n        name: aItem.name,                   // Name of action (message only), typically aItem.name\n        outroVFX: `~Portals/Masked/Portal_${portalColor}_H_NoBG_400x400.webm`, // default outroVFX file\n        scale: 0.5,\t\t\t\t\t\t    // \n        source: aToken,                     // Coords for source (with a center), typically aToken\n        width: 1,                           // Width of token to be summoned, 1 is the default\n        traceLvl: 0                         // Trace level, matching calling function decent choice\n    }\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    argObj.img = IMAGES[ELEMENT]\n    // ---------------------------------------------------------------------------------------------\n    // Get updates depending on mood and caster values\n    // \n    argObj.updates = customization(MINION_NAME, SPELL_LEVEL, ELEMENT, SPELL_DC, summonData, { traceLvl: TL })\n    // if (TL > 1) jez.log(`${TAG} Updates for our ${MOOD} Elemental`, argObj.updates)\n    //--------------------------------------------------------------------------------------------------\n    // Do the actual summon\n    //\n    const ELE_ID_ARRAY = await jez.spawnAt(ELEMENTAL_TEMPLATE, aToken, aActor, aItem, argObj)\n    const ELE_ID = ELE_ID_ARRAY[0]\n    if (TL > 1) jez.log(`${TAG} Token ID of Summoned Elemental`, ELE_ID) // '1pQBnOntUvRCZzQS'\n    const ELE_UUID = `Scene.${game.scenes.viewed.id}.Token.${ELE_ID}`\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Modify concentrating effect to delete the elemental when concentration breaks\n    //\n    modConcentratingEffect(aToken, ELE_ID, MINION_NAME)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Delete Amorphous Form if we're making an earth elemental\n    if (ELEMENT === \"Earth\") {\n        if (TL > 1) jez.log(`${TAG} Delete Amorphous Form from ${ELEMENT} Elemental`)\n        jez.deleteItems(\"Amorphous Form\", \"feat\", ELE_ID);    // \n    }\n    //-----------------------------------------------------------------------------------------------\n    // That's all folks\n    //\n    if (TL > 1) jez.log(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Call back function called after elemental is selected and then proceeds with execution.  \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function pickEleCallBack(selection) {\n    const FUNCNAME = \"pickEleCallBack(selection)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    if (TL === 1) jez.log(`--- Starting --- ${MACRO} ${FNAME} ---`);\n    if (TL > 1) jez.log(`--- Starting --- ${MACRO} ${FUNCNAME} ---`, \"selection\", selection);\n\n    //--------------------------------------------------------------------------------------------------\n    // Build a UUID that will be slapped on the concentrating effect for doOff call.  Should look like:\n    //   Scene.MzEyYTVkOTQ4NmZk.Token.cBMsqVwfwf1MxRxV\n    let elemementalUuid = `Scene.${game.scenes.viewed.id}.Token.${elementalId}`\n    modConcentratingEffect(aToken, elemementalUuid)\n    //--------------------------------------------------------------------------------------------------\n    // Convert Item Card's duration into seconds, if supported units, otherwise go with 3600\n    //\n    let duration = 3600\n    if (aItem.data.duration.units === \"turn\") duration = aItem.data.duration.value * 6\n    if (aItem.data.duration.units === \"round\") duration = aItem.data.duration.value * 6\n    if (aItem.data.duration.units === \"minute\") duration = aItem.data.duration.value * 60\n    if (aItem.data.duration.units === \"hour\") duration = aItem.data.duration.value * 3600\n    //--------------------------------------------------------------------------------------------------\n    // Add an effect to our recently summoned elemental to delete itself at the end of the spell duration\n    //\n    const CE_DESC = `Summoned ${summons} will remain for up to an hour`\n    const EXPIRE = [\"newDay\", \"longRest\", \"shortRest\"];\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let effectData = {\n        label: aItem.name,\n        icon: CLOCK_IMG,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        duration: {\n            rounds: duration / 6, startRound: GAME_RND,\n            seconds: duration, startTime: game.time.worldTime,\n            token: aToken.uuid, stackable: false\n        },\n        flags: {\n            dae: { macroRepeat: \"none\", specialDuration: EXPIRE },\n            convenientDescription: CE_DESC\n        },\n        changes: [\n            { key: `macro.execute`, mode: jez.CUSTOM, value: `Dismiss_Tokens ${elemementalUuid}`, priority: 20 },\n        ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: elemementalUuid, effects: [effectData] });\n    //--------------------------------------------------------------------------------------------------\n    // Post completion message to item card\n    //\n    msg = `${aToken.name} has summoned a ${summons} which will serve for the spell duration.`\n    postResults(msg)\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call this macro as an ItemMacro that can use doOff\n * function can be used to clean accumulated effects.  \n ***************************************************************************************************/\nasync function modConcentratingEffect(token5e, arg, MINION_NAME) {\n    const EFFECT = \"Concentrating\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the token to find the just added concentrating effect\n    //\n    await jez.wait(100)\n    let effect = await token5e.actor.effects.find(i => i.data.label === EFFECT);\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. \n    //    \n    const CE_DESC = `Concentrating on ${MINION_NAME}`\n    effect.data.changes.push({\n        key: `macro.execute`, mode: jez.ADD, value: `DeleteTokenMacro ${arg}`, priority: 20\n    })\n    effect.data.flags = { convenientDescription: CE_DESC }\n    if (TL > 0) jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes, 'flags': effect.data.flags });\n    if (result && TL > 1) jez.log(`${MACRO} | Active Effect ${EFFECT} updated!`, result);\n}\n/***************************************************************************************************\n * Return a data object appropriate for each of the three Elemental moods to be used to customize the\n * summoned token by spell level (for up casts)\n ***************************************************************************************************/\nfunction customization(MINION_NAME, SPELL_LEVEL, ELEMENT, SPELL_DC, SUMMON_DATA, options = {}) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL > 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.log(`${TAG} Customization Parms`, 'MINION_NAME', MINION_NAME,\n        'SPELL_LEVEL', SPELL_LEVEL, 'ELEMENT    ', ELEMENT, 'SPELL_DC   ', SPELL_DC,\n        'SUMMON_DATA', SUMMON_DATA, \"options    \", options)\n    //-----------------------------------------------------------------------------------------------\n    // Function Variables\n    //\n    let updates = {}\n    const DEX_MOD = SUMMON_DATA.data.data.abilities.dex.mod\n    const PROFICENCY = SUMMON_DATA.data.data.attributes.prof\n    const EXTRA_ATTACK_BONUS = SPELL_DC - 8 - DEX_MOD - PROFICENCY // Additional bonus over natural for Elemental\n    // if (TL > 1) jez.log(`${TAG} EXTRA_ATTACK_BONUS (${EXTRA_ATTACK_BONUS}), DEX_MOD (${DEX_MOD}), PROFICENCY (${PROFICENCY})`)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Build language array for elemental\n    //\n    let languageArray = aActor.data.data.traits.languages.value\n    languageArray.push('primordial')\n    if (TL > 2) jez.log(`${TAG} Language array`, languageArray)\n    let castStat = jez.getCastStat(aActor)\n    if (TL > 2) jez.log(`${TAG} Caster cast stat`, castStat)\n    let strValue = aActor.data.data.abilities[castStat].value\n    if (TL > 2) jez.log(`${TAG} Strength value`, strValue)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    //\n    const DAM_TYPE = (ELEMENT === \"Fire\") ? \"fire\" : \"bludgeoning\"\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Modifications for all types\n    // \n    updates = {\n        token: {\n            \"name\": MINION_NAME,\n            \"img\": IMAGES[ELEMENT]\n        },\n        actor: {\n            \"name\": MINION_NAME,\n            \"img\": IMAGES_ACTOR[ELEMENT],\n            data: {\n                abilities: {\n                    str: {\n                        value: strValue,                        // Set strength equal to casters cast stat for attack bonus \n                    }\n                },\n                attributes: {\n                    hp: {\n                        max: (SPELL_LEVEL || 4) * 10 + 10,     // 50 + 10 for each spell level above 4th\n                        value: (SPELL_LEVEL || 4) * 10 + 10,   // 50 + 10 for each spell level above 4th\n                    },\n                    ac: {\n                        flat: 11 + (SPELL_LEVEL || 4),         // 11 + the level of the spell (natural armor)\n                    }\n                },\n                details: {\n                    cr: jez.getCharLevel(aActor),               // Chalenge Rating is caster's level\n                },\n                traits: {\n                    di: {\n                        value: [\"poison\"],                         // Only Fire gets fire immunity  \n                    },\n                    languages: {\n                        value: languageArray,               // Caster's languages plus Primordial\n                        custom: '',                         // Caster's languages plus Primordial\n                    }\n                }\n            }\n        },\n        embedded: {\n            Item: {\n                \"Multiattack (Elemental Spirit)\": {\n                    \"data.description.value\": `<p>${MINION_NAME} may make <b>${Math.floor(SPELL_LEVEL / 2)}</b> attacks per attack \n                    action.</p>`,\n                    \"name\": `Multiattack (${Math.floor(SPELL_LEVEL / 2)} per attack action)`,\n                },\n                \"Slam (Elemental Spirit)\": {\n                    \"name\": \"Slam\",\n                    \"data.attackBonus\": 0,\n                    \"data.damage.parts\": [\n                        [`1d10[${DAM_TYPE}]+@mod+${(SPELL_LEVEL || 4)}`, DAM_TYPE]\n                    ],\n                    \"data.description.value\":\n                        `<p><strong>Melee Weapon Attack</strong></p>\n                        <ul>\n                        <li>${aToken.name}'s spell attack modifier (${SPELL_DC - 8}) to hit,</li>\n                        <li>Reach 5 feet,</li>\n                        <li>One target,</li>\n                        <li>Hit: 1d10 + ${aToken.name}'s Casting Mod (${jez.getCastMod(aActor)}) + spell's cast level (${(SPELL_LEVEL || 4)}) ${DAM_TYPE} damage</li>\n                        </ul>`,\n                }\n            },\n        }\n    }\n    if (TL > 1) jez.log(`${TAG} Special case treatment of our ${ELEMENT} Elemental`, updates)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Air Elemental\n    //\n    if (ELEMENT === \"Air\") {\n        updates.actor.data.attributes.movement = {\n            fly: 40,                                                            // Air gets flight\n            hover: true                                                         // Air gets hover\n        }\n        updates.actor.data.traits.dr = {\n            value: [\"lightning\", \"thunder\"]           // Air gets lightning & thunder\n        }\n    }\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Earth Elemental\n    //\n    if (ELEMENT === \"Earth\") {\n        updates.actor.data.attributes.movement = {\n            burrow: 40,                                                        \n        }\n        updates.actor.data.traits.dr = {\n            value: [\"piercing\", \"slashing\"]           // Air gets lightning & thunder\n        }\n    }\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Fire Elemental\n    //\n    if (ELEMENT === \"Fire\") {\n        updates.actor.data.traits.di = {\n            value: [\"poison\", \"fire\"]           // Air gets lightning & thunder\n        }\n    }\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Water Elemental\n    //\n    if (ELEMENT === \"Water\") {\n        updates.actor.data.attributes.movement = {\n            swim: 40,                                                        \n        }\n        updates.actor.data.traits.dr = {\n            value: [\"acid\"]           // Air gets lightning & thunder\n        }\n    }\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    // Done\n    //\n    return updates\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}