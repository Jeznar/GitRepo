{
  "name": "Fire Shield",
  "type": "spell",
  "img": "icons/magic/defensive/shield-barrier-flaming-pentagon-orange.webp",
  "data": {
    "description": {
      "value": "<p>Thin and wispy flames wreathe your body for the Duration, shedding <strong>bright light in a 10-foot radius</strong> and <strong>dim light for an additional 10 feet</strong>. You can end the spell early by using an action to dismiss it.</p>\n<p>The flames provide you with a warm shi⁠eld or a chill sh⁠ield, as you choose.</p>\n<ol>\n<li>Hot shi⁠eld grants you resistance to cold damage, and</li>\n<li>Cold shi⁠eld grants you resist⁠ance to fire damage.</li>\n</ol>\n<p>In addition, whenever a creature within 5 feet of you hits you with a melee Attack, the shiel⁠d erupts with flame. The attacker takes <strong>2d8 fire damage</strong> from a warm shie⁠ld, or<strong> 2d8 cold damage</strong> from a cold sh⁠ield.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This spell creates a temporary inventory item that must be used to implement the refected damage portion  of this spell.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 242",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 10,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 4,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A bit of phosphorus or a firefly",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "AKvaMvKe2qN5j8zf",
      "flags": {
        "dae": {
          "transfer": false,
          "stackable": "none",
          "specialDuration": [],
          "macroRepeat": "none"
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "hostile": false,
          "onlyOnce": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        }
      },
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "0"
        },
        {
          "key": "ATL.brightLight",
          "mode": 4,
          "value": "10",
          "priority": "20"
        },
        {
          "key": "ATL.dimLight",
          "mode": 2,
          "value": "20",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/protect-red-3.jpg",
      "label": "Fire Shield",
      "tint": null,
      "transfer": false,
      "selectedKey": [
        "macro.itemMacro",
        "ATL.brightLight",
        "ATL.dimLight"
      ]
    }
  ],
  "flags": {
    "dynamiceffects": {
      "equipActive": true,
      "alwaysActive": false,
      "effects": [
        {
          "modSpecKey": "macro.execute",
          "value": "FireShield @target",
          "mode": "+",
          "targetSpecific": false,
          "id": 1,
          "itemId": "QTP4gLcjbhZ2khVy",
          "active": true,
          "_targets": []
        }
      ]
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Fire Shield",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Fire_Shield.0.3.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implments Fire Shield!\n * \n * 04/11/22 0.1 Creation of Macro\n * 12/07/22 0.2 change ui.notification & ui.notfications (typo) to jez.badNews calls\n * 12/13/22 0.3 Update logging and set a target requirement for the temp item\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst VFX_NAME = `${MACRO}-${aToken.id}`\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"on\") await doOn({ traceLvl: TL });                     // DAE Application\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n\n//-----------------------------------------------------------------------------------------------------------------------------------\n//\n\n\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set On\n * This runs on actor that has the affected applied to it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOn(options = {}) {\n    const FUNCNAME = \"doOn(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    await jez.deleteItems(\"Fire Shield (Hot)\", \"weapon\", aActor);\n    await jez.deleteItems(\"Fire Shield (Cold)\", \"weapon\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Pop the dialog to select shield type\n    //\n    new Dialog({\n        title: \"Hot or Cold Shield\",\n        buttons: {\n            one: {\n                label: \"Hot\",\n                callback: async () => {\n                    runVFX(aToken, \"hot\")           // Launch the VFX\n                    await createTempItem(aToken, \"hot\")   // Create the temporary item\n                    await setResistance(aToken, \"cold\")   // Set appropriate resistance\n                }\n            },\n            two: {\n                label: \"Cold\",\n                callback: async () => {\n                    runVFX(aToken, \"cold\")          // Launch the VFX\n                    await createTempItem(aToken, \"cold\")  // Create the temporary item\n                    await setResistance(aToken, \"fire\")   // Set appropriate resistance\n                }\n            },\n        }\n    }).render(true);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Execute the removal of buff steps\n    // TODO: Resistance removal is a problem if actor was already resistant\n    //\n    Sequencer.EffectManager.endEffects({ name: VFX_NAME, object: aToken }); // End VFX\n    await jez.deleteItems(\"Fire Shield (Hot)\", \"weapon\", aActor);\n    await jez.deleteItems(\"Fire Shield (Cold)\", \"weapon\", aActor);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Create and post removal of item message\n    //\n    msg = `Fire Shield has been removed from ${aToken.name}'s inventory.`\n    jez.postMessage({ color: jez.randomDarkColor(), fSize: 13, icon: aToken.data.img, msg: msg, title: `Fire Shield Removed`, \n        token: aToken })\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Comments, perhaps\n    //\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Set resistance based on parameters, modify existing effect to include appropriate resistance\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function setResistance(token5e, flavor, options = {}) {\n    const FUNCNAME = \"setResistance(token5e, flavor, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"token5e\", token5e, \"flavor\", flavor, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(100)\n    let effect = await token5e.actor.effects.find(i => i.data.label === \"Fire Shield\");\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect for resistance.\n    //\n    effect.data.changes.push({ key: `data.traits.dr.value`, mode: jez.ADD, value: flavor, priority: 20 })\n    //-------------------------------------------------------------------------------------------------------------------------------    -\n    // Define the desired modification to existing icon (image)\n    //\n    if (flavor === \"fire\") effect.data.icon = 'systems/dnd5e/icons/spells/protect-blue-3.jpg'\n    if (flavor === \"cold\") effect.data.icon = 'systems/dnd5e/icons/spells/protect-orange-3.jpg'\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const RESULT = await effect.update({\n        'changes': effect.data.changes,\n        'icon': effect.data.icon\n    });\n    if (RESULT) if (TL>1) jez.trace(`${TAG} Active Effect 'Fire Shield' updated!`, RESULT);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // DAE Flag version that could end up removal natural immunity from caster, kept \n    // because it seems an interesting exercise.\n    //\n    //let resistances = duplicate(token5e.actor.data.data.traits.dr.value);\n    //if (TL>1) jez.trace(`${TAG} resistances`,resistances)\n    //resistances.push(flavor);\n    //if (TL>1) jez.trace(`${TAG} resistances`,resistances)\n    //if (TL>1) jez.trace(`${TAG} 1. token5e.actor.data.data.traits.dr`, token5e.actor.data.data.traits.dr)\n    //await token5e.actor.update({ \"data.traits.dr.value\": resistances });\n    //if (TL>1) jez.trace(`${TAG} 2. token5e.actor.data.data.traits.dr`, token5e.actor.data.data.traits.dr)\n    //await DAE.setFlag(token5e, 'FireShield', flavor);\n    //ChatMessage.create({ content: `${aToken.name} gains resistance to cold` });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Build the temporary item\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function createTempItem(token5e, flavor, options = {}) {\n    const FUNCNAME = \"createTempItem(token5e, flavor, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"token5e\", token5e, \"flavor\", flavor, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    await token5e.actor.createEmbeddedDocuments(\"Item\", [defineItem(flavor)])\n    if (!(flavor === \"cold\" || flavor === \"hot\")) {\n        jez.badNews(`Parameter passed to defineItem(flavor), '${flavor},' is not supported.`, \"e\")\n        return (false)\n    }\n    let damageType = \"cold\"\n    if (flavor === \"cold\") damageType = \"fire\";\n    let itemName = `Fire Shield (${flavor})`\n    msg = `${itemName}, has been added to ${token5e.name}'s inventory.`\n    jez.badNews(msg, \"i\");\n    msg += ` Use this item every time ${token5e.name} is hit by a melee attack from adjacent space.\n    <br><br>${token5e.name} is now resistant to ${damageType} damage.`\n    jez.postMessage({\n        color: jez.randomDarkColor(), fSize: 13, icon: token5e.data.img,\n        msg: msg, title: `Fire Shield Added`, token: token5e\n    })\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Return an object describing the temporary item to be created.\n * \n * Object will include a dynamically defined ItemMacro\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction defineItem(flavor, options = {}) {\n    const FUNCNAME = \"defineItem(flavor, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"flavor\", flavor, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!(flavor === \"cold\" || flavor === \"hot\")) \n        return jez.badNews(`Parameter passed to defineItem(flavor), '${flavor},' is not supported.`, \"e\")\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let color = \"orange\"\n    let damageType = \"fire\"\n    if (flavor === \"cold\") {\n        color = \"blue\"\n        damageType = \"cold\"\n    }\n    if (TL>1) jez.trace(`${TAG} flavor: ${flavor}`)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Set string with description to be included on the temp item.\n    //\n    const DESC = `<p>Everytime a creature within 5 feet of you hits you with a melee Attack:</p>\n    <ol>\n    <li>Target the offender,</li>\n    <li>Trigger this ability.</li>\n    </ol>\n    <p>The attacker will take damage from your Fire Shield (unless immune).</p>`\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Set string for itemMacro\n    //\n    let itemMacro = `// This macro runs VFX for Fire Shield\nlet color = \"orange\"\nconst IMAGE = args[0]?.item.img.toLowerCase()\nif(IMAGE.includes(\"blue\")) color = \"blue\"\nnew Sequence()\n    .effect()\n        .file(\\`jb2a.fire_bolt.\\${color}\\`)\n        .atLocation(canvas.tokens.get(args[0].tokenId))\n        .stretchTo(args[0].targets[0])\n    .play()`\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Return the object that defines the temporary inventory item\n    //\n    let effectName = `Fire Shield (${flavor[0].toUpperCase() + flavor.slice(1)})`\n    return {\n        \"name\": effectName,\n        \"type\": \"weapon\",\n        \"img\": `systems/dnd5e/icons/spells/protect-${color}-3.jpg`,\n        \"flags\": {\n            \"midi-qol\": {\n                \"onUseMacroName\": \"ItemMacro\"\n            },\n            \"itemacro\": {\n                \"macro\": {\n                    \"_data\": {\n                        \"name\": effectName,\n                        \"type\": \"script\",\n                        \"scope\": \"global\",\n                        \"command\": itemMacro,\n                    },\n                    \"data\": {\n                        \"name\": effectName,\n                        \"type\": \"script\",\n                        \"scope\": \"global\",\n                        \"command\": itemMacro,\n                        //\"author\": \"feceaHtk8xrriPzY\"\n                    }\n                }\n            }\n        },\n        \"data\": {\n            \"source\": \"Fire Shield Spell\",\n            \"description\": {\n                \"value\": DESC\n            },\n            \"activation\": {\n                \"type\": \"special\",\n                \"cost\": 0,\n                \"condition\": \"whenever a creature within 5 feet of you hits you with a melee Attack\"\n            },\n            \"equipped\": \"true\",\n            \"actionType\": \"other\",\n            \"damage\": {\n                \"parts\": [\n                    [\n                        \"2d8\",\n                        damageType\n                    ]\n                ]\n            },\n            target: {\n                type: 'creature',\n                value: '1'\n            },\n            \"weaponType\": \"natural\"\n        },\n        \"effects\": []\n    }\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Startup the VFX on the token\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction runVFX(token5e, flavor, options = {}) {\n    const FUNCNAME = \"runVFX(token5e, flavor, options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"token5e\", token5e, \"flavor\", flavor, \"options\", options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    if (!(flavor === \"cold\" || flavor === \"hot\")) {\n        jez.badNews(`Flavor parm in runVFX(token5e, flavor), '${flavor},' is bad.`, \"e\")\n        return (false)\n    }\n    let color = \"yellow\"\n    let vfxLoop = \"jb2a.wall_of_fire.ring.yellow\"\n    if (flavor === \"cold\") {\n        color = \"blue\"\n        vfxLoop = \"jb2a.wall_of_fire.ring.blue\"\n    }\n    jez.runRuneVFX(token5e, jez.getSpellSchool(aItem), color)\n    if (TL>1) jez.trace(`${TAG} vfxLoop`, vfxLoop)\n    new Sequence()\n        .effect()\n        .file(vfxLoop)\n        .attachTo(token5e)\n        .scaleToObject(1.25)\n        .opacity(1)\n        .fadeIn(1000)\n        .fadeOut(1000)\n        .belowTokens(true)\n        .persist()\n        .name(VFX_NAME)\n        .play()\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "",
      "effectActivation": false,
      "forceCEOn": false
    },
    "core": {
      "sourceId": "Compendium.Dynamic-Effects-SRD.DAE SRD Spells.xedFUGushERJ3TFL"
    },
    "autoanimations": {
      "version": 4,
      "killAnim": false,
      "options": {
        "ammo": false
      },
      "override": false,
      "autoOverride": {
        "enable": false,
        "variant": "",
        "color": "",
        "endEffect": "outro_explode",
        "scale": null,
        "persistent": false
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animLevel": false,
      "animType": "t1"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}