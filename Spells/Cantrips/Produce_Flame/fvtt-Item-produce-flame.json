{
  "name": "Produce Flame",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/explosion-orange-2.jpg",
  "data": {
    "description": {
      "value": "<p>A flickering flame appears in your hand. The flame remains there for the duration and harms neither you nor your equipment. The flame sheds bright light in a 10-foot radius and dim light for an additional 10 feet. The spell ends if you dismiss it as an action or if you cast it again.</p>\n<p>You can also attack with the flame, although doing so ends the spell. When you cast this spell, or as an <strong>action on a later turn</strong>, you can hurl the flame at a creature within 30 feet of you. Make a ranged spell attack. On a hit, the target takes 1d8 fire damage.</p>\n<p>This spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8).</p>\n<hr />\n<p><strong>FoundryVTT</strong>: A temporary spell will be added enabling the attack element of this spell.</p>",
      "chat": "<p>A flickering flame appears in your hand. The flame remains there for the duration and harms neither you nor your equipment. The flame sheds bright light in a 10-foot radius and dim light for an additional 10 feet. The spell ends if you dismiss it as an action or if you cast it again.</p>\n<p>You can also attack with the flame, although doing so ends the spell. When you cast this spell, or as an action on a later turn, you can hurl the flame at a creature within 30 feet of you. Make a ranged spell attack. On a hit, the target takes 1d8 fire damage.</p>\n<p>This spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8).</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 269",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 10,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "NJ2XnJxdfPzbvSCx",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        },
        {
          "key": "ATL.light.bright",
          "mode": 5,
          "value": "10",
          "priority": "20"
        },
        {
          "key": "ATL.light.dim",
          "mode": 5,
          "value": "20",
          "priority": "20"
        },
        {
          "key": "ATL.light.color",
          "mode": 5,
          "value": "#ff7b00",
          "priority": "50"
        },
        {
          "key": "ATL.light.alpha",
          "mode": 5,
          "value": "0.05",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/explosion-orange-2.jpg",
      "label": "Produce Flame",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false,
          "selfTarget": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "radius": null,
          "aura": "None",
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false,
          "displayTemp": false
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        }
      },
      "tint": "",
      "selectedKey": [
        "macro.itemMacro",
        "ATL.light.bright",
        "ATL.light.dim",
        "ATL.light.color",
        "ATL.light.alpha"
      ]
    }
  ],
  "flags": {
    "ddbimporter": {
      "id": 138596,
      "definitionId": 2217,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 269,
          "sourceType": 1
        }
      ],
      "tags": [
        "Creation",
        "Damage"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-darklands-spells.NZzaXQ8qUZdmzXJB"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Produce Flame",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Produce_Flame.0.4.js\"\n/*****************************************************************************************\n * Produce Flame!\n * \n * Originally from Crymic's macro that was themed after Kandashi's create item macro.  It \n * now uses a helper macro from the Items directory that is copied to the actor.\n * \n * 06/06/22 0.2 Conversion of Crymic code to my style (sort of) and FoundryVTT 9.x \n * 11/21/22 0.4 Attach flame animation with .attachTo(target) not .atLocation(target) &\n *              Update the associated DAE effect to handle lighting\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 3;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst TEMPLATE_NAME = \"%%Flame%%\"\nconst TEMP_SPELL_NAME = `${aToken.name}'s Flame`\nconst VFX_NAME = `${aToken.name} Flame`\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff({ traceLvl: TL });            // DAE removal\nif (args[0] === \"on\") await doOn({ traceLvl: TL });              // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });   // Midi ItemMacro On Use\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\nfunction postResults(msg) {\n  const FUNCNAME = \"postResults(msg)\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  if (TL > 1) jez.trace(`${TAG} --- Starting ---`);\n  if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n  //-----------------------------------------------------------------------------------------------\n  let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n  jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n  if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse(options = {}) {\n  const FUNCNAME = \"doOnUse(options={})\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  const TL = options.traceLvl ?? 0\n  if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n  if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n  await jez.wait(100)\n  //----------------------------------------------------------------------------------\n  msg = `<b>${aToken.name}</b> has produced a flame that emits light until thrown at a target, by \n  using temporary innate spell, \"<b>${TEMP_SPELL_NAME}</b>,\" which can be found in his/her spell book.`\n  postResults(msg)\n  if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n  return (true);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n ***************************************************************************************************/\nasync function doOn(options = {}) {\n  const FUNCNAME = \"doOn(options={})\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  const TL = options.traceLvl ?? 0\n  if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n  //-----------------------------------------------------------------------------------------------\n  // Delete all temp flame spells\n  //\n  await jez.deleteItems(TEMP_SPELL_NAME, \"spell\", aToken);\n  //-----------------------------------------------------------------------------------------------\n  // Start the VFX on the caster\n  //\n  runVFX(aToken)\n  //-----------------------------------------------------------------------------------------------\n  // Apply lighting update to the caster -- This seems to have stopped working at FoundryVTT 9.x\n  //\n  // if (TL > 2) jez.trace(`${TAG} Launching update of ${aToken.name} lighting`);\n  // let rc = await aToken.document.update({\n  //   light: {\n  //     \"dimLight\": 20,\n  //     \"brightLight\": 10,\n  //     \"lightAlpha\": 0.25,\n  //     \"lightColor\": \"#f7c597\",\n  //     lightAnimation: {\n  //       intensity: 4,\n  //       speed: 5,\n  //       type: \"torch\"\n  //     }\n  //   }\n  // });\n  // if (TL > 2) jez.trace(`${TAG} Update returned`, rc);\n  //-----------------------------------------------------------------------------------------------\n  // Add new temp spell item\n  //\n  if (TL > 2) jez.trace(`${TAG} Adding ${TEMPLATE_NAME} to ${aToken.name}`);\n  await jez.itemAddToActor(aToken, TEMPLATE_NAME)\n  let itemUpdate = {\n    name: TEMP_SPELL_NAME,\n  }\n  await jez.itemUpdateOnActor(aToken, TEMPLATE_NAME, itemUpdate, \"spell\")\n  //-----------------------------------------------------------------------------------------------\n  // Post completion message\n  //\n  msg = `Added One Time Use Spell: \"${TEMP_SPELL_NAME}\"`      // Set notification message\n  ui.notifications.info(msg);\n  if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n  return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\nasync function doOff(options = {}) {\n  const FUNCNAME = \"doOff(options={})\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  const TL = options.traceLvl ?? 0\n  if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n  if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n  //-----------------------------------------------------------------------------------------------\n  // Remove alterations to token -- This seems to have stopped working at FoundryVTT 9.x\n  //   await aToken.document.update({\n  //     \"dimLight\": 0,\n  //     \"brightLight\": 0,\n  //     \"lightColor\": \"\"\n  //   });\n  await jez.deleteItems(TEMP_SPELL_NAME, \"spell\", aToken);\n  if (TL > 1) jez.trace(`${TAG} end VFX_NAME`, VFX_NAME)\n  Sequencer.EffectManager.endEffects({ name: VFX_NAME });\n  if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n  return;\n}\n  /***************************************************************************************************\n   * Run VFX\n   ***************************************************************************************************/\n  function runVFX(target) {\n    let color = \"\"\n    const IMAGE = aItem.img.toLowerCase()\n    if (IMAGE.includes(\"blue\")) color = \"blue\"\n    else if (IMAGE.includes(\"green\")) color = \"green\"\n    else if (IMAGE.includes(\"orange\")) color = \"orange\"\n    else if (IMAGE.includes(\"purple\")) color = \"purple\"\n    else if (IMAGE.includes(\"magenta\")) color = \"purple\"\n    else if (IMAGE.includes(\"sky\")) color = \"blue\"\n    else if (IMAGE.includes(\"royal\")) color = \"green\"\n    if (!color) color = \"orange\"\n\n    new Sequence()\n      .effect()\n      //.file(\"jb2a.fire_bolt.orange\")\n      .file(`jb2a.flames.01.${color}`)\n      //.duration(10000)\n      .persist()\n      .opacity(0.60)\n      .name(VFX_NAME)\n      // .atLocation(target)\n      .attachTo(target)\n      .play()\n  }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}