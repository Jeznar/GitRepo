{
  "name": "Minor Illusion",
  "type": "spell",
  "img": "icons/magic/control/hypnosis-mesmerism-eye.webp",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% creates a sound or an image of an object within range that lasts for the duration. The illusion also ends if you dismiss it as an action or cast this spell again.</p>\n<p><strong>Sound: </strong>volume can range from a whisper to a scream. It can be your voice, someone else’s voice, a lion’s roar, a beating of drums, or any other sound you choose. The sound continues unabated throughout the duration, or you can make discrete sounds at different times before the spell ends.</p>\n<p><strong>Image:</strong> of an object—such as a chair, muddy footprints, or a small chest—it must be no larger than a 5-foot cube. The image can’t create sound, light, smell, or any other sensory effect. Physical interaction with the image reveals it to be an illusion, because things can pass through it.</p>\n<p>If a creature uses its <strong>action to examine</strong> the sound or image, the creature can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the illusion becomes faint to the creature.</p>\n<hr />\n<p><strong>FoundryVTT: </strong>This item will place a tile containing an illusion rune to mark the place the illusion is created.  It does not attempt to show what the caster created.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 5,
      "width": null,
      "units": "ft",
      "type": "cube"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "ill",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A bit of fleece",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.OTJlMmIzZDY3OTM1"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Minor Illusion",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Minor_Illusion.0.2.js\"\n/*****************************************************************************************\n * Run a three staget Illusion rune VFX in the 5' square tile created when the spell was targeted. \n * Delete that VFX on spell completion or removal. \n * \n * 06/01/22 0.1 Creation of Macro\n * 07/01/22 0.2 Swap in calls to jez.tileCreate and jez.tileDelete\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlet trcLvl = 1;\njez.trc(2,trcLvl,`=== Starting === ${MACRONAME} ===`);\nfor (let i = 0; i < args.length; i++) jez.trc(3,trcLvl,`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.trc(2,trcLvl,`=== Finishing === ${MACRONAME} ===`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.trc(3,trcLvl,msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    if (args[1] === \"Tile\") {\n        //-----------------------------------------------------------------------------------------------\n        // Delete the tile we just built with library function. \n        //\n        jez.tileDelete(args[2])\n    } \n    else if (args[1] === \"Effect\") {\n        let existingEffect = await aToken.actor.effects.find(i => i.data.label === args[2]);\n        if (existingEffect) await existingEffect.delete()\n    } else {\n        msg = `Some bad logic happened in ${MACRO}. Args[1] = ${args[1]}. Please tell Joe.`\n        return jez.badNews(msg,\"error\")\n    }\n    jez.trc(2,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} ---`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    // ---------------------------------------------------------------------------------------\n    // Place a nifty tile... \n    //\n    const SQUARES_LENGTH = 1\n    const SQUARES_HEIGHT = 1\n    // Obtain the ID of the template created by the calling item\n    const TEMPLATE_ID = args[0].templateId\n    // Call function to place the tile and grab the returned ID\n    const VFX_FILE = `modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/IllusionRuneLoop_01_Regular_${jez.getRandomRuneColor()}_400x400.webm`\n    let newTileId = await placeTileVFX(TEMPLATE_ID, VFX_FILE, SQUARES_LENGTH, SQUARES_HEIGHT);\n    jez.trc(3,trcLvl,\"newTileId\", newTileId)\n    // Grab the tile's TileDocument object from the scene\n    let fetchedTile = await canvas.scene.tiles.get(newTileId)\n    jez.trc(3,trcLvl,`fetchedTile ${fetchedTile.id}`, fetchedTile)\n    // Format and result message \n    msg = `Placed Tile ID: ${fetchedTile.id}. <br>Image file used as source:<br>${fetchedTile.data.img}`;\n    jez.trc(3,trcLvl,\"msg\", msg);\n    // ---------------------------------------------------------------------------------------\n    // If a previous casting is still active, delete it before creating a new one.\n    //\n    let existingEffect = aActor.effects.find(ef => ef.data.label === aItem.name)\n    if (existingEffect) await existingEffect.delete();\n    // ---------------------------------------------------------------------------------------\n    // Add an effect to the active token \n    //\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let effectData = {\n        label: aItem.name,\n        icon: aItem.img,\n        origin: aToken.uuid,\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { dae: { itemData: aItem } },\n        changes: [\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `Tile ${fetchedTile.id}`, priority: 20 },\n        ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: [effectData] });\n    msg = `<b>${aToken.name}</b> creates a sound or an image of an object within range that lasts for the \n    duration. Effects are not automated.`\n    postResults(msg)\n    // ---------------------------------------------------------------------------------------\n    // Modify the concentrating effect to trigger removal of the associated effect\n    //\n    //modConcentratingEffect(aToken, aItem.name)\n    // ---------------------------------------------------------------------------------------\n    // That's all folks...\n    //\n    jez.trc(2,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} ---`,true);\n    return (true);\n}\n/***************************************************************************************************\n * Pop a VFX Tile where the template was and return the ID of the tile\n ***************************************************************************************************/\nasync function placeTileVFX(TEMPLATE_ID, vfxFile, tilesWide, tilesHigh) {\n    const FUNCNAME = \"placeTileVFX(TEMPLATE_ID, vfxFile, tilesWide, tilesHigh)\";\n    jez.trc(2, trcLvl, `--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(3, trcLvl, \"Parameters\", \"TEMPLATE_ID\", TEMPLATE_ID, \"vfxFile\", vfxFile, \"tilesWide\", tilesWide, \"tilesHigh\", tilesHigh)\n    // Grab the size of grid in pixels per square\n    const GRID_SIZE = canvas.scene.data.grid;\n    // Search for the MeasuredTemplate that should have been created by the calling item\n    let template = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    // Delete the template to clean up the scene\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    // Place the tile with an embedded VFX\n    let tileProps = {\n        _id: game.scenes.current.id,    // ID of current scene to hold tile\n        x: template.center.x,           // X coordinate is poorly understood\n        y: template.center.y,           // Y coordinate is center of the template\n        img: vfxFile,\n        width: GRID_SIZE * tilesWide,   // \n        height: GRID_SIZE * tilesHigh   // \n    };\n    //-----------------------------------------------------------------------------------------------\n    // Call library function to create the new tile, returning the id. \n    //\n    return await jez.tileCreate(tileProps)\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}