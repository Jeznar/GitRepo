{
  "name": "Minor Illusion",
  "type": "spell",
  "img": "icons/magic/control/hypnosis-mesmerism-eye.webp",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% creates a sound or an image of an object within range that lasts for the duration. The illusion also ends if you dismiss it as an action or cast this spell again.</p>\n<p><strong>Sound: </strong>volume can range from a whisper to a scream. It can be your voice, someone else&rsquo;s voice, a lion&rsquo;s roar, a beating of drums, or any other sound you choose. The sound continues unabated throughout the duration, or you can make discrete sounds at different times before the spell ends.</p>\n<p><strong>Image:</strong>&nbsp;of an object&mdash;such as a chair, muddy footprints, or a small chest&mdash;it must be no larger than a 5-foot cube. The image can&rsquo;t create sound, light, smell, or any other sensory effect. Physical interaction with the image reveals it to be an illusion, because things can pass through it.</p>\n<p>If a creature uses its <strong>action to examine</strong> the sound or image, the creature can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the illusion becomes faint to the creature.</p>\n<hr />\n<p><strong>FoundryVTT:&nbsp;</strong>This item will place a tile containing an illusion rune to mark the place the illusion is created.&nbsp; It does not attempt to show what the caster created.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 5,
      "width": null,
      "units": "ft",
      "type": "cube"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "ill",
    "components": {
      "value": "",
      "vocal": false,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "A bit of fleece",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.OTJlMmIzZDY3OTM1"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Minor Illusion",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Minor_Illusion.0.1.js\"\n/*****************************************************************************************\n * Run a three staget Illusion rune VFX in the 5' square tile created when the spell was targeted. \n * Delete that VFX on spell completion or removal. \n * \n * 06/01/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlet trcLvl = 1;\njez.trc(2,trcLvl,`=== Starting === ${MACRONAME} ===`);\nfor (let i = 0; i < args.length; i++) jez.trc(3,trcLvl,`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.trc(2,trcLvl,`=== Finishing === ${MACRONAME} ===`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.trc(3,trcLvl,msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    if (args[1] === \"Tile\") {\n        const TILE_ID = args[2]\n        jez.trc(3,trcLvl,`Delete the VFX tile`, TILE_ID)\n        // Following line throws a permission error for non-GM acountnts running this code.\n        //   Error: User Jon M. lacks permission to delete Tile [<an ID>] in parent Scene [<an ID>]\n        // await canvas.scene.deleteEmbeddedDocuments(\"Tile\", [TILE_ID])\n        await jez.deleteEmbeddedDocs(\"Tile\", [TILE_ID])  \n        jez.trc(3,trcLvl,`Deleted Tile ${TILE_ID}`)\n    } \n    else if (args[1] === \"Effect\") {\n        let existingEffect = await aToken.actor.effects.find(i => i.data.label === args[2]);\n        if (existingEffect) await existingEffect.delete()\n    } else {\n        msg = `Some bad logic happened in ${MACRO}. Args[1] = ${args[1]}. Please tell Joe.`\n        return jez.badNews(msg,\"error\")\n    }\n    jez.trc(2,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} ---`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    // ---------------------------------------------------------------------------------------\n    // Place a nifty tile... \n    //\n    const SQUARES_LENGTH = 1\n    const SQUARES_HEIGHT = 1\n    // Obtain the ID of the template created by the calling item\n    const TEMPLATE_ID = args[0].templateId\n    // Call function to place the tile and grab the returned ID\n    const VFX_FILE = `modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/IllusionRuneLoop_01_Regular_${jez.getRandomRuneColor()}_400x400.webm`\n    let newTileId = await placeTileVFX(TEMPLATE_ID, VFX_FILE, SQUARES_LENGTH, SQUARES_HEIGHT);\n    jez.trc(3,trcLvl,\"newTileId\", newTileId)\n    // Grab the tile's TileDocument object from the scene\n    let fetchedTile = await canvas.scene.tiles.get(newTileId)\n    jez.trc(3,trcLvl,`fetchedTile ${fetchedTile.id}`, fetchedTile)\n    // Format and result message \n    msg = `Placed Tile ID: ${fetchedTile.id}. <br>Image file used as source:<br>${fetchedTile.data.img}`;\n    jez.trc(3,trcLvl,\"msg\", msg);\n    // ---------------------------------------------------------------------------------------\n    // If a previous casting is still active, delete it before creating a new one.\n    //\n    let existingEffect = aActor.effects.find(ef => ef.data.label === aItem.name)\n    if (existingEffect) await existingEffect.delete();\n    // ---------------------------------------------------------------------------------------\n    // Add an effect to the active token \n    //\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let effectData = {\n        label: aItem.name,\n        icon: aItem.img,\n        origin: aToken.uuid,\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { dae: { itemData: aItem } },\n        changes: [\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `Tile ${fetchedTile.id}`, priority: 20 },\n        ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: aActor.uuid, effects: [effectData] });\n    msg = `<b>${aToken.name}</b> creates a sound or an image of an object within range that lasts for the \n    duration. Effects are not automated.`\n    postResults(msg)\n    // ---------------------------------------------------------------------------------------\n    // Modify the concentrating effect to trigger removal of the associated effect\n    //\n    //modConcentratingEffect(aToken, aItem.name)\n    // ---------------------------------------------------------------------------------------\n    // That's all folks...\n    //\n    jez.trc(2,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} ---`,true);\n    return (true);\n}\n/***************************************************************************************************\n * Pop a VFX Tile where the template was and return the ID of the tile\n ***************************************************************************************************/\nasync function placeTileVFX(TEMPLATE_ID, vfxFile, tilesWide, tilesHigh) {\n    const FUNCNAME = \"placeTileVFX(TEMPLATE_ID, vfxFile, tilesWide, tilesHigh)\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(3,trcLvl,\"Parameters\",\"TEMPLATE_ID\",TEMPLATE_ID,\"vfxFile\",vfxFile,\"tilesWide\",tilesWide,\"tilesHigh\",tilesHigh)\n    // Grab the size of grid in pixels per square\n    const GRID_SIZE = canvas.scene.data.grid;\n    // Search for the MeasuredTemplate that should have been created by the calling item\n    let template = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    // Delete the template to clean up the scene\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    // Place the tile with an embedded VFX\n    let tileProps = {\n        _id: game.scenes.current.id,                        // ID of current scene to hold tile\n        x: template.center.x, //- GRID_SIZE * tilesWide / 2,   // X coordinate is poorly understood\n        y: template.center.y, //- GRID_SIZE * tilesHigh / 2,   // Y coordinate is center of the template\n        img: vfxFile,\n        width: GRID_SIZE * tilesWide,   // VFX should occupy 2 tiles across\n        height: GRID_SIZE * tilesHigh   // ditto\n    };\n    //-----------------------------------------------------------------------------------------------\n    // Build an array of tile ids in the current scene so we can figure out what tile was just added\n    //\n    let existingTiles = []\n    for (tile of game.scenes.current.tiles.contents) {\n        jez.trc(4,trcLvl,\"tile ID\", tile.id)\n        existingTiles.push(tile.id)\n    }\n    jez.trc(3,trcLvl,\"Value of existingTiles\",existingTiles)\n    // let newTile = await Tile.create(tileProps)   // Depricated \n    // Following line throws a permission error for non-GM acountnts running this code.\n    //   Uncaught (in promise) Error: User Jon M. lacks permission to create Tile [v0VARMGmr4fCaTLr] in parent Scene [MzEyYTVkOTQ4NmZk]\n    // let newTile = await game.scenes.current.createEmbeddedDocuments(\"Tile\", [tileProps]);  // FoundryVTT 9.x \n    let newTile = await jez.createEmbeddedDocs(\"Tile\", [tileProps])  \n    jez.trc(3, \"jez.createEmbeddedDocs returned\", newTile);\n    if (newTile) {\n        let returnValue = newTile[0].data._id\n        jez.trc(2,`--- Finished --- ${MACRONAME} ${FUNCNAME} --- Generated:`,returnValue);\n        return returnValue; // If newTile is defined, return the id.\n    }\n    else {   // newTile will be undefined for players, so need to fish for a tile ID\n\n        let newTiles = []\n        let gameTiles = null\n        let i\n        for (i = 1; i < 20; i++) {\n            let delay = 5\n            await jez.wait(delay)   // wait for a very short time and see if a new tile has appeared\n            jez.trc(3,trcLvl,`Seeking new tile, try ${i} at ${delay*i} ms after return`)\n            gameTiles = game.scenes.current.tiles.contents\n            if (gameTiles.length > existingTiles.length) break\n        }\n        if (i === 40) return jez.badNews(`Could not find new tile, sorry about that`,\"warn\")\n        jez.trc(3,trcLvl,\"Seemingly, the new tile has id\",gameTiles[gameTiles.length - 1].id)\n        let returnValue = gameTiles[gameTiles.length - 1].id\n        jez.trc(2,trcLvl,`--- Finished --- ${MACRONAME} ${FUNCNAME} --- Scraped:`,returnValue);\n        //let gameTiles[gameTiles.length - 1].id = gameTiles[gameTiles.length - 1].id\n        return returnValue\n    }\n// }\n// /***************************************************************************************************\n//  * Run a 3 part spell rune VFX on indicated token  with indicated rune, Color, scale, and opacity\n//  * may be optionally specified.\n//  * \n//  * If called with an array of target tokens, it will recursively apply the VFX to each token \n//  * \n//  * Typical calls: \n//  *  jez.runRuneVFX(tToken, jez.getSpellSchool(aItem))\n//  *  jez.runRuneVFX(args[0].targets, jez.getSpellSchool(aItem), jez.getRandomRuneColor())\n//  ***************************************************************************************************/\n//  function runRuneVFX(target, school, color, scale, opacity) {\n//     school = school || \"illusion\"               // default school is illusion \\_(ツ)_/\n//     color = color || jez.getRandomRuneColor()   // If color not provided get a random one\n//     scale = scale || 1.0                        // If scale not provided use 1.0\n//     opacity = opacity || 1.0                    // If opacity not provided use 1.0\n\n    \n//     jez.trc(4,trcLvl,\"runRuneVFX(target, school, color, scale, opacity)\",\"target\",target,\"school\",school,\"scale\",scale,\"opacity\",opacity)\n//     if (Array.isArray(target)) {                // If function called with array, do recursive calls\n//         for (let i = 0; i < target.length; i++) jez.runRuneVFX(target[i], school, color, scale, opacity);\n//         return (true)                           // Stop this invocation after recursive calls\n//     }\n//     //-----------------------------------------------------------------------------------------------\n//     // Build names of video files needed\n//     // \n//     const INTRO = `jb2a.magic_signs.rune.${school}.intro.${color}`\n//     const BODY = `jb2a.magic_signs.rune.${school}.loop.${color}`\n//     const OUTRO = `jb2a.magic_signs.rune.${school}.outro.${color}`\n//     //-----------------------------------------------------------------------------------------------\n//     // Play the VFX\n//     // \n//     new Sequence()\n//         .effect()\n//         .file(INTRO)\n//         .atLocation(target)\n//         .scaleToObject(scale)\n//         .opacity(opacity)\n//         .waitUntilFinished(-500)\n//         .effect()\n//         .file(BODY)\n//         .atLocation(target)\n//         .scaleToObject(scale)\n//         .opacity(opacity)\n//         //.duration(3000)\n//         .persist()\n//         .waitUntilFinished(-500)\n//         .effect()\n//         .file(OUTRO)\n//         .atLocation(target)\n//         .scaleToObject(scale)\n//         .opacity(opacity)\n//         .play();\n// }\n/***************************************************************************************************\n * Modify existing concentration effect to trigger removal of the associated DAE effect on caster\n ***************************************************************************************************/\n// async function modConcentratingEffect(tToken, label) {\n//     const EFFECT = \"Concentrating\"\n//     //----------------------------------------------------------------------------------------------\n//     // Seach the token to find the just added effect\n//     //\n//     await jez.wait(100)\n//     let effect = await tToken.actor.effects.find(i => i.data.label === EFFECT);\n//     //----------------------------------------------------------------------------------------------\n//     // Define the desired modification to existing effect. In this case, a world macro that will be\n//     // given arguments: VFX_Name and Token.id for all affected tokens\n//     //    \n//     effect.data.changes.push({ key: `macro.itemMacro`, mode: jez.CUSTOM, value: `Effect '${label}'`, priority: 20 })\n//     jez.log(`effect.data.changes`, effect.data.changes)\n//     //----------------------------------------------------------------------------------------------\n//     // Apply the modification to existing effect\n//     //\n//     const result = await effect.update({ 'changes': effect.data.changes });\n//     if (result) jez.log(`Active Effect ${EFFECT} updated!`, result);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}