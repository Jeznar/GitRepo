{
  "name": "IMSC_Create_Bonfire",
  "type": "script",
  "author": "ZjFlOWYxZjM5ZTZj",
  "img": "Icons_JGB/Misc/campfire.svg",
  "scope": "global",
  "command": "const MACRONAME = \"Create_Bonfire.0.1.js\"\n/*****************************************************************************************\n * Create Bonfire.\n * \n *   Description: Create a bonfire on ground that you can see within range. Until the \n *   spell ends, the magic bonfire fills a 5-foot cube. Any creature in the bonfire's \n *   space when you cast the spell must succeed on a Dexterity save or take 1d8 fire \n *   damage.\n * \n *   A creature must also make the saving throw when it moves into the bonfire's space \n *   for the first time on a turn or ends its turn there. \n * \n *   The bonfire ignites flammable objects in its area that aren't being worn or carried.\n * \n *   The spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), \n *   and 17th level (4d8).\n * \n * 05/05/22 0.1 Creation of Macro\n  *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`-------------------Starting ${MACRONAME}----------------------------------`)\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; \n    else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); \n    else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; \n    else aItem = lastArg.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst BONFIRE_ORIG_NAME = \"%Bonfire%\"\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff();             // DAE removal\n//if (args[0] === \"each\") doEach();\t\t\t      // DAE removal\njez.log(`-------------------Finishing ${MACRONAME}----------------------------------`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n     const FUNCNAME = \"doOnUse()\";\n     const SQ_WID = game.scenes.viewed.data.grid;\n     const SAVE_DC = aItem.data.save.dc;\n     jez.log(`---------Starting ${MACRONAME} ${FUNCNAME}----------------------`)\n     //-----------------------------------------------------------------------------------------\n     // Get the TEMPLATE object and delete the template.\n     //\n     const templateID = args[0].templateId\n     const TEMPLATE = canvas.templates.get(templateID).data\n     canvas.templates.get(templateID).document.delete()\n    //--------------------------------------------------------------------------------------\n    // Grab our character level and figure out what the damage dice should be\n    //\n    let charLevel = jez.getCharLevel(aToken)\n    let damageDice = \"1d8\"\n    if (charLevel >= 5)  damageDice = \"2d8\"\n    if (charLevel >= 11) damageDice = \"3d8\"\n    if (charLevel >= 17) damageDice = \"4d8\"\n    jez.log(\"Damage Dice\", damageDice)\n    //--------------------------------------------------------------------------------------\n    // Spawn in the Bonfire, catch its token.id, exit on failure to spawn\n    //\n    const BONFIRE_ID = await spawnBonfire({x:TEMPLATE.x+SQ_WID/2,y:TEMPLATE.y+SQ_WID/2}, \n        `${aToken.name}'s Bonfire`,damageDice)\n    if (!BONFIRE_ID) {\n        msg = `Bonfire could not be spawned.   ${BONFIRE_ORIG_NAME} must be available in <b>Actors \n        Directory</b>.<br><br>\n        Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (false);\n    }\n    //--------------------------------------------------------------------------------------\n    // Modify the concentrating effect to delete the Bonfire on termination\n    //\n    modConcentratingEffect(aToken, BONFIRE_ID)\n    //--------------------------------------------------------------------------------------\n    // Modify the existing on the bonfire to do appropriate damage\n    //\n    await jez.wait(100)\n    jez.log(\"BONFIRE_ID --->\", BONFIRE_ID)\n    let bonfireToken = canvas.tokens.placeables.find(ef => ef.id === BONFIRE_ID[0])\n    jez.log(\"bonfire token\", bonfireToken)\n    modExistingEffect(bonfireToken, damageDice, SAVE_DC)\n    //--------------------------------------------------------------------------------------\n    // \n    //\n    msg = `Any creature in the bonfire's space when it appears must succeed on a ${SAVE_DC}DC \n    DEX save or take ${damageDice} fire damage. A creature must also make a save when \n    it moves into the bonfire for the first time on a turn or ends its turn there.`\n    postResults(msg);\n    jez.log(\"--------------OnUse-----------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return (true);\n}\n/***************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************/\n  async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(\"--------------Off---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n    //--------------------------------------------------------------------------------------\n    // Delete the existing bonfire\n    //\n    let sceneId = game.scenes.viewed.id\n    let bonfireId = args[1]\n    warpgate.dismiss(bonfireId, sceneId)\n    jez.log(\"--------------Off---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n/***************************************************************************************************\n * Post the results to chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, {color:\"FireBrick\", fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Spawn the Bonfire into existance returning the UUID or null on failure\n ***************************************************************************************************/\nasync function spawnBonfire(center, newName, damageDice) {\n    //--------------------------------------------------------------------------------------\n    // Verify the Actor named BONFIRE_ORIG_NAME exists in Anctor Directory\n    //\n    if (!game.actors.getName(BONFIRE_ORIG_NAME)) {   // If bonfire not found, that's all folks\n        msg = `Could not find \"<b>${BONFIRE_ORIG_NAME}</b>\" in the <b>Actors Directory</b>. \n        <br><br>Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (null);\n    }\n    //--------------------------------------------------------------------------------------\n    // Define warpgate updates, options and callbacks \n    //\n    let updates = {\n        actor: {name: newName},    \n        token: {name: newName},\n        /*embedded: { // This didn't quite work for reasons unknown\n            ActiveEffect: {\n                \"Bonfire Damage Aura\": {\n                    flags: {\n                        ActiveAuras: {\n                            aura: \"All\",\n                            isAura: true,\n                            onlyOnce: true,\n                            radius: 2,\n                        },\n                    },\n                    label: 'Bonfire Damage Aura',\n                    icon: 'Icons_JGB/Misc/campfire.svg',\n                    changes: [{\n                        \"key\": \"macro.tokenMagic\",\n                        \"mode\": jez.CUSTOM,\n                        \"value\": \"Fire v2 (sparks)\",\n                        \"priority\": 30\n                    }, {\n                        \"key\": \"macro.execute\",\n                        \"value\": `Bonfire_Helper ${damageDice}`,\n                        \"mode\": jez.CUSTOM,\n                        \"priority\": 30\n                    }],\n                }\n            }\n        }*/\n    }\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n        pre: async (template) => {\n            preEffects(template);\n            await jez.wait(2000)\n        },\n        post: async (template) => {\n            postEffects(template);\n        }\n    };\n    //--------------------------------------------------------------------------------------\n    // Fire off warpgate \n    //\n    let bonfireId = await warpgate.spawnAt(center, BONFIRE_ORIG_NAME, updates, CALLBACKS, OPTIONS);\n    jez.log(\"bonfireId\", bonfireId)\n    return(bonfireId)\n}\n/***************************************************************************************************\n * Pre-Spawn VFX\n ***************************************************************************************************/\nasync function preEffects(template) {\n    jez.runRuneVFX(template, jez.getSpellSchool(aItem)) \n    return\n}\n/***************************************************************************************************\n * Post-Spawn VFX\n ***************************************************************************************************/\nasync function postEffects(template) { return }\n/***************************************************************************************************\n * Line connecting token to bonfire VFX\n ***************************************************************************************************/\n async function chainEffect(token1, token2) {\n    new Sequence()\n        .effect()\n        .file(\"jb2a.energy_beam.normal.blue.01\")\n        .atLocation(token1)\n        .stretchTo(token2)\n        .fadeIn(500)\n        .fadeOut(500)\n        .duration(2000)\n        .scale(1.0)\n        .opacity(1.0)\n    .play()\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call Remove_Effect_doOff on removal\n ***************************************************************************************************/\nasync function modConcentratingEffect(aToken, bonfireId) {\n    // Modify concentrating to delete the bonfire on concentration drop\n    //----------------------------------------------------------------------------------------------\n    // Make sure the world macro that is used to remove effect exists\n    //\n    const REMOVE_MACRO = \"IMSC_Create_Bonfire\"\n    const removeFunc = game.macros.getName(REMOVE_MACRO);\n    if (!removeFunc) {\n        ui.notifications.error(`Cannot locate ${REMOVE_MACRO} run as World Macro`);\n        return;\n    }\n    //----------------------------------------------------------------------------------------------\n    // Seach the casting token to find the just added concentration effect\n    //\n    await jez.wait(200)\n    let effect = await aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to concentartion effect. In this case, a macro that will be\n    // given argument: bonfireId\n    //    \n    effect.data.changes.push({key: `macro.execute`, mode: jez.CUSTOM, value:`${REMOVE_MACRO} ${bonfireId}`, priority: 20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect \"Concentrating\" updated!`, result);\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call Remove_Effect_doOff on removal\n ***************************************************************************************************/\n async function modExistingEffect(aToken, dDice, SAVE) {\n    // Modify concentrating to delete the bonfire on concentration drop\n    //----------------------------------------------------------------------------------------------\n    // Make sure the world macro that is used to remove effect exists\n    //\n    const MAC_NAME = \"Bonfire_Helper\"\n    const EXISTING_EFFECT = \"Bonfire Damage Aura\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the casting token to find the just added concentration effect\n    //\n    await jez.wait(200)\n    let effect = await aToken.actor.effects.find(i => i.data.label === EXISTING_EFFECT);\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to concentartion effect. In this case, a macro that will be\n    // given argument: bonfireId\n    //    \n    effect.data.changes.push({key: `macro.execute`, mode: jez.CUSTOM, \n        value:`${MAC_NAME} ${dDice} ${SAVE}`, priority: 20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect \"${EXISTING_EFFECT}\" updated!`, result);\n}",
  "flags": {
    "combat-utility-belt": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runAsGM": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}