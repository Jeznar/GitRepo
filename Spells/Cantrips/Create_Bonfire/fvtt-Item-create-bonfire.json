{
  "name": "Create Bonfire",
  "type": "spell",
  "img": "Icons_JGB/Misc/campfire.svg",
  "data": {
    "description": {
      "value": "<p>Create a bonfire on ground that you can see within range. Until the spell ends, the magic bonfire fills a <strong>5-foot cube</strong>. Any creature in the bonfire&rsquo;s space when you cast the spell must succeed on a <strong>Dexterity save or take 1d8 fire damage</strong>.</p>\n<p>A creature must also make the saving throw when it <strong>moves into the bonfire&rsquo;s space for the first time on a turn</strong> or <strong>ends its turn there</strong>.</p>\n<p>The bonfire ignites flammable objects in its area that aren&rsquo;t being worn or carried.</p>\n<p>The spell&rsquo;s damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8).</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Active Auras are use to automate damage.&nbsp; They don't do quite what RAW calls for. The following are known differences:</p>\n<ol>\n<li>Target in the space of a summoned bonfire is damaged at the start of its turn</li>\n<li>Target takes damage only when entering.&nbsp; If a token sits in the aura, it should be moved out and back in to trigger the appropriate damage.</li>\n</ol>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": 15,
      "scaling": "spell"
    },
    "level": 0,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "cantrip",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.GHZd8844jcPCbHiu"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Create Bonfire",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Create_Bonfire.0.2.js\"\n/*****************************************************************************************\n * Create Bonfire.\n * \n *   Description: Create a bonfire on ground that you can see within range. Until the \n *   spell ends, the magic bonfire fills a 5-foot cube. Any creature in the bonfire's \n *   space when you cast the spell must succeed on a Dexterity save or take 1d8 fire \n *   damage.\n * \n *   A creature must also make the saving throw when it moves into the bonfire's space \n *   for the first time on a turn or ends its turn there. \n * \n *   The bonfire ignites flammable objects in its area that aren't being worn or carried.\n * \n *   The spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), \n *   and 17th level (4d8).\n * \n * 05/05/22 0.1 Creation of Macro\n * 07/15/22 0.2 Convert to use jez.warpCrosshairs\n  *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`-------------------Starting ${MACRONAME}----------------------------------`)\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; \n    else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); \n    else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; \n    else aItem = lastArg.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst TL = 0;\nconst MINION = \"%Bonfire%\"\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff();             // DAE removal\njez.log(`-------------------Finishing ${MACRONAME}----------------------------------`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n     const FUNCNAME = \"doOnUse()\";\n     const SAVE_DC = aItem.data.save.dc;\n     jez.log(`---------Starting ${MACRONAME} ${FUNCNAME}----------------------`)\n     //-----------------------------------------------------------------------------------------\n     // Get the TEMPLATE object and delete the template.\n     //\n    //  const templateID = args[0].templateId\n    //  const TEMPLATE = canvas.templates.get(templateID).data\n    //  canvas.templates.get(templateID).document.delete()\n    //--------------------------------------------------------------------------------------\n    // Grab our character level and figure out what the damage dice should be\n    //\n    let charLevel = jez.getCharLevel(aToken)\n    let damageDice = \"1d8\"\n    if (charLevel >= 5)  damageDice = \"2d8\"\n    if (charLevel >= 11) damageDice = \"3d8\"\n    if (charLevel >= 17) damageDice = \"4d8\"\n    jez.log(\"Damage Dice\", damageDice)\n    //--------------------------------------------------------------------------------------\n    // Spawn in the Bonfire, catch its token.id, exit on failure to spawn\n    //\n    const BONFIRE_ID = await spawnBonfire(`${aToken.name}'s Bonfire`,damageDice)\n    if (!BONFIRE_ID) {\n        msg = `Bonfire could not be spawned.   ${MINION} must be available in <b>Actors \n        Directory</b>.<br><br>\n        Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (false);\n    }\n    //--------------------------------------------------------------------------------------\n    // Modify the concentrating effect to delete the Bonfire on termination\n    //\n    modConcentratingEffect(aToken, BONFIRE_ID)\n    //--------------------------------------------------------------------------------------\n    // Modify the existing on the bonfire to do appropriate damage\n    //\n    await jez.wait(100)\n    let bonfireToken = canvas.tokens.placeables.find(ef => ef.id === BONFIRE_ID[0])\n    modExistingEffect(bonfireToken, damageDice, SAVE_DC)\n    //--------------------------------------------------------------------------------------\n    // \n    //\n    msg = `Any creature in the bonfire's space when it appears must succeed on a ${SAVE_DC}DC \n    DEX save or take ${damageDice} fire damage. A creature must also make a save when \n    it moves into the bonfire for the first time on a turn or ends its turn there.`\n    postResults(msg);\n    jez.log(\"--------------OnUse-----------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return (true);\n}\n/***************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************/\n  async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(\"--------------Off---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n    //--------------------------------------------------------------------------------------\n    // Delete the existing bonfire\n    //\n    let sceneId = game.scenes.viewed.id\n    let bonfireId = args[1]\n    warpgate.dismiss(bonfireId, sceneId)\n    jez.log(\"--------------Off---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n/***************************************************************************************************\n * Post the results to chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, {color:\"FireBrick\", fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Spawn the Bonfire into existance returning the UUID or null on failure\n **************************************************************************************************/\nasync function spawnBonfire(newName) {\n    if (TL > 1) jez.trace(\"spawnBonfire(newName)\",\n        \"newName\",newName);\n    //--------------------------------------------------------------------------------------\n    // Verify the Actor named MINION exists in Anctor Directory\n    //\n    if (!game.actors.getName(MINION)) {   // If bonfire not found, that's all folks\n        msg = `Could not find \"<b>${MINION}</b>\" in the <b>Actors Directory</b>. \n        <br><br>Can not complete the ${aItem.name} action.`;\n        postResults(msg);\n        return (null);\n    }\n    //--------------------------------------------------------------------------------------\n    // Define warpgate updates, options and callbacks \n    //\n    let updates = {\n        actor: {name: newName},    \n        token: {name: newName},\n    }\n    const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n    const CALLBACKS = {\n        pre: async (template) => {\n            preEffects(template);\n            await jez.wait(500)\n        },\n        post: async (template) => {\n            postEffects(template);\n        }\n    };\n    //-----------------------------------------------------------------------------------------------\n    // Get and set maximum sumoning range\n    //\n    const ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\n    if (TL > 1) jez.trace(\"ALLOWED_UNITS\", ALLOWED_UNITS);\n    const MAX_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 60\n    //-----------------------------------------------------------------------------------------------\n    // Obtan location for spawn\n    //\n    let summonData = game.actors.getName(MINION)\n    if (TL > 1) jez.trace(\"==> summonData\", summonData);\n    let {x,y}=await jez.warpCrosshairs(aToken,MAX_RANGE,summonData.img,aItem.name,{},-1,{traceLvl:TL})\n    //-----------------------------------------------------------------------------------------------\n    // Suppress Token Mold for a wee bit\n    //\n    jez.suppressTokenMoldRenaming(2000)\n    await jez.wait(75)\n    //-----------------------------------------------------------------------------------------------\n    // Fire off warpgate \n    //\n    let bonfireId = await warpgate.spawnAt({ x, y }, MINION, updates, CALLBACKS, OPTIONS);\n    //--------------------------------------------------------------------------------------\n    //\n    jez.log(\"bonfireId\", bonfireId)\n    return(bonfireId)\n}\n/***************************************************************************************************\n * Pre-Spawn VFX\n ***************************************************************************************************/\nasync function preEffects(template) {\n    jez.runRuneVFX(template, jez.getSpellSchool(aItem)) \n    return\n}\n/***************************************************************************************************\n * Post-Spawn VFX\n ***************************************************************************************************/\nasync function postEffects(template) { return }\n/***************************************************************************************************\n * Line connecting token to bonfire VFX\n ***************************************************************************************************/\n async function chainEffect(token1, token2) {\n    new Sequence()\n        .effect()\n        .file(\"jb2a.energy_beam.normal.blue.01\")\n        .atLocation(token1)\n        .stretchTo(token2)\n        .fadeIn(500)\n        .fadeOut(500)\n        .duration(2000)\n        .scale(1.0)\n        .opacity(1.0)\n    .play()\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call Remove_Effect_doOff on removal\n ***************************************************************************************************/\nasync function modConcentratingEffect(aToken, bonfireId) {\n    // Modify concentrating to delete the bonfire on concentration drop\n    //----------------------------------------------------------------------------------------------\n    // Seach the casting token to find the just added concentration effect\n    //\n    await jez.wait(200)\n    let effect = await aToken.actor.effects.find(i => i.data.label === \"Concentrating\");\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to concentration effect. In this case, a macro that will be\n    // given argument: bonfireId\n    //    \n    effect.data.changes.push({key:`macro.itemMacro`,mode:jez.CUSTOM,value:bonfireId,priority:20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect \"Concentrating\" updated!`, result);\n}\n/***************************************************************************************************\n * Modify existing concentration effect to call Remove_Effect_doOff on removal\n ***************************************************************************************************/\n async function modExistingEffect(aToken, dDice, SAVE) {\n    // Modify concentrating to delete the bonfire on concentration drop\n    //----------------------------------------------------------------------------------------------\n    // Make sure the world macro that is used to remove effect exists\n    //\n    const MAC_NAME = \"Bonfire_Helper\"\n    const EXISTING_EFFECT = \"Bonfire Damage Aura\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the casting token to find the just added concentration effect\n    //\n    await jez.wait(200)\n    let effect = await aToken.actor.effects.find(i => i.data.label === EXISTING_EFFECT);\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to concentartion effect. In this case, a macro that will be\n    // given argument: bonfireId\n    //    \n    effect.data.changes.push({key: `macro.execute`, mode: jez.CUSTOM, \n        value:`${MAC_NAME} ${dDice} ${SAVE}`, priority: 20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect \"${EXISTING_EFFECT}\" updated!`, result);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}