{
  "name": "Bonfire_Helper",
  "type": "script",
  "author": "ZjFlOWYxZjM5ZTZj",
  "img": "Icons_JGB/Misc/campfire.svg",
  "scope": "global",
  "command": "const MACRONAME = \"Bonfire_Helper.0.1.js\"\n/*****************************************************************************************\n * Intended to be called to apply the damage element of an active Aura attached to \n * Create Bonfire spell. \n * \n * 05/06/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nif (args[0] === \"off\") return;           // DAE removal\njez.log(\"---------------------------------------------------------------------------\",\n    `Starting ${MACRONAME}`,MACRO);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst lastArg = args[args.length - 1];\nlet msg = \"\";\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (lastArg.tokenId) aActor = canvas.tokens.get(lastArg.tokenId).actor; else aActor = game.actors.get(lastArg.actorId);\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); else aToken = game.actors.get(lastArg.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = lastArg.efData?.flags?.dae?.itemData;\n//if (args[0] === \"off\") await doOff();         // DAE removal\nif (args[0] === \"on\") await doOn();           // DAE Application\njez.log(\"---------------------------------------------------------------------------\",\n    \"Finished\", `${MACRONAME}`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set On\n ***************************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    jez.log(\"--------------On---------------------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n    jez.log(`Active Token, ${aToken.name}`, aToken)\n    const DAMAGE_DICE = args[1]\n    const SAVE_DC     = args[2]\n    const SAVE_TYPE   = \"dex\"\n    const FLAVOR      = \"flavor text\"\n    const DAMAGE_TYPE = \"fire\"\n    let save = (await aActor.rollAbilitySave(SAVE_TYPE, { flavor: FLAVOR, chatMessage: true, \n        fastforward: true }));\n    //jez.log(\"save\", save)\n    let damageRoll = new Roll(`${DAMAGE_DICE}`).evaluate({async:false});\n    //jez.log(\"damageRoll before save\",damageRoll)\n    let saveMsg = `Save failed with a ${save.total}, needed ${SAVE_DC}.`\n    if (save.total >= SAVE_DC) {\n        //jez.log(\"The save is GOOD!\", save.total)\n        let saveDamage = Math.floor(damageRoll.total/2)\n        damageRoll = new Roll(`${saveDamage}`).evaluate({async:false});\n        saveMsg = `Save succeeded with a ${save.total}, needed ${SAVE_DC}.`\n    }\n    //jez.log(\"damageRoll after save\",damageRoll)\n    await new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageRoll.total, DAMAGE_TYPE,\n        [aToken], damageRoll,\n        { flavor: `Flavor ${DAMAGE_TYPE}`, itemCardId: \"new\", itemData: aItem, useOther: false });\n\n    msg = `The Bonfire inflicted ${damageRoll.total} fire damage (before resistaces).  `    \n    jez.postMessage({\n        color: \"FireBrick\",\n        fSize: 13,\n        icon: \"Icons_JGB/Misc/campfire.svg\",\n        msg: `The Bonfire inflicted ${damageRoll.total} fire damage (before resistaces). ${saveMsg}`,\n        title: `Ouch! ${aToken.name} burns...`,\n        token: aToken\n    })\n    jez.log(\"--------------On---------------------\", \"Finished\", `${MACRONAME} ${FUNCNAME}`);\n    return;\n}",
  "flags": {
    "combat-utility-belt": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runAsGM": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}