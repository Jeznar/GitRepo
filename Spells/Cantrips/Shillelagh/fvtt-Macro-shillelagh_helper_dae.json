{
  "name": "Shillelagh_Helper_DAE",
  "type": "script",
  "author": "ZjFlOWYxZjM5ZTZj",
  "img": "Icons_JGB/Weapons/quarterstaff-shillelagh.jpg",
  "scope": "global",
  "command": "const MACRONAME = \"Shillelagh_Helper_DAE.0.2\"\njez.log(MACRONAME)\n/*****************************************************************************************\n * Intended to be called as a macro.execute from within an ItemMacro to make the doOn and\n * doOff options available to an affect that has been exectued outside of DAE.\n * \n * 12/30/21 0.1 Creation of Macro\n * 12/30/21 0.2 Cleanups\n * 12/31/21 0.4 Dotting i's etc.\n * 05/17/22 0.5 Update for Foundry 9.x\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`------Starting ${MACRONAME}-----------------`)\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n\nconst ATTACK_ITEM = args[1];\n\nif (!ATTACK_ITEM) {\n    ui.notifications.error(`${MACRONAME} received invalid parameters, please, politely ask Joe to fix this`);\n    jez.log(`Bad stuff received by ${MACRONAME}`,\"ATTACK_ITEM\", ATTACK_ITEM);\n    return;\n}\njez.log(\"ATTACK_ITEM\",ATTACK_ITEM);\n\nconst LAST_ARG = args[args.length - 1];\nlet msg = \"\";\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nif (args[0] === \"off\") await doOff();         // DAE removal\n//if (args[0] === \"on\") await doOn();           // DAE Application\njez.log(`--------- Finished ${MACRONAME} -----------`)\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n *\n * https://github.com/fantasycalendar/FoundryVTT-Sequencer/wiki/Sequencer-Effect-Manager#end-effects\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`------- Starting ${MACRONAME} ${FUNCNAME} ---------`);\n    jez.log(`doOff ---> Delete ${ATTACK_ITEM} from ${aToken.name} if it exists`, aActor)\n    for (let i = 0; i < args.length; i++) jez.log(`***args[${i}]`, args[i]);\n    await deleteItems(ATTACK_ITEM, aActor, \"weapon\");\n    jez.log(`---------- Finished ${MACRONAME} ${FUNCNAME} -----------`);\n    return;\n}\n/***************************************************************************************\n * Function to delete all copies of an item from actor\n *\n * Parameters\n *  - itemName: A string naming the item to be found in actor's inventory\n *  - actor: Optional actor to be searched, defaults to actor launching this macro\n * \n * Function rewritten to eliminate:\n *  await aActor.deleteOwnedItem(item._id);                 // Obsoletes as of Foundry 9.x\n *  await aActor.deleteEmbeddedDocuments(\"Item\", [item.id]) // Format as of Foundry 9.x \n ***************************************************************************************/\nasync function deleteItems(itemName, actor, type) {\n    let itemFound = null\n    for (let i = 1; i <= 20; i++) {\n        while (itemFound = actor.items.find(item => item.data.name === itemName &&\n            item.type === type)) {\n            jez.log(\"itemFound\", itemFound)\n            await itemFound.delete();\n            msg = `Deleted expired ${itemName}`      // Set notification message\n            ui.notifications.info(msg);\n            jez.log(msg);\n        }\n    }\n}",
  "flags": {
    "combat-utility-belt": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runAsGM": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}