{
  "name": "Melf's Acid Arrow",
  "type": "spell",
  "img": "icons/skills/ranged/arrow-flying-ornate-gold.webp",
  "data": {
    "description": {
      "value": "<p>A shimmering green arrow streaks toward a target within range and bursts in a spray of acid. Make a ranged spell attack against the target.</p>\n<dl>\n<dt><strong><u>On a hit</u></strong></dt>\n<dd>Target takes<strong> 4d4 acid damage</strong> immediately and <strong>2d4 acid damage</strong> at the end of its next turn.</dd>\n<dt><strong><u>On a miss</u></strong></dt>\n<dd>Arrow splashes the target with acid for half as much of the initial damage and no damage at the end of its next turn.</dd>\n</dl>\n<p><strong>At Higher Levels. </strong>When you cast this spell using a spell slot of 3rd level or higher, the damage (both initial and later) increases by 1d4 for each slot level above 2nd.</p>",
      "chat": "<p>A shimmering green arrow streaks toward a target within range and bursts in a spray of acid. Make a ranged spell attack against the target. On a hit, the target takes 4d4 acid damage immediately and 2d4 acid damage at the end of its next turn. On a miss, the arrow splashes the target with acid for half as much of the initial damage and no damage at the end of its next turn.</p>\n<p><strong>At Higher Levels. </strong>When you cast this spell using a spell slot of 3rd level or higher, the damage (both initial and later) increases by 1d4 for each slot level above 2nd.</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 259",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 90,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "rsak",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 2,
    "school": "evo",
    "components": {
      "value": "powdered rhubarb leaf and an adder’s stomach",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "powdered rhubarb leaf and an adder’s stomach",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d4"
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138473,
      "definitionId": 2330,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 259,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "midi-qol": {
      "criticalThreshold": "20",
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "fumbleThreshold": null,
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.world.ddb-darklands-spells.P38ecOyGUW8O9jKA"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Melf's Acid Arrow",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "async function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nconst version = Math.floor(game.version);\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst actorD = tokenD.actor;\nconst actorData = await actorD.getRollData();\nconst guided = actorD.itemTypes.feat.find(item => [\"guided strike\"].some(x => (item.name).toLowerCase().includes(x)));\nconst itemD = lastArg.item;\nif (!guided) return ui.notifications.error(`Looking for an item named Guided Strike, cannot find it.`);\nconst target = canvas.tokens.get(lastArg.targets[0].id);\nif (![\"ak\"].some(i => (version > 9 ? itemD.system.actionType : itemD.data.actionType).toLowerCase().includes(i))) return {};\nconst resourceName = \"Channel Divinity\";\nlet resourceList = [{ name: \"primary\" }, { name: \"secondary\" }, { name: \"tertiary\" }];\nlet resourceValues = Object.values(actorData.resources);\nlet resourceTable = mergeObject(resourceList, resourceValues);\nlet findResourceSlot = resourceTable.find(i => i.label.toLowerCase() === resourceName.toLowerCase());\nif (!findResourceSlot) return ui.notifications.error(`${resourceName} Resources is missing on ${tokenD.name}, Add it.`);\nlet resourceSlot = findResourceSlot.name;\nlet curtRes = actorData.resources[resourceSlot].value;\nlet curtMax = actorData.resources[resourceSlot].max;\nif (curtRes < 1) return console.warn(guided.name, curtRes, `out of resources`);\nif (lastArg.macroPass === \"preCheckHits\") {\n    let workflow = await MidiQOL.Workflow.getWorkflow(lastArg.uuid);\n    let guidingStrike = await new Promise((resolve) => {\n        let the_content = `<p>Attack Roll Total: <span style=\"font-weight:800;color: ${lastArg.attackD20 === 1 ? \"red\" : lastArg.attackD20 === 20 ? \"green\" : \"black\"}\">${lastArg.attackTotal}</span> <small>[ ${lastArg.attackRoll.result} ]</small></p><p>Do you wish to Channel Divinity to guide your attack? [${curtRes}/${curtMax}]</p>`;\n        new Dialog({\n            title: guided.name,\n            content: the_content,\n            buttons: {\n                use: {\n                    label: `Attack`, icon: `<img src=\"${version > 9 ? guided.img : guided.data.img}\" width=\"30px\" height=\"30px\">`, callback: async () => resolve(true)\n                },\n                skip: {\n                    label: \"Skip\", callback: () => resolve(false)\n                }\n            },\n            default: \"Skip\"\n        }).render(true);\n    });\n    if (!guidingStrike) return {};\n    console.warn(guided.name, `Original Attack Data =>`, `Attack Total:`, lastArg.attackTotal);\n    let newAttackRoll = await new Roll(`${lastArg.attackRoll.result} + 10`).evaluate({ async: true });\n    console.warn(guided.name, `Adjusted Attack Data =>`, `Attack Total:`, newAttackRoll.total);\n    workflow.isFumble = false;\n    workflow.isCritical = false;\n    if (lastArg.attackD20 === 1) {\n        workflow.isFumble = true\n    } else if (lastArg.attackD20 === 20) {\n        workflow.isCritical = true;\n    } else {\n        workflow.attackRoll = newAttackRoll;\n        workflow.attackTotal = newAttackRoll.total;\n    }\n    switch (MidiQOL.configSettings().rollAlternate) {\n        case \"formula\":\n        case \"formulaadv\": workflow.attackRollHTML = await newAttackRoll.render({ template: \"modules/midi-qol/templates/rollAlternate.html\" }); break;\n        case \"adv\":\n        case \"off\":\n        default: workflow.attackRollHTML = await newAttackRoll.render(); // \"off\"\n    }\n    let updates = {};\n    let resources = version > 9 ? `system.resources.${resourceSlot}.value` : `data.resources.${resourceSlot}.value`;\n    updates[resources] = curtRes - 1;\n    await actorD.update(updates);\n    await wait(300);\n    let the_message = `<em>${guided.name}.<br>${tokenD.name} strikes with supernatural accuracy!</em>`;\n    let chatMessage = game.messages.get(lastArg.itemCardId);\n    let content = await duplicate(version > 9 ? chatMessage.content : chatMessage.data.content);\n    let searchString = /<div class=\"midi-qol-saves-display\">[\\s\\S]*<div class=\"end-midi-qol-saves-display\">/g;\n    let replaceString = `<div class=\"midi-qol-saves-display\"><div class=\"end-midi-qol-saves-display\"><hr>${the_message}`;\n    content = content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n    await ui.chat.scrollBottom();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    }
  }
}