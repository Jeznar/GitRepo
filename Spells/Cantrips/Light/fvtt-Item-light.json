{
  "name": "Light",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/light-sky-1.jpg",
  "data": {
    "description": {
      "value": "<p>You touch one object that is no larger than 10 feet in any dimension. Until the spell ends, the object sheds bright light in a 20-foot radius and dim light for an additional 20 feet. The light can be colored as you like. Completely covering the object with something opaque blocks the light. The spell ends if you cast it again or dismiss it as an action.</p>\n<p>If you target an object held or worn by a hostile creature, that creature must succeed on a Dexterity saving throw to avoid the spell.</p>\n<p><strong>FoundryVTT</strong>: This is automated only for creatures.Â  Objects to be handled manually.</p>",
      "chat": "<p>You touch one object that is no larger than 10 feet in any dimension. Until the spell ends, the object sheds bright light in a 20-foot radius and dim light for an additional 20 feet. The light can be colored as you like. Completely covering the object with something opaque blocks the light. The spell ends if you cast it again or dismiss it as an action.</p>\n<p>If you target an object held or worn by a hostile creature, that creature must succeed on a Dexterity saving throw to avoid the spell.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 255",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "evo",
    "components": {
      "value": "a firefly or phosphorescent moss",
      "vocal": true,
      "somatic": false,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "a firefly or phosphorescent moss",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138400,
      "definitionId": 2166,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 255,
          "sourceType": 1
        }
      ],
      "tags": [
        "Creation",
        "Utility"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_68b6mer7s0n"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.5C6WImUsuU5sDA3P"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false,
      "forceCEOn": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Light",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Light.0.5.js\"\n/*****************************************************************************************\n * Implment the Light Cantrip on Friendly and Unfriendly targets.\n * \n * RAW: You touch one object that is no larger than 10 feet in any dimension. Until the \n *   spell ends, the object sheds bright light in a 20-foot radius and dim light for an \n *   additional 20 feet. The light can be colored as you like. Completely covering the \n *   object with something opaque blocks the light. The spell ends if you cast it again \n *   or dismiss it as an action.\n * \n *   If you target an object held or worn by a hostile creature, that creature must succeed\n *   on a Dexterity saving throw to avoid the spell.\n * \n * This macro assumes the effect is being cast on a token.  A choice to accept the effect \n * or attempt a save is presented, save resolved (if requested) and efect added to token.\n * \n * 0.4 Store the token id of target as a DAE Flag.  Delete the effect from that token \n *     before adding the new effect.\n * \n * 01/06/22 0.1 Creation of Macro\n * 05/05/22 0.3 Migration to FoundryVTT 9.x\n * 05/05/22 0.3 Change createEmbeddedEntity to createEmbeddedDocuments for 9.x\n * 05/13/22 0.4 Change to manage existing effect\n * 12/06/22 0.5 Update log and chase player permission issue deleting/adding effect\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`${TAG} === Starting ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n//---------------------------------------------------------------------------------------------------\n// Set standard variables\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\nconst SAVE_TYPE = \"DEX\"\nconst EFFECT = `${aItem.name}-${aActor.id}`\nlet errorMsg = \"\";\nlet colorArray = [\"white\", \"cyan\", \"blue\", \"green\", \"magenta\", \"red\", \"yellow\"]\nlet colorCodes = {\n    white: \"#ffffff\",\n    cyan: \"#00ffff\",\n    blue: \"#0000ff\",\n    green: \"#00ff00\",\n    magenta: \"#ff00ff\",\n    red: \"#ff0000\",\n    yellow: \"#ffff00\"\n}\nlet colorCode = \"\";\nlet result = \"\";\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif (!await preCheck()) return\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\n\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n    if (args[0].targets.length !== 1) {\n        msg = `Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`\n        postResults(msg)\n        return jez.badNews(msg, \"w\");\n    }\n    return true\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse(options = {}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    await jez.wait(100)\n    //-----------------------------------------------------------------------------------------------\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-----------------------------------------------------------------------------------------------\n    // Fetch the Flag value and delete existing effect if any\n    //\n    let pTokenId = await DAE.getFlag(aToken.actor, MACRO);\n    if (TL>1) jez.trace(`${TAG} pTokenId from Flag`, pTokenId)\n    if (pTokenId) {          // Found token ID of previous target\n        let pToken = canvas.tokens.placeables.find(ef => ef.id === pTokenId)\n        if (TL>1) jez.trace(`${TAG} pToken from Scene`, pToken)\n        if (pToken) {        // Found previous Token\n            let previousEffect = await pToken.actor.effects.find(ef => ef.data.label === EFFECT)\n            if (TL>1) jez.trace(`${TAG} previousEffect from Token`, previousEffect)\n            if (previousEffect) {   // Found previous Effect\n                // await previousEffect.delete(); --> Player permission error \n                if (TL > 1) jez.trace(`${TAG} Effect to be removed`,\n                    'pToken', pToken,\n                    'pToken.actor.uuid', pToken.actor.uuid,\n                    'previousEffect', previousEffect,\n                    'previousEffect.id', previousEffect.id)\n                await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: pToken.actor.uuid, effects: [previousEffect.id] });\n                // await actorD.createEmbeddedDocuments(\"ActiveEffect\", [effectData]); --> Player permission error \n            }\n        }\n    }\n    await DAE.unsetFlag(aToken.actor, MACRO);   // Clear the Flag\n    //-----------------------------------------------------------------------------------------------\n    // Now for the main event\n    //\n    DialogSaveOrAccept();\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n    //----------------------------------------------------------------------------------\n    // \n    async function DialogSaveOrAccept() {\n        const FUNCNAME = \"DialogSaveOrAccept()\";\n        const FNAME = FUNCNAME.split(\"(\")[0] \n        const TAG = `${MACRO} ${FNAME} |`\n        if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n        if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`);\n        //-------------------------------------------------------------------------------------------\n        if (TL>1) jez.trace(`${TAG} save type ${SAVE_TYPE.toLowerCase()}`)\n        new Dialog({\n            title: \"Save or Accept Spell\",\n            content: `<div><h2>Attempt Save -OR- Accept Effect</h2>\n            <div><p style=\"color:Green;\">Does <b>${tToken.name}</b> want to attempt <b>DC${SAVE_DC}</b> \n            ${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} (${SAVE_TYPE}) save vs \n            ${aToken.name}'s ${aItem.name} spell/effect?</p><div>`,\n            buttons: {\n                save: {\n                    label: \"Attempt Save\",\n                    callback: (html) => {\n                        PerformCallback(html, \"Save\")\n                    }\n                },\n                accept: {\n                    label: \"Accept Effect\",\n                    callback: (html) => {\n                        PerformCallback(html, \"Accept\")\n                    }\n                },\n            },\n            default: \"abort\",\n        }).render(true);\n    }\n    //-----------------------------------------------------------------------------------------------\n    // \n    async function PerformCallback(html, mode) {\n        const FUNCNAME = \"PerformCallback(html, mode)\";\n        const FNAME = FUNCNAME.split(\"(\")[0] \n        const TAG = `${MACRO} ${FNAME} |`\n        if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n        if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"html\", html, \"mode\", mode);\n        //-------------------------------------------------------------------------------------------\n        const QUERY_TITLE = \"Select Color for the Light Effect\"\n        const QUERY_TEXT = \"Pick one color from the drop down list\"\n        //-------------------------------------------------------------------------------------------\n        if (mode === \"Save\") {\n            if (await attemptSave()) {  // Save was made\n                result = \"Saved\"\n            } else {                    // Save failed\n                jez.pickFromListArray(QUERY_TITLE, QUERY_TEXT, pickColorCallBack, colorArray);\n                result = \"Failed\"\n            }\n        } else if (mode === \"Accept\") {\n            jez.pickFromListArray(QUERY_TITLE, QUERY_TEXT, pickColorCallBack, colorArray);\n            result = \"Accepted\"\n        } else {\n            jez.postMessage(`Oh fudge, how did this happen? ${mode}`)\n            result = \"Fudged\"\n        }\n        await postSpellResult(result)\n        //-----------------------------------------------------------------------------------------------\n        // \n        async function pickColorCallBack(selection) {\n            const FUNCNAME = \"pickColorCallBack(selection)\";\n            const FNAME = FUNCNAME.split(\"(\")[0] \n            const TAG = `${MACRO} ${FNAME} |`\n            if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n            if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"selection\", selection);\n            //-------------------------------------------------------------------------------------------\n            colorCode = selection;\n            if (TL>1) jez.trace(`${TAG} <b>\"${colorCode}\"</b> was selected in the dialog`)\n            addLightEffect(args[0].uuid, tActor, 60, colorCodes[colorCode],{traceLvl:TL})\n            //-------------------------------------------------------------------------------------------\n            // Set the DAE Flag so the effect can be deleted the next time this is cast\n            //\n            await DAE.setFlag(aToken.actor, MACRO, tToken.id);\n        }\n        //-----------------------------------------------------------------------------------------------\n        // Return true on success, false on failure\n        //\n        async function attemptSave() {\n            const FUNCNAME = \"attemptSave()\";\n            const FNAME = FUNCNAME.split(\"(\")[0] \n            const TAG = `${MACRO} ${FNAME} |`\n            if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n            if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`);\n            //-------------------------------------------------------------------------------------------\n            let saved = false;\n\n            const flavor = `${CONFIG.DND5E.abilities[SAVE_TYPE.toLowerCase()]} <b>DC${SAVE_DC}</b>\n             to avoid <b>${aItem.name}</b> effect`;\n             if (TL>1) jez.trace(`${TAG} ---- Save Information ---`, \n                \"SAVE_TYPE\", SAVE_TYPE, \"SAVE_DC  \", SAVE_DC, \"flavor   \", flavor);\n            let save = (await tActor.rollAbilitySave(SAVE_TYPE.toLowerCase(), { flavor, chatMessage: true, fastforward: true })).total;\n            if (TL>1) jez.trace(`${TAG} save`, save);\n            if (save > SAVE_DC) {\n                if (TL>1) jez.trace(`${TAG} save was made with a ${save}`);\n                saved = true;\n            } else if (TL>1) jez.trace(`${TAG} save failed with a ${save}`);\n            // addLightEffect(args[0].uuid, tActor, 60, colorCodes[selection])\n            if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n            return (saved);\n        }\n        //-----------------------------------------------------------------------------------------------\n        // \n        async function postSpellResult(mode) {\n            const FUNCNAME = \"attemptSave()\";\n            const FNAME = FUNCNAME.split(\"(\")[0] \n            const TAG = `${MACRO} ${FNAME} |`\n            if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n            if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"mode\", mode);\n            //-------------------------------------------------------------------------------------------\n            switch (mode) {\n                case \"Saved\":\n                    msg = `${tToken.name} <b>made</b> its save and avoided the ${aItem.name} effect.`\n                    break;\n                case \"Failed\":\n                    msg = `${tToken.name} <b>failed</b> its save and is now emitting \n                    light from the ${aItem.name} effect.`\n                    break;\n                case \"Accepted\":\n                    msg = `${tToken.name} <b>accepted</b> the ${aItem.name} effect. It is now emitting light.`\n                    break;\n                case \"Fudged\":\n                    msg = `Something went sideways.  Please ask Joe nicely, to see about fixing this.`\n                    break;\n                default:\n                    msg = `Something went wack-a-doodle.  Please ask Joe nicely, to see about fixing this.`\n            }\n            postResults(msg);\n            if (TL>1) jez.trace(`${TAG} msg`,msg);\n        }\n    }\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function addLightEffect(uuid, actorD, rounds, color, options={}) {\n    const FUNCNAME = \"addLightEffect(uuid, actorD, rounds, color, options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\n        'uuid   ', uuid, 'actorD ', actorD, 'rounds ', rounds, 'color  ', color, \"options\", options);\n    //-----------------------------------------------------------------------------------------------\n    // \n    //\n    let seconds = rounds * 6;\n    let effectData = {\n        label: EFFECT,\n        icon: aItem.img,\n        origin: uuid,\n        disabled: false,\n        duration: { rounds: rounds, seconds: seconds, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { dae: { itemData: aItem } },\n        changes: [\n            { key: \"ATL.light.dim\", mode: jez.UPGRADE, value: 40, priority: 20 },\n            { key: \"ATL.light.bright\", mode: jez.UPGRADE, value: 20, priority: 20 },\n            { key: \"ATL.light.color\", mode: jez.OVERRIDE, value: color, priority: 30 },\n            { key: \"ATL.light.alpha\", mode: jez.OVERRIDE, value: 0.07, priority: 20 },\n            // As of 5.13.22 the following line has no effect, though it would be cool if it did.\n            { key: \"ATL.light.animation\", mode: jez.OVERIDE, value: \"Energy Field\", priority: 20 },\n        ]\n    };\n    // await actorD.createEmbeddedEntity(\"ActiveEffect\", effectData); // Depricated \n    if (TL>1) jez.trace(`${TAG} Creating active effect ${effectData.label}`,effectData)\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: actorD.uuid, effects: [effectData] });\n    // await actorD.createEmbeddedDocuments(\"ActiveEffect\", [effectData]); --> Player permission error \n    if (TL>1) jez.trace(`${TAG}--- Finished ---`);\n    return (true);\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}