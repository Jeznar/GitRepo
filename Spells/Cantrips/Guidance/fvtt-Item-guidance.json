{
  "name": "Guidance",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/haste-sky-3.jpg",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% touches one willing creature to apply a buff that will last up to a minute.</p>\n<p>The target can <strong>roll a d4 and add the number</strong> rolled to one ability or skill check of its choice. It can roll the die <strong>before</strong> or <strong>after</strong> making the ability check. The spell then ends.</p>\n<hr />\n<p><strong>FoundryVTT:  </strong>This spell is implemented on the assumption that the buff will be used at the next opportunity.  If this is not the case, it may need to be manually adjusted. </p>",
      "chat": "<p>You touch one willing creature. Once before the spell ends, the target can roll a d4 and add the number rolled to one ability check of its choice. It can roll the die before or after making the ability check. The spell then ends.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 248",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "touch",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 0,
    "school": "div",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138016,
      "definitionId": 2132,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 248,
          "sourceType": 1
        }
      ],
      "tags": [
        "Buff"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_68b6mer7s0n"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.3fAcFd933V7pvOe9"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false,
      "forceCEOn": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Guidance",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Guidance.0.3.js\"\n/*****************************************************************************************\n * Macro does the following:\n * - Verify exactly one target is targeted\n * - Verify the target does not currently have guidance\n * - Apply the guidance effect\n * - When guidance drops, remove concentration on the caster\n * \n * 05/20/22 0.1 Creation of Macro\n * 06/15/22 0.2 Expire buff after an ability check as well as after skill check\n * 08/02/22 0.3 Add convenientDescription\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is removed by DAE, set Off\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // Find the originating actor\n    //\n    let oToken = await canvas.tokens.placeables.find(ef => ef.id === args[1])\n    if (!oToken) return (false)\n    jez.log(`Originating token: ${oToken.name}`,oToken)\n    //----------------------------------------------------------------------------------------------\n    // Look for \"Concentrating\" effect on originating token's actor\n    //\n    let effect = await oToken.actor.effects.find(ef => ef.data.label === \"Concentrating\");\n    if (effect) await effect.delete();\n    //----------------------------------------------------------------------------------------------\n    // Post completion message\n    //\n    jez.postMessage({color: jez.randomDarkColor(), fSize: 14, icon: aToken.data.img, \n    msg: `Guidance has been used or simply removed from ${aToken.name}.`, \n    title: `Guidance Used`, token: aToken})\n    //----------------------------------------------------------------------------------------------\n    // That's all folks\n    //\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n * \n * The expiration conditions are documented on my GitHub: \n * https://github.com/Jeznar/GitRepo/blob/main/Documentation/Effect_Duration.md#other-special-durations\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    const EXPIRE = [\"isCheck\", \"isSkill\", \"newDay\", \"longRest\", \"shortRest\"];\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // Verify exactly one target is targeted\n    //\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //----------------------------------------------------------------------------------------------\n    // Verify the target does not currently have guidance, if it does remove concentration\n    //\n    let effect = await tActor.effects.find(ef => ef.data.label === aItem.name);\n    if (effect) {\n        let msg = `<b>${tToken.name}</b> already has the ${aItem.name} effect. Perhaps the <b>GM</b> \n        will allow <b>${aToken.name}</b> to do something more useful?`\n        jez.log(msg, effect)\n        ui.notifications.info(msg);\n        postResults(msg)\n        //----------------------------------------------------------------------------------------------\n        // Remove concentrating from originating token\n        //\n        // TODO\n        let concentratingEffect = aToken.actor.effects.find(ef => ef.data.label === \"Concentrating\");\n        if (concentratingEffect) await concentratingEffect.delete();\n        return(false)\n    }\n    //----------------------------------------------------------------------------------------------\n    // Apply the guidance effect\n    //\n    const CE_DESC = `${aToken.name}'s spell adds 1d4 to one ability or skill check for 1 minute`\n    let effectData = {\n        label: aItem.name, \n        icon: aItem.img,\n        origin: LAST_ARG.uuid,\n        disabled: false,\n        duration: { rounds: 10, startRound: GAME_RND, startTime: game.time.worldTime },\n        flags: { \n            dae: { macroRepeat: \"none\", specialDuration: EXPIRE },\n            convenientDescription: CE_DESC\n        },\n        changes: [\n            {key: `data.bonuses.abilities.check`, mode: jez.ADD, value: \"+1d4\", priority: 20},\n            {key: `macro.itemMacro`, mode: jez.ADD, value: aToken.id, priority: 20},    \n        ]\n    };\n    jez.log(`Add effect ${aItem.name} to ${tToken.name}`)  \n    await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:tToken.actor.uuid, effects: [effectData] });\n    msg=`<b>${tToken.name}</b> has received ${aItem.name} from ${aToken.name} and has a 1d4 bonus to next \n    skill check within 10 turns.`;\n    postResults(msg)\n    //----------------------------------------------------------------------------------------------\n    // That's all folks!\n    //\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "autoanimations": null,
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}