{
  "name": "Mage Hand",
  "type": "spell",
  "img": "/systems/dnd5e/icons/skills/ice_16.jpg",
  "data": {
    "description": {
      "value": "<p>A spectral, floating hand appears at a point you choose within range. The hand lasts for the duration or until you dismiss it as an action. The hand vanishes if it is ever more than 30 feet away from you or if you cast this spell again.</p>\n<p>You can use your action to control the hand. You can use the hand to manipulate an object, open an unlocked door or container, stow or retrieve an item from an open container, or pour the contents out of a vial. You can move the hand up to 30 feet each time you use it.</p>\n<p>The hand can't attack, activate magic items, or carry more than 10 pounds.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This is automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 256",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 30,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "level": 0,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.5FipWyQLvz8PRwkE"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Mage Hand",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Magehand.0.7.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * This macro just posts a msg providing basic instructions to teh spell card.\n * \n * 12/02/21 0.1 Creation\n * 12/02/21 0.2 Drastic simplification and resouce consumption can be handled by base code\n * 02/25/22 0.3 Update to use jez.lib and rename the summoned hand\n * 05/25/22 0.4 Chasing Error: Sequencer | Effect | attachTo - could not find given object\n *              Issue was caused by a conflict with TokenMold/Name.  Now handled with a \n *              warning.\n * 07/15/22 0.5 Update to use warpgate.spawnAt with range limitation and suppress tokenmold\n * 07/15/22 0.6 Build library function to generalize the warpgate.spawnAt thang\n * 12/09/22 0.7 Despawn (delete, dismiss) one existing magehand from this actor\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/ \n const MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\n const TAG = `${MACRO} |`\n const TL = 0;                               // Trace Level for this macro\n let msg = \"\";                               // Global message string\n //---------------------------------------------------------------------------------------------------\n if (TL>0) jez.trace(`${TAG} === Starting ===`);\n if (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n const L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\n //---------------------------------------------------------------------------------------------------\n // Set standard variables\n let aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\n let aActor = aToken.actor; \n let aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\n const VERSION = Math.floor(game.VERSION);\n const GAME_RND = game.combat ? game.combat.round : 0;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst MINION = \"Magehand\"\nconst MINION_NAME = `${aToken.name}'s Magehand`\n//-------------------------------------------------------------------------------------------------\n// Search for pre-existing magehand, if found, despawn it.\n//\nlet previousSummon = canvas.tokens.placeables.find(ef => ef.name === MINION_NAME)\nif (previousSummon) warpgate.dismiss(previousSummon.id, game.scenes.viewed.id)\n//--------------------------------------------------------------------------------------------------\n// Portals need the same color for pre and post effects, so get that set here. Even though only used\n// when we are doing portals.  This is needed to force the same choice for pre and post VFX.\n//\nconst PORTAL_COLORS = [\"Bright_Blue\", \"Dark_Blue\", \"Dark_Green\", \"Dark_Purple\", \"Dark_Red\",\n\"Dark_RedYellow\", \"Dark_Yellow\", \"Bright_Green\", \"Bright_Orange\", \"Bright_Purple\", \"Bright_Red\", \n\"Bright_Yellow\"]\nlet index = Math.floor((Math.random() * PORTAL_COLORS.length))\nlet portalColor = PORTAL_COLORS[index]\n//--------------------------------------------------------------------------------------------------\n// Build the dataObject for our summon call\n//\nlet argObj = {\n    defaultRange: 30,                   // Defaults to 30, but this varies per spell\n    duration: 4000,                     // Duration of the intro VFX\n    img: aItem.img,                     // Image to use on the summon location cursor\n    introTime: 250,                     // Amount of time to wait for Intro VFX\n    introVFX: `~Portals/Portal_${portalColor}_H_400x400.webm`, // default introVFX file\n    name: aItem.name,                   // Name of action (message only), typically aItem.name\n    outroVFX: `~Portals/Masked/Portal_${portalColor}_H_NoBG_400x400.webm`, // default outroVFX file\n    source: aToken,                     // Coords for source (with a center), typically aToken\n    width: 1,                           // Width of token to be summoned, 1 is the default\n    traceLvl: TL                        // Trace level, matching calling function decent choice\n}\n//-------------------------------------------------------------------------------------------------\n// Set up one of the three spawn effects tested: (1) Explosion, (2) Portal, (3) Firework\n// modules/jb2a_patreon/Library/Generic/Smoke/SmokePuff01_01_Dark_Black_400x400.webm and pick one\n// at psuedo Random\n//\nconst EFFECT = Math.floor(Math.random() * 3) + 1\nswitch (EFFECT) {\n    case 1:\n        argObj.duration = 1000\n        argObj.introTime = 1000\n        argObj.introVFX = '~Explosion/Explosion_01_${color}_400x400.webm'\n        argObj.outroVFX = '~Smoke/SmokePuff01_*_${color}_400x400.webm'\n        break;\n    case 2:\n        argObj.duration = 4000\n        argObj.introTime = 250\n        argObj.introVFX = `~Portals/Portal_${portalColor}_H_400x400.webm`\n        argObj.outroVFX = `~Portals/Masked/Portal_${portalColor}_H_NoBG_400x400.webm`\n        break;\n    case 3:\n        argObj.duration = 3000\n        argObj.introTime = 1000\n        argObj.introVFX = '~Energy/SwirlingSparkles_01_Regular_${color}_400x400.webm'\n        argObj.outroVFX = '~Fireworks/Firework*_02_Regular_${color}_600x600.webm'\n        break;\n    default:\n        jez.badNews(\"Really, you couldn't pick one of the three defined effects?\",\"warn\")\n}\nif (TL > 2) \n    for (let key in argObj) jez.trace(`${MACRO} | argObj.${key}`, argObj[key])\n//-------------------------------------------------------------------------------------------------\njez.spawnAt(MINION, aToken, aActor, aItem, argObj)\n//-------------------------------------------------------------------------------------------------\n// Post message\n//\nlet chatMessage = game.messages.get(args[args.length - 1].itemCardId);\nmsg = `<b>${aToken.name}</b> summons <b>${MINION_NAME}</b> to the field.`;\njez.addMessage(chatMessage, { color: jez.randomDarkColor(), fSize: 15, msg: msg, tag: \"saves\" })\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************/",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}