{
  "name": "Cloudkill",
  "type": "spell",
  "img": "icons/magic/air/fog-gas-smoke-swirling-green.webp",
  "data": {
    "description": {
      "value": "<p>%TOKENNAME% creates a 20-foot-radius sphere of poisonous, yellow-green fog centered on a point you choose within range. The fog spreads around corners. It lasts for the duration or until strong wind disperses the fog, ending the spell. Its area is heavily obscured.</p>\n<p>When a creature enters the spell's area for the <strong>first time on a turn </strong>or<strong> starts its turn</strong> there, that creature must make a <strong>Constitution saving throw</strong>. The creature <strong>takes 5d8 poison</strong> damage on a failed save, or half as much damage on a successful one. Creatures are affected even if they hold their breath or don't need to breathe.</p>\n<p>The<strong> fog moves 10 feet away </strong>from you at the start of each of your turns, rolling along the surface of the ground. The vapors, being heavier than air, sink to the lowest level of the land, even pouring down openings.</p>\n<p><strong>Higher Levels.Â </strong>When you cast this spell using a spell slot of 6th level or higher, the damage increases by 1d8 for each slot level above 5th.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: This item provides the caster with a temprary at-will spell to inflict the damage element of this spell.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 222",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 10,
      "units": "minute"
    },
    "target": {
      "value": 20,
      "width": null,
      "units": "ft",
      "type": "sphere"
    },
    "range": {
      "value": 120,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 5,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "core": {
      "sourceId": "Compendium.ActiveAuras.Active Auras Auras.8dL7Y3BMCV0L4Zjq"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Cloudkill",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Cloudkill.0.4.js\"\n/*****************************************************************************************\n * Cloudkill!\n * \n *   You create a 20-foot-radius sphere of poisonous, yellow-green fog centered on a point \n *   you choose within range. The fog spreads around corners. It lasts for the duration or \n *   until strong wind disperses the fog, ending the spell. Its area is heavily obscured.\n * \n *   When a creature enters the spell's area for the first time on a turn or starts its \n *   turn there, that creature must make a Constitution saving throw. The creature takes \n *   5d8 poison damage on a failed save, or half as much damage on a successful one. \n *   Creatures are affected even if they hold their breath or don't need to breathe.\n * \n *   The fog moves 10 feet away from you at the start of each of your turns, rolling \n *   along the surface of the ground. The vapors, being heavier than air, sink to the \n *   lowest level of the land, even pouring down openings.\n * \n *   Higher Levels. When you cast this spell using a spell slot of 6th level or higher, \n *   the damage increases by 1d8 for each slot level above 5th.\n * \n * 03/28/22 0.1 Creation of Macro\n * 05/03/22 0.2 Update for FoundryVTT 9.x (Tile.create)\n * 06/29/22 0.3 Fix for permission issue on game.scenes.current.createEmbeddedDocuments & \n *              canvas.scene.deleteEmbeddedDocuments\n * 07/01/22 0.4 Swap in calls to jez.tileCreate and jez.tileDelete\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nlet trcLvl = 1;\njez.trc(2, trcLvl, `=== Starting === ${MACRONAME} ===`);\nfor (let i = 0; i < args.length; i++) jez.trc(3, trcLvl,`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \nelse aActor = game.actors.get(LAST_ARG.actorId);\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\nconst ITEM_NAME = \"Cloudkill Effect\"\nconst SPEC_ITEM_NAME = `%%${ITEM_NAME}%%`               // Name as expected in Items Directory \nconst NEW_ITEM_NAME = `${aToken.name}'s ${ITEM_NAME}`   // Name of item in actor's spell book\nconst GRID_SIZE = canvas.scene.data.grid;               // Size of grid in pixels/square (e.g. 70)\nconst FEET_PER_GRID = 5                                 // Feet per on canvas grid\n//--------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n//if (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE removal\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n async function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.log(\"##### chatMsg\",chatMsg)\n    await jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * doOff is expected to be called when concentration drops and should remove the items passed as \n * arguments, the first will be a tile id.  It also needs to delete the temporary item.\n ***************************************************************************************************/\n async function doOff() {\n    const FUNCNAME = \"doOff()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // Delete the cloudkill tile\n    //\n    const TILE_ID = args[1];    // Must be a 12 character string:  chN3vMQvayMx6kWQ\n    jez.log(TILE_ID.length)\n    if (TILE_ID.length != 16) return\n    //-----------------------------------------------------------------------------------------------\n    // Delete the tile we just built with library function. \n    //\n    jez.tileDelete(TILE_ID)\n    //----------------------------------------------------------------------------------------------\n    // Delete the temporary item\n    //\n    let oldActorItem = aToken.actor.data.items.getName(NEW_ITEM_NAME)\n    if (oldActorItem) await deleteItem(aToken.actor, oldActorItem)\n    msg = `${NEW_ITEM_NAME} has been deleted from ${aToken.name}`\n    ui.notifications.info(msg);\n\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return;\n  }\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    const TEMPLATE_ID = args[0].templateId\n    const TEMPLATE = canvas.templates.objects.children.find(i => i.data._id === TEMPLATE_ID);\n    //-----------------------------------------------------------------------------------------------\n    // If template is a circle, figure out the HARD_OFFSET value to move from center to top left \n    //\n    const GRID_SIZE = canvas.scene.data.grid;               // Size of grid in pixels/square (e.g. 70)\n    const FEET_PER_GRID = 5                                 // Feet per on canvas grid\n    let topLeft = {}\n    if (TEMPLATE.data.t = \"circle\") {\n        let radius = TEMPLATE.data.distance               // e.g. Cloudkill 20 \n        let centerX = TEMPLATE.data.x\n        let centerY = TEMPLATE.data.y\n        topLeft.x = centerX - GRID_SIZE * radius / FEET_PER_GRID\n        topLeft.y = centerY - GRID_SIZE * radius / FEET_PER_GRID\n    } else {\n        topLeft.x = TEMPLATE.center.x;\n        topLeft.y = TEMPLATE.center.y;\n    }\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Place the VFX Tile\")\n    const TILE_ID = await placeTile(TEMPLATE_ID, topLeft);\n    //----------------------------------------------------------------------------------------------\n    copyEditItem(aToken)\n    jez.log(\"Post message to a chat card\")\n    msg = `An At-Will Spell \"${NEW_ITEM_NAME}\" has been added to ${aToken.name}'s spell book`\n    ui.notifications.info(msg);\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Call function to modify concentration effect to delete the VFX tile on concetration removal\")\n    modConcEffect(TILE_ID)\n    //----------------------------------------------------------------------------------------------\n    msg = `<b>${NEW_ITEM_NAME}</b> has been added to ${aToken.name}'s spell book, as an At-Will spell.`\n    await postResults(msg)\n    jez.log(`-------------- Finished --- ${MACRO} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\nasync function placeTile(TEMPLATE_ID, templateCenter) {\n    const FUNCNAME = \"placeTile(TEMPLATE_ID, templateCenter)\";\n    jez.trc(2,trcLvl,`--- Starting --- ${MACRONAME} ${FUNCNAME} ---`);\n    jez.trc(3,trcLvl,\"Parameters\",\"TEMPLATE_ID\",TEMPLATE_ID,\"templateCenter\",templateCenter)\n\n    canvas.templates.get(TEMPLATE_ID).document.delete();\n    let tileProps = {        \n        x: templateCenter.x,\n        y: templateCenter.y,\n        img: \"modules/jb2a_patreon/Library/1st_Level/Fog_Cloud/FogCloud_03_Regular_Green02_800x800.webm\",\n        width: GRID_SIZE * 8,   // 20 foot across\n        height: GRID_SIZE * 8,   // 20 foot tall \n        alpha: 0.5\n    }\n    //-----------------------------------------------------------------------------------------------\n    // Call library function to create the new tile, catching the id returned.  T\n    //\n    return await jez.tileCreate(tileProps)\n}\n/***************************************************************************************************\n * Modify existing effect to include a midi-qol overtime saving throw element\n ***************************************************************************************************/\nasync function modConcEffect(tileId) {\n    const EFFECT = \"Concentrating\"\n    //----------------------------------------------------------------------------------------------\n    // Seach the token to find the just added effect\n    //\n    await jez.wait(1000)\n    let effect = await aToken.actor.effects.find(i => i.data.label === EFFECT);\n    jez.log(`**** ${EFFECT} found?`, effect)\n    if (!effect) {\n        msg = `${EFFECT} sadly not found on ${aToken.name}.`\n        ui.notifications.error(msg);\n        postResults(msg);\n        return (false);\n    }\n    //----------------------------------------------------------------------------------------------\n    // Define the desired modification to existing effect. In this case, a world macro that will be\n    // given arguments: VFX_Name and Token.id for all affected tokens\n    //    \n    //effect.data.changes.push({key: `macro.execute`, mode: jez.CUSTOM, value:`entangle_helper ${VFX_NAME} ${label}`, priority: 20})\n    effect.data.changes.push({key: `macro.itemMacro`, mode: jez.CUSTOM, value:`${tileId}`, priority: 20})\n    jez.log(`effect.data.changes`, effect.data.changes)\n    //----------------------------------------------------------------------------------------------\n    // Apply the modification to existing effect\n    //\n    const result = await effect.update({ 'changes': effect.data.changes });\n    if (result) jez.log(`Active Effect ${EFFECT} updated!`, result);\n}\n/***************************************************************************************************\n * Copy the temporary item to actor's spell book and edit it as appropriate\n ***************************************************************************************************/\nasync function copyEditItem(token5e) {\n    const FUNCNAME = \"copyEditItem()\";\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    let oldActorItem = token5e.actor.data.items.getName(NEW_ITEM_NAME)\n    if (oldActorItem) await deleteItem(token5e.actor, oldActorItem)\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Get the item from the Items directory and slap it onto the active actor\")\n    let itemObj = game.items.getName(SPEC_ITEM_NAME)\n    if (!itemObj) {\n        msg = `Failed to find ${SPEC_ITEM_NAME} in the Items Directory`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return (false)\n    }\n    console.log('Item5E fetched by Name', itemObj)\n    await replaceItem(token5e.actor, itemObj)\n    //----------------------------------------------------------------------------------------------\n    jez.log(\"Find the item on the actor\")\n    let aActorItem = token5e.actor.data.items.getName(SPEC_ITEM_NAME)\n    jez.log(\"aActorItem\", aActorItem)\n    if (!aActorItem) {\n        msg = `Failed to find ${SPEC_ITEM_NAME} on ${token5e.name}`\n        ui.notifications.error(msg);\n        postResults(msg)\n        return (false)\n    }\n    //-----------------------------------------------------------------------------------------------\n    jez.log(`Remove the don't change this message assumed to be embedded in the item description.  It \n     should be of the form: <p><strong>%%*%%</strong></p> followed by white space`)\n    const searchString = `<p><strong>%%.*%%</strong></p>[\\s\\n\\r]*`;\n    const regExp = new RegExp(searchString, \"g\");\n    const replaceString = ``;\n    let content = await duplicate(aActorItem.data.data.description.value);\n    content = await content.replace(regExp, replaceString);\n    let itemUpdate = {\n        'name': NEW_ITEM_NAME,              // Change to actor specific name for temp item\n        'data.description.value': content,  // Drop in altered description\n        'data.level': LAST_ARG.spellLevel,  // Change spell level of temp item \n        'data.damage.parts' : [[`${LAST_ARG.spellLevel}d8`, \"poison\"]]\n    }\n    jez.log(\"itemUpdate\",itemUpdate)\n    await aActorItem.update(itemUpdate)\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n/*************************************************************************************\n * replaceItem\n * \n * Replace or Add targetItem to inventory of actor5e passed as parms\n *************************************************************************************/\n async function replaceItem(actor5e, targetItem) {\n    await deleteItem(actor5e, targetItem)\n    return (actor5e.createEmbeddedDocuments(\"Item\", [targetItem.data]))\n}\n/*************************************************************************************\n * deleteItem\n * \n * Delete targetItem to inventory of actor5e passed as parms\n *************************************************************************************/\n async function deleteItem(actor5e, targetItem) {\n    let itemFound = actor5e.items.find(item => item.data.name === targetItem.data.name && item.type === targetItem.type)\n    if (itemFound) await itemFound.delete();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}