{
  "name": "Forceful Hand",
  "type": "feat",
  "img": "modules/jb2a_patreon/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Red_Thumb.webp",
  "data": {
    "description": {
      "value": "<p><span style=\"color:#191813;font-size:13px\">The hand attempts to push a creature within 5 feet of it in a direction you choose.</span></p>\n<p><span style=\"color:#191813;font-size:13px\">Make a check with the <strong>hand’s Strength</strong> contested by the <strong>Strength (Athletics) </strong>check of the target. If the target is <strong>Medium or smaller, you have advantage </strong>on the check.</span></p>\n<p><span style=\"color:#191813;font-size:13px\">If you succeed, the hand pushes the target up to 5 feet plus a number of feet equal to five times your Spellcasting ability modifier. The hand moves with the target to remain within 5 feet of it.</span></p>\n<hr />\n<p><strong>FoundryVTT: </strong>Skill contest is automated.  Subsequent movement is left to the players.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 1,
      "condition": "Caster uses its bonus action to command Arcane Hand"
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 5,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Forceful Hand",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Forceful_Hand.0.2.js\"\n/*****************************************************************************************\n * Initiate a Forceful Hand push for Arcane Hand\n * \n *   The hand attempts to push a creature within 5 feet of it in a direction you choose.\n * \n *   Make a check with the hand's Strength contested by the Strength (Athletics) check of \n *   the target. If the target is Medium or smaller, you have advantage on the check.\n * \n *   If you succeed, the hand pushes the target up to 5 feet plus a number of feet equal \n *   to five times your Spellcasting ability modifier. The hand moves with the target to \n *   remain within 5 feet of it. \n * \n * 06/03/22 0.1 JGB Creation\n *****************************************************************************************/\n const MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\n jez.log(`============== Starting === ${MACRONAME} =================`);\n for (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\n const LAST_ARG = args[args.length - 1];\n let aActor;         // Acting actor, creature that invoked the macro\n if (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; \n else aActor = game.actors.get(LAST_ARG.actorId);\n let aToken;         // Acting token, token for creature that invoked the macro\n if (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); \n else aToken = game.actors.get(LAST_ARG.tokenId);\n let aItem;          // Active Item information, item invoking this macro\n if (args[0]?.item) aItem = args[0]?.item; \n else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n let msg = \"\";\n //----------------------------------------------------------------------------------\n // Run the main procedures, choosing based on how the macro was invoked\n //\n if (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n jez.log(`============== Finishing === ${MACRONAME} =================`);\n /***************************************************************************************************\n  *    END_OF_MAIN_MACRO_BODY\n  *                                END_OF_MAIN_MACRO_BODY\n  *                                                             END_OF_MAIN_MACRO_BODY\n  ***************************************************************************************************\n  * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n  ***************************************************************************************************/\n async function preCheck() {\n     if (args[0].targets.length !== 1) {     // If not exactly one target, return\n         msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n         postResults(msg);\n         return (false);\n     }\n     return(true)\n }\n /***************************************************************************************************\n  * Post results to the chat card\n  ***************************************************************************************************/\n  function postResults(msg) {\n     jez.log(msg);\n     let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n     jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n }\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    if (!await preCheck()) return (false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    //----------------------------------------------------------------------------------------------\n    // Get size of target and set advantage appropriately\n    //\n    let tSizeObj = await jez.getSize(tToken)\n    let advan = null\n    if (tSizeObj.value <= 3) advan = true\n    //----------------------------------------------------------------------------------------------\n    // Roll strength check for the active actor\n    //\n    let aActorRoll = await aActor.rollAbilityTest('str', \n        { chatMessage: false, fastforward: true, advantage: advan });\n    jez.log(\"aActorRoll\",aActorRoll)\n    let rollType = aActorRoll.terms[0].modifiers[0] === \"kh\" ? \" (Advantage)\" : \n        aActorRoll.terms[0].modifiers[0] === \"kl\" ? \" (Disadvantage)\" : \"\";\n    jez.log(\"rollType\",rollType)\n    game.dice3d?.showForRoll(aActorRoll);\n    jez.log(` Player's str check: ${aActorRoll.total}`);\n    //----------------------------------------------------------------------------------------------\n    // Roll athletics check for the targeted Actor\n    //\n    let tActorRoll = await tActor.rollSkill('ath', { chatMessage: false, fastForward: true });\n    game.dice3d?.showForRoll(tActorRoll);\n    jez.log(` Target's athletics check: ${tActorRoll.total}`);\n    //----------------------------------------------------------------------------------------------\n    // Determine who won the contest (used in ugly dialog)\n    //\n    let playerWin = \"\";\n    let targetWin = \"\";\n    aActorRoll.total >= tActorRoll.total ? playerWin = `success` : targetWin = `success`;\n    //----------------------------------------------------------------------------------------------\n    // Build and post complex chat message reporting contested results\n    //\n    await postChatCard()\n    await jez.wait(100)\n    //----------------------------------------------------------------------------------------------\n    // Post results card \n    //\n    if (playerWin) {\n        let distance = 5 + Math.max(0,jez.getCastMod(aToken))*5\n        msg = `<b>${tToken.name}</b> is pushed up to ${distance} feet. The hand moves with the \n        target to remain within 5 feet of it.`\n        jez.postMessage({\n            color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n            msg: msg, title: `${tToken.name} is pushed...`, token: aToken\n        })\n    }\n    else {\n        msg = `<b>${tToken.name}</b> is not moved by ${aToken.name}'s push.`\n        jez.postMessage({\n            color: jez.randomDarkColor(), fSize: 14, icon: aItem.img,\n            msg: msg, title: `${tToken.name} holds firm!`, token: aToken\n        })\n    }\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    /****************************************************************************************\n     * Build godawful messy format for a chat card reporting results\n     ***************************************************************************************/\n    async function postChatCard() {\n        (async () => {\n            let damage_results = `\n <div class=\"flexrow 2\">\n <div><div style=\"text-align:center\">${aToken.name}</div></div><div><div style=\"text-align:center\">${tToken.name}</div></div>\n </div>\n <div class=\"flexrow 2\">\n     <div>\n         <div style=\"text-align:center\">Strength${rollType}</div>\n         <div class=\"dice-roll\">\n             <div class=\"dice-result\">\n                 <div class=\"dice-formula\">${aActorRoll.formula}</div>\n                 <div class=\"dice-tooltip\">\n                     <div class=\"dice\">\n                         <header class=\"part-header flexrow\">\n                             <span class=\"part-formula\">${aActorRoll.formula}</span>\n                             <span class=\"part-total\">${aActorRoll.total}</span>\n                         </header>\n                     </div>\n                 </div>\n                 <h4 class=\"dice-total ${playerWin}\">${aActorRoll.total}</h4>\n             </div>\n         </div>\n     </div>\n     <div>\n         <div style=\"text-align:center\">Athletics</div>\n         <div class=\"dice-roll\">\n             <div class=\"dice-result\">\n                 <div class=\"dice-formula\">${tActorRoll.formula}</div>\n                 <div class=\"dice-tooltip\">\n                     <div class=\"dice\">\n                         <header class=\"part-header flexrow\">\n                             <span class=\"part-formula\">${tActorRoll.formula}</span>\n                             <span class=\"part-total\">${tActorRoll.total}</span>\n                         </header>\n                     </div>\n                 </div>\n                 <h4 class=\"dice-total ${targetWin}\">${tActorRoll.total}</h4>\n             </div>\n         </div>\n     </div>\n     \n </div>`;\n            jez.log(\" Built damage results string\");\n            const chatMessage = game.messages.get(args[0].itemCardId);\n            let content = duplicate(chatMessage.data.content);\n            const searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n            const replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${damage_results}`;\n            content = content.replace(searchString, replaceString);\n            await chatMessage.update({ content: content });\n            await ui.chat.scrollBottom();\n        })();\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.Gjl2W9PVPGFqyL3a"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}