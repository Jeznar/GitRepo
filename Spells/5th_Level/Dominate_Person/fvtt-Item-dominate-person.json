{
  "name": "Dominate Person",
  "type": "spell",
  "img": "Icons_JGB/Spells/4th_Level/Dominated.png",
  "data": {
    "description": {
      "value": "<p>You attempt to beguile a humanoid that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw.</p>\n<p><a href=\"https://www.dndbeyond.com/spells/dominate-person\" target=\"_blank\" rel=\"noopener\">See D&amp;D Beyond for more information.</a></p>\n<p><strong>At Higher Levels.</strong> <span style=\"color:#191813;font-size:13px;font-family:var(--font-primary)\">When you cast this spell using a 6th-level spell slot, the duration is concentration, up to 10 minutes. When you use a 7th-level spell slot, the duration is concentration, up to 1 hour. When you use a spell slot of 8th level or higher, the duration is concentration, up to 8 hours.</span></p>\n<hr />\n<p><strong>FoundryVTT: </strong>Initial saving throw will need to have advantage save handled manually.  Other elements are automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB pg. 234",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": "['humanoid'].includes('@raceOrType')"
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": null,
      "scaling": "spell"
    },
    "level": 5,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": ""
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "KGpubuAbqZYammtI",
      "changes": [
        {
          "key": "macro.CE",
          "mode": 0,
          "value": "Dominated",
          "priority": "20"
        },
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/magic/air/air-burst-spiral-large-pink.webp",
      "label": "Dominate Person",
      "transfer": false,
      "flags": {
        "dae": {
          "selfTarget": false,
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "core": {
          "statusId": ""
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "macro.CE",
        "macro.itemMacro"
      ]
    }
  ],
  "flags": {
    "dynamiceffects": {
      "equipActive": true,
      "alwaysActive": false,
      "effects": [
        {
          "modSpecKey": "flags.dnd5e.conditions",
          "value": "Charmed",
          "mode": "+",
          "targetSpecific": false,
          "id": 1,
          "itemId": "v1hPfUV2Vn5h2yNH",
          "active": true,
          "_targets": []
        }
      ]
    },
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false
    },
    "core": {
      "sourceId": "Compendium.Dynamic-Effects-SRD.DAE SRD Spells.Gm518PXVa9c81fdB"
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro,[postActiveEffects]Run_RuneVFX_bySaves",
      "effectActivation": true
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Dominate Person",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Dominated.0.3.js\"\n/*****************************************************************************************\n * This macro can be called by: \"Dominate Beast\", \"Dominate Person\", or \"Dominate Monster\"\n * Parse the item name to nab type of critter targeted by this casting so different \n * messages can be posted.\n * \n * 08/06/22 0.1 Creation of Macro from Hideous_Laughter.0.3.js\n * 08/08/22 0.2 Attempting direct roll of saving through instead of workflow madness\n * 10/14/22 0.3 Fix bug that causes save to occur when any token is damaged \n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim of the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId);\nelse aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//--------------------------------------------------------------------------------------------------\n// Setup global variables\n//\nconst EFFECT_NAME = \"Dominated\"                     // Name of effect to be applied\nconst CRITTER_TYPES = [\"Beast\", \"Monster\", \"Person\"]  // Types of critters for this spell\nconst FLAG_NAME = EFFECT_NAME                       // Name of flag to be used\nconst origin = LAST_ARG.origin; if (TL > 2) jez.trace(`${TAG} origin`, origin)\nlet itemUuid = null;                                // Declared so can be set in an if code block                            \nif (origin) itemUuid = await fromUuid(origin); if (TL > 2) jez.trace(`${TAG} itemUuid`, itemUuid)\nconst oActor = itemUuid?.actor; if (TL > 2) jez.trace(`${TAG} origin actor`, oActor)\nconst GAME_RND = game.combat ? game.combat.round : 0;\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\n//--------------------------------------------------------------------------------------------------\n// This macro can be called by: \"Dominate Beast\", \"Dominate Person\", or \"Dominate Monster\".  Parse  \n// the item name to nab type of critter targeted by this casting so different messages can be posted.\n//\nconst CRITTER_TYPE = aItem.name.split(\" \")[1]; if (TL > 2) jez.trace(`${TAG} crtter type`, CRITTER_TYPE)\nif (!CRITTER_TYPE) return jez.badNews(`Could not parse creature type from ${aItem.name}`, \"e\")\nif (!CRITTER_TYPES.includes(CRITTER_TYPE)) return jez.badNews(`${CRITTER_TYPE} not supported`, \"e\")\n//--------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0] === \"on\") await doOn();                     // DAE Application\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\nif (args[0] === \"each\") doEach();\t\t\t\t\t    // DAE every round\nif (TL > 0) jez.trace(`${TAG} === Finishing === ${MACRONAME}`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Perform the code that runs when this macro is launched by DAE placing effect\n * \n * This runs on actor that has the affected applied to it\n ***************************************************************************************************/\nasync function doOn() {\n    const FUNCNAME = \"doOn()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //----------------------------------------------------------------------------------------------\n    // Crymic retained code\n    // Next line is what Crymic used, sadly it triggers when any token is damaged.\n    // let hookId = Hooks.on(\"midi-qol.DamageRollComplete\", damageCheck);\n    //----------------------------------------------------------------------------------------------\n    // Setup a hook that fires when the target and only the target is subject to damage\n    // Logic taken from Regeneration_Vampire_Initialize.0.1.js.  This fixes bug as of version 0.4.\n    let hookId = Hooks.on(\"midi-qol.DamageRollComplete\", (workflow) => {\n        if (workflow.targets.first() === aToken) damageCheck(workflow)\n    })\n    //----------------------------------------------------------------------------------------------\n    // Set a Flag with data to be retrieved later\n    //\n    let flagObj = {\n        hookId: hookId,\n        aTokenId: aToken.id,\n        oActorUuid: oActor.uuid,\n        oTokenName: oActor.data.token.name\n    }\n    DAE.setFlag(aActor, FLAG_NAME, flagObj);\n    //----------------------------------------------------------------------------------------------\n    // Play the VFX on the target\n    //\n    runVFX(aToken);\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is launched by DAE removing effect\n ***************************************************************************************************/\nasync function doOff() {\n    const FUNCNAME = \"doOff()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //----------------------------------------------------------------------------------------------\n    let flagObj = DAE.getFlag(aActor, FLAG_NAME); if (TL > 2) jez.trace(`${TAG} flagObj`, flagObj)\n    let hookId = flagObj.hookId; if (TL > 2) jez.trace(`${TAG} hookId`, hookId)\n    // let hookId = DAE.getFlag(aActor, FLAG_NAME);                    if (TL>2) jez.trace(`${TAG} hookId`,hookId)\n    Hooks.off(\"midi-qol.DamageRollComplete\", hookId);               // Turn off the hook that was set\n    if (TL > 2) jez.trace(`${TAG} aActor ${aActor.name}`, aActor)\n    if (TL > 2) jez.trace(`${TAG} oActor ${oActor.name}`, oActor)\n    DAE.unsetFlag(aActor, FLAG_NAME);                               // Clear the flag from aActor \n    let conc = oActor.effects.find(i => i.data.label === \"Concentrating\");// Get concentrating data object\n    if (conc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: oActor.uuid, effects: [conc.id] });\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/***************************************************************************************************\n * Crymic's damageCheck(workflow)\n ***************************************************************************************************/\nasync function damageCheck(workflow) {\n    const FUNCNAME = \"damageCheck(workflow)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.trace(`${TAG} --- Starting ${FUNCNAME} ---`, \"workflow\", workflow);\n    if (TL > 3) jez.trace(`${TAG} initial aToken.actor.data.flags[\"midi-qol\"]`, aToken.actor.data.flags[\"midi-qol\"])\n    //----------------------------------------------------------------------------------------------\n    // Get the origin token information by processing the Flag and then finding the token \n    //\n    let flagObj = DAE.getFlag(aActor, FLAG_NAME); if (TL > 2) jez.trace(`${TAG} flagObj`, flagObj)\n    let oTokenName = flagObj.oTokenName; if (TL > 2) jez.trace(`${TAG} oTokenName`, oTokenName)\n    //----------------------------------------------------------------------------------------------\n    // (Crymic) Place Damage Save Effect on afflicted token ... this is a VERY short duration effect \n    // that manages the saving throw from damage.  \n    //\n    const C_DESC = `Description of spell effect here.  DC${SAVE_DC}.`\n    let effectData = [{\n        label: \"Damage Save\",\n        icon: \"icons/skills/wounds/injury-triple-slash-bleed.webp\",\n        origin: origin,\n        disabled: false,\n        flags: {\n            dae: { specialDuration: [\"isDamaged\"] },\n            convenientDescription: C_DESC\n        },\n        duration: { rounds: 1, seconds: 6, startRound: GAME_RND, startTime: game.time.worldTime },\n        // changes: [{ key: `flags.midi-qol.advantage.ability.save.all`, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: 1, priority: 20 }]\n    }];\n    let damageSave = await aActor.effects.find(i => i.data.label === \"Damage Save\");\n    if (!damageSave) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: LAST_ARG.actorUuid, effects: effectData });\n    await jez.wait(250);\n    //----------------------------------------------------------------------------------------------\n    // If the triggering attack did more than zero damage further evaluation needed\n    //\n    if (TL > 2) jez.trace(`${TAG} workflow`, workflow)\n    if (workflow.damageTotal > 0) {\n        //----------------------------------------------------------------------------------------------\n        // Pop a simple dialog to determine if the save should be made at advantage\n        //\n        const Q_TITLE = `Fighting ${oTokenName} or Allies?`\n        const Q_TEXT = `If ${aToken.name} is fighting ${oTokenName} or allies of ${oTokenName} then the \n        save is made at advantage.<br><br>\n        Select Yes, if ${aToken.name} is in combat with ${oTokenName} or allies.<br><br>`\n        const FIGHTING = await Dialog.confirm({ title: Q_TITLE, content: Q_TEXT, });\n        if (TL > 1) jez.trace(`${TAG} ${aToken.name} is fighting ${oTokenName}`, FIGHTING)\n        if (TL > 3) jez.trace(`${TAG} point 3: aToken.actor.data.flags[\"midi-qol\"]`, aToken.actor.data.flags[\"midi-qol\"])\n        //----------------------------------------------------------------------------------------------\n        // Grab the workflow data so that the values can be dug out for the saving throw\n        //\n        if (TL > 2) jez.trace(`${TAG} workflow?.damageTotal`, workflow?.damageTotal)\n        let midiWorkFlow = await MidiQOL.Workflow.getWorkflow(origin);\n        //----------------------------------------------------------------------------------------\n        // Perform the saving throw\n        //\n        const SAVE_TYPE = midiWorkFlow.item.data.data.save.ability; if (TL > 1) jez.trace(`${TAG} midiWorkFlow save type`, SAVE_TYPE)\n        const SAVE_DC = midiWorkFlow.item.data.data.save.dc; if (TL > 1) jez.trace(`${TAG} midiWorkFlow save DC`, SAVE_DC)\n        const FLAVOR = \"Tasty Message\"\n        if (TL > 2) jez.trace(`${TAG} Save input data`, \"SAVE_TYPE\", SAVE_TYPE, \"SAVE_DC\", SAVE_DC,\n            \"FLAVOR\", FLAVOR, \"FIGHTING\", FIGHTING, \"aToken.actor\", aToken.actor)\n        let saved = true\n        let save = null\n        if (TL > 3) jez.trace(`${TAG} just before save aToken.actor.data.flags[\"midi-qol\"]`, aToken.actor.data.flags[\"midi-qol\"])\n        if (FIGHTING) {\n            if (TL > 2) jez.trace(`${TAG} Rolling save with advantage -- flags[\"midi-qol\"]`, aToken.actor.data.flags[\"midi-qol\"])\n            save = (await aToken.actor.rollAbilitySave(SAVE_TYPE, { advantage: true, chatMessage: true }));\n        } else {\n            if (TL > 2) jez.trace(`${TAG} Rolling save normally -- flags[\"midi-qol\"]`, aToken.actor.data.flags[\"midi-qol\"])\n            save = (await aToken.actor.rollAbilitySave(SAVE_TYPE, { chatMessage: true }));\n        }\n        if (save.total < SAVE_DC) {\n            if (TL > 1) jez.trace(`${TAG} ${aToken.name} failed: ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n            saved = false;\n        } else {\n            if (TL > 1) jez.trace(`${TAG} ${aToken.name} saved: ${SAVE_TYPE}${save.total} vs ${SAVE_DC}`)\n        }\n        //----------------------------------------------------------------------------------------------\n        // Block below is a continuation of Crymic's code that I couldn't get to work, keeping it for referece\n        // if (FIGHTING) {  // None of the below actually seem to work to cause advantage to be rolled in workflow\n        //     midiWorkFlow.advantage = FIGHTING;    if (TL>2) jez.trace(`${TAG} midiWorkFlow.advantage`, midiWorkFlow?.advantage )\n        //     midiWorkFlow.advantageSaves = new Set([aToken])\n        //     midiWorkFlow.pressedKeys.advantage = true\n        //     console.log(\"===> midiWorkFlow.advantageSaves\", midiWorkFlow.advantageSaves)\n        // }\n        // // let itemCard = await MidiQOL.showItemCard.bind(midiWorkFlow.item)(false, midiWorkFlow, false);\n        // // jez.log(\">>> itemCard\", itemCard)\n        // // midiWorkFlow.itemCardId = await itemCard.id;\n        // await midiWorkFlow.checkSaves(); // Original line that exectuted the save\n        // if (TL>2) jez.trace(`${TAG} midiWorkFlow.advantageSaves 2`, midiWorkFlow.advantageSaves )\n        // if (TL>2) jez.trace(`${TAG} midiWorkFlow`, midiWorkFlow )\n        // await midiWorkFlow.displaySaves(false, true);\n        // let save = await midiWorkFlow.saveResults[0];               if (TL>1) jez.trace(`${TAG} midiWorkFlow save`, save )\n        // game.dice3d?.showForRoll(save);\n        //----------------------------------------------------------------------------------------------\n        await ui.chat.scrollBottom();                           // Move chat to bottom \n        //----------------------------------------------------------------------------------------------\n        let tableName = \"\"\n        let quip = \"\"\n        if (save.total >= SAVE_DC) {                            // Save was made\n            let conc = oActor.effects.find(i => i.data.label === \"Concentrating\"); if (TL > 1) jez.trace(`${TAG} Concentrating Effect on ${oActor.name}`, conc)\n            bubbleForAll(aToken.id, ``, true, true)\n            if (conc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: oActor.uuid, effects: [conc.id] });\n            ChatMessage.create({\n                user: game.user._id,\n                speaker: ChatMessage.getSpeaker({ token: aToken }),\n                content: `${aToken.name} is no longer dominated by ${oTokenName}`,\n                type: CONST.CHAT_MESSAGE_TYPES.EMOTE\n            });\n            tableName = \"Dominated_Expired\"\n            quip = `${oTokenName}, you dominate me no more!`\n            msg = `Breaks free of ${oTokenName}'s domination.`\n        } else {\n            runVFX(aToken);\n            tableName = \"Dominated_Damaged\"\n            quip = `Ouch! But I still serve ${oTokenName}`\n            msg = `Remains dominated by ${oTokenName}.`\n        }\n        //----------------------------------------------------------------------------------\n        // Nab something witty (I hope) from the tableName table\n        //\n        let table = game.tables.getName(tableName);\n        if (table) {\n            if (TL > 2) jez.trace(`${TAG} ${tableName} table`, table)\n            let roll = await table.roll();\n            quip = roll.results[0].data.text;\n        } else jez.badNews(`No (${tableName}) table found, using default.`, \"i\")\n        quip = quip.replace(\"%SOURCE%\", oTokenName);\n        //----------------------------------------------------------------------------------\n        // Bubble the statement onto the screen\n        //\n        bubbleForAll(aToken.id, quip, true, true)\n        ChatMessage.create({\n            user: game.user._id,\n            speaker: ChatMessage.getSpeaker({ token: aToken }),\n            content: msg,\n            type: CONST.CHAT_MESSAGE_TYPES.EMOTE\n        });\n    }\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n}\n/***************************************************************************************************\n *    END_OF_CRYMIC_CODE\n *                                END_OF_CRYMIC_CODE\n *                                                             END_OF_CRYMIC_CODE\n ***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //-----------------------------------------------------------------------------------------------\n    if (!preCheck()) return;\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken.actor;\n    //----------------------------------------------------------------------------------------------\n    // Verify prerequisite modules\n    //\n    if ((!(game.modules.get(\"jb2a_patreon\")?.active || game.modules.get(\"JB2A_DnD5e\")?.active) ||\n        !(game.modules.get(\"sequencer\")?.active))) return jez.badNews(`Prerequisite modules not found`, \"e\");\n    //----------------------------------------------------------------------------------------------\n    // Handle successful save, post messge and exit.\n    //\n    if (LAST_ARG.failedSaves.length === 0) {    // Target made it's save\n        if (TL > 2) jez.trace(`${TAG} Target ${tToken.name} made its saving throw`);\n        msg = `${tToken.name} shrugs off the effects of ${aToken.name}'s spell.`\n        postResults(msg)\n        return;\n    }\n    //----------------------------------------------------------------------------------------------\n    // Make sure target is correct creature type for this spell\n    //\n    let race = jez.getRace(tToken)\n    if (race === \"humanoid\") race = \"person\"                            // Flip humanoid to person\n    if (TL > 2) jez.trace(`${TAG} Target ${tToken.name} race is ${race}.`);\n    if (CRITTER_TYPE !== \"Monster\")\n        if (race !== CRITTER_TYPE.toLowerCase()) {                          // Target race not a match for this spell\n            if (TL > 2) jez.trace(`${TAG} Target ${tToken.name} is a {race} needs to be ${CRITTER_TYPE}`);\n            msg = `${tToken.name} is wrong type of creature for ${aToken.name}'s spell.`\n            let conc = aActor.effects.find(i => i.data.label === \"Concentrating\");// Get concentrating data object\n            if (conc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: aActor.uuid, effects: [conc.id] });\n            postResults(msg)\n            return;\n        }\n    //----------------------------------------------------------------------------------------------\n    // Modify recently created effect to have a convenientDescription\n    //\n    let effect = await tToken.actor.effects.find(i => i.data.label === EFFECT_NAME);\n    if (!effect) return jez.badNews(`Could not find ${EFFECT_NAME} effect on ${tToken.name}`, \"e\")\n    let ceDesc = `Dominated by ${aToken.name}. DC${SAVE_DC} WIS Save to clear each time damaged.`\n    await effect.update({ flags: { convenientDescription: ceDesc } });\n    //----------------------------------------------------------------------------------------------\n    // Update the convenientDescription of the base debuff, which should be aItem.name\n    //\n    effect = await tActor.effects.find(i => i.data.label === aItem.name);\n    if (!effect) return jez.badNews(`Could not find ${aItem.name} effect on ${tToken.name}`, \"e\")\n    ceDesc = `Base ${aItem.name} that manages other effects.`\n    await effect.update({ flags: { convenientDescription: ceDesc } });\n    //----------------------------------------------------------------------------------------------\n    // Update the convenientDescription of the \"Charmed\" debuff\n    //\n    effect = await tActor.effects.find(i => i.data.label === \"Charmed\");\n    if (!effect) return jez.badNews(`Could not find \"Charmed\" effect on ${tToken.name}`, \"e\")\n    ceDesc = `Can't attack ${aToken.name}.  ${aToken.name} has advantage on social interactions.`\n    await effect.update({ flags: { convenientDescription: ceDesc } });\n    //----------------------------------------------------------------------------------------------\n    // Post results\n    //\n    msg = `${tToken.name} is dominated by ${aToken.name}`\n    postResults(msg)\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n}\n/***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nasync function preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return (true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked each round by DAE\n ***************************************************************************************************/\nasync function doEach() {\n    const FUNCNAME = \"doEach()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 0) jez.trace(`${TAG} --- Starting ---`);\n    //-----------------------------------------------------------------------------------------------\n    runVFX(aToken)\n    jez.postMessage({\n        color: jez.randomDarkColor(),\n        fSize: 14,\n        icon: aToken.data.img,\n        msg: `${aToken.name} finds everything hilariously funny and rolls on the ground in fits of \n        laughter. `,\n        title: `<b>${aToken.name}</b> ROFL!`,\n        token: aToken\n    })\n    if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n    return (true);\n}\n/***************************************************************************************************\n * Play a little VFX on our afflicted token\n ***************************************************************************************************/\nasync function runVFX(token5e) {\n    new Sequence()\n        .effect()\n        .file(\"modules/jb2a_patreon/Library/Cantrip/Toll_The_Dead/TollTheDeadSkullSmoke_01_Regular_*_400x400.webm\")\n        .atLocation(token5e)\n        .scaleToObject(1.5)\n        .waitUntilFinished(-500)\n        .play()\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}