{
  "name": "Mass Cure Wounds",
  "type": "spell",
  "img": "/systems/dnd5e/icons/spells/heal-jade-2.jpg",
  "data": {
    "description": {
      "value": "<p>A wave of healing energy washes out from a point of your choice within range. Choose <strong>up to six creatures</strong> in a <strong>30-foot-radius sphere</strong> centered on that point. Each target regains hit points equal to <strong>3d8 + your spellcasting mod</strong>. This spell has no effect on undead or constructs.</p>\n<p><strong>At Higher Levels. </strong>When you cast this spell using a spell slot of 6th level or higher, the healing increases by 1d8 for each slot level above 5th.</p>\n<hr />\n<p><strong>FoundryVTT</strong>: Pre-target up to 6 tokens that are inside target area. Target area handled manually.  Creatures unaffected by this spell generate a warning and need manual cleanup.</p>",
      "chat": "<p>A wave of healing energy washes out from a point of your choice within range. Choose up to six creatures in a 30-foot-radius sphere centered on that point. Each target regains hit points equal to 3d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs.</p>\n<p><strong>At Higher Levels. </strong>When you cast this spell using a spell slot of 6th level or higher, the healing increases by 1d8 for each slot level above 5th.</p>",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 258",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "heal",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [
        [
          "3d8 + @mod",
          "healing"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 5,
    "school": "evo",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "ddbimporter": {
      "id": 138459,
      "definitionId": 2181,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 258,
          "sourceType": 1
        }
      ],
      "tags": [
        "Healing"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "cf": {
      "id": "temp_gn79wuzqjq6"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.spells.eXnCMSBkNxWX03ft"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Mass Cure Wounds",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Mass_Cure_Wounds.0.1.js\"\n/*****************************************************************************************\n * Make sure up to six targets were targeted and run a runVFX on that target\n * \n *   A wave of healing energy washes out from a point of your choice within range. Choose \n *   up to six creatures in a 30-foot-radius sphere centered on that point. Each target \n *   regains hit points equal to 3d8 + your spellcasting mod. This spell has no effect on \n *   undead or constructs.\n * \n *   At Higher Levels. When you cast this spell using a spell slot of 6th level or higher, \n *   the healing increases by 1d8 for each slot level above 5th.\n * \n * 05/22/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; \nelse aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nlet msg = \"\";\n//--------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length === 0) {     // If not at least one target, return\n        msg = `Must target exactly least one target.`\n        ui.notifications.info(msg)\n        postResults(msg);\n        return (false);\n    }\n    if (args[0].targets.length > 6) {       // If not 6 or less targets, return\n        msg = `Must target no more than 6 targets, targeted ${args[0].targets.length}. \n        Manual cleanup needed.`\n        ui.notifications.warn(msg)\n        postResults(msg);\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\nasync function doOnUse() {\n    let immuneMsg = \"\"\n    //----------------------------------------------------------------------------------\n    // Run the preCheck function to make sure things are setup as best I can check them\n    //\n    if (!preCheck()) return;\n    //----------------------------------------------------------------------------------\n    // Loop through the targeted tokens\n    //\n    for (let i = 0; i < args[0].targets.length; i++) {\n        //----------------------------------------------------------------------------------\n        // Set the tToken\n        //\n        let tToken = canvas.tokens.get(args[0]?.targets[i]?.id); // Targeted Token\n        jez.log(`Processing ${tToken.name}`, tToken)\n        //-----------------------------------------------------------------------------------------------\n        // If target is immune type, add appropriate message else run the VFX\n        //\n        let immuneRaces = [\"undead\", \"construct\"];  // Set strings that define immune races\n        if (checkType(tToken, immuneRaces)) {\n            if (!immuneMsg) immuneMsg = `Some targets appears to be unaffected by ${aItem.name}. Heal \n            needs to be manually reversed on:<br><br>`\n            immuneMsg += `<b>${tToken.name}</b><br>`\n        } else jez.runRuneVFX(tToken, jez.getSpellSchool(aItem), \"yellow\")\n    }\n    if (immuneMsg) postResults(immuneMsg)\n    return\n}\n/***************************************************************************************************\n * Determine if passed token is of one of the types to check against, returning True if found\n ***************************************************************************************************/\nfunction checkType(token5e, typeArray) {\n    let tokenRace = token5e.actor.data.data.details.race;   // Shorten subsequent lines for Target Details Race\n    let tokenType = token5e.actor.data.data.details.type;   // Shorten subsequent lines for Target Details Type\n    //-----------------------------------------------------------------------------------------------\n    // Check to see if we have an immune or vulnerable creature type to deal with\n    //\n    let foundType = false;\n    if (token5e.actor.data.type === \"character\") {\n        jez.log(`${token5e.name} is a PC`, token5e);\n        if (tokenRace) {\n            for (let entity of typeArray) {\n                if (tokenRace.toLowerCase().includes(entity.toLowerCase())) {\n                    foundType = true;\n                }\n            }\n        } \n    } else {\n        //--------------------------------------------------------------------------------------\n        // Loop through each creature type found in the typeArray array.\n        //\n        for (let entity of typeArray) {\n            // If the creature type is custom...\n            if (tokenType.value.toLowerCase() === \"custom\") {\n                // Check custom creature type against our typeArray collection\n                if (tokenType.custom.toLowerCase().includes(entity.toLowerCase())) {\n                    foundType = true;\n                }\n            } \n            // If the creature has a subtype...\n            if (!tokenType.subtype == \"\") {\n                // if(tokenType.subtype) {\n                // If the creature's subtype is found in the typeArray collection...\n                if (tokenType.subtype.toLowerCase() === entity.toLowerCase()) {\n                    // Check creature Subtypes for the types in our typeArray collection.\n                    if (tokenType.custom.toLowerCase().includes(entity.toLowerCase())) {\n                        foundType = true;\n                    }\n                }\n            } \n            // Check creature type against our typeArray collection.\n            if (entity.toLowerCase() === tokenType.value.toLowerCase()) {\n                foundType = true;\n            } \n        }\n    }\n    return (foundType)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.0"
    }
  }
}