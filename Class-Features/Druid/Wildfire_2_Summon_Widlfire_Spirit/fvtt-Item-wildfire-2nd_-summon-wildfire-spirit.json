{
  "name": "Wildfire 2nd: Summon Wildfire Spirit",
  "type": "feat",
  "img": "worlds/travels-in-barovia/characters/531_-_Sparky/token.png",
  "data": {
    "description": {
      "value": "<p><span style=\"color:#191813\">You can summon the primal spirit bound to your soul. As an action, you can expend <strong>one use of your Wild Shape feature</strong> to summon your wildfire spirit, rather than assuming a beast form.</span></p>\n<p>@JournalEntry[k6ZlchMF9GxPv0YG]{Summon Wildfire Spirit}</p>\n<hr />\n<p><strong>FoundryVTT:</strong> Place the center of the targetting templete in the middle of a square.  Your familiar as defined by the @Item[MXF7BtFFaoNDB83Y]{Set Familiar Name} action from the <strong>Items Directory </strong>will be summoned from the <strong>Actors Directory</strong> to the center of the template.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Druid",
    "activation": {
      "type": "action",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "hour"
    },
    "target": {
      "value": 12.5,
      "width": null,
      "units": "ft",
      "type": "radius"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "2d6",
          "fire"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "dex",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Wildfire Druid 2nd Level",
    "recharge": {
      "value": 0,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "core": {
      "sourceId": "Item.PS2oobgbigYb26mP"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Wildfire 2nd: Summon Wildfire Spirit",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Summon_Wildfire_Spirit.0.7.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implemention of Summon Wildfire Spirit.  Based on macro Jon baked. \n * \n * args[0] contains a bunch of information for ItemMacro macros, including templateID of \n * the placed template (if any).  That ID can be accessed as: args[0].templateId\n * The list is documented at: https://gitlab.com/tposney/midi-qol#notes-for-macro-writers\n * \n * Module automated evocations apprently can eliminate the need for this macro.\n * \n * A Reddit guide on setting up automated resouce usage.\n * https://www.reddit.com/r/FoundryVTT/comments/j9q81f/guide_how_to_setup_skill_resource_consumption/\n * \n * 11/29/21 0.1 Add headers, debug and use of Summoner Module\n * 11/29/21 0.2 Try to make the macro actually, you know, work\n * 11/29/21 0.3 Cleanup the mostly working code\n * 11/29/21 0.4 Add use of a resource which is checked and decremented, on further study \n *              this was implemented by setting Resource Consumption of details page to\n *              resource.secondry.value (also primary and tertiary available)\n * 12/01/21 0.5 Fix maxHP added fixed 13 but should have been 5\n * 03/16/22 0.6 Update to use WARPGATE and add to GitRepo (also fix bug of graphic failing)\n * 12/10/22 0.7 Add timer watchdog, use of resource by name not position, and insert it into combat tracker\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3**/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_NAME = `Summon Wildfire Spirit`\n// const ACTOR_DATA = await aActor.getRollData();\nconst RESOURCE_NAME = \"Wildshapes\";\nconst IS_NPC = (aToken.document._actor.data.type === \"npc\") ? true : false;\n// const CLASS_LEVEL = jez.getClassLevel(aToken, 'Druid', { traceLvl: TL })\nconst DURATION = 3600 // Seconds\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse({ traceLvl: TL });          // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({ traceLvl: TL });                   // DAE removal\nif (TL > 1) jez.trace(`${TAG} === Finished ===`);\nif (TL > 1) jez.trace(`${TAG} --- Finished ---`);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n  jez.log(msg);\n  let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n  jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options = {}) {\n  const FUNCNAME = \"doOnUse(options={})\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  const TL = options.traceLvl ?? 0\n  if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n  if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n  // await jez.wait(100)\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Get the template coords and delete it.\n  //\n  const MINION = await jez.familiarNameGet(aToken.actor);\n  // Extract coordinates from the template and then delete it\n  const templateID = args[0].templateId\n  // Set the x,y coordinates of the targeting template that was placed.\n  const X = canvas.templates.get(templateID).data.x\n  const Y = canvas.templates.get(templateID).data.y\n  // Delete the template that had been placed\n  canvas.templates.get(templateID).document.delete()\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Ask if a resource should be consumed \n  //\n  const Q_TITLE = `Consume Resource?`\n  let qText = `<p>${aToken.name} is using <b>${SPELL_NAME}</b> to summon wildfire spirit.  This typically consumes one charge of \n    <b>Wildshape.</b></p>\n    <p>If you want to spend the charge (or use the NPC alternative), click <b>\"Yes\"</b>.</p>\n    <p>If you want to bypass spending the charge (with GM permission) click <b>\"No\"</b>.</p>\n    <p>If you want to cancel the spell click <b>\"Close\"</b> (top right of dialog).</p>`\n  const SPEND_RESOURCE = await Dialog.confirm({ title: Q_TITLE, content: qText, });\n  console.log('SPEND_RESOURCE', SPEND_RESOURCE)\n  if (SPEND_RESOURCE === null) return jez.badNews(`${SPELL_NAME} cancelled by player.`, 'i')\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Delete a pre-exisiting version of this spell, if any.\n  //\n  let oldEffect = await aActor.effects.find(ef => ef.data.label === SPELL_NAME) ?? null; // Added a null case.\n  if (oldEffect) await jez.deleteEffectAsGM(oldEffect.uuid, { traceLvl: TL })\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Deal with casting resource -- this needs to consider NPC and PC data structures\n  //\n  if (SPEND_RESOURCE) {\n    const CONTINUE = await spendResource({ traceLvl: TL })\n    if (!CONTINUE) return jez.badNews(`${SPELL_NAME} cancelled for lack of WildShapes`, 'w')\n  }\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Set the maximum hit points for the summoned familiar\n  //\n  const MAX_HP = (token.actor.getRollData().classes.druid.levels * 5) + 5;\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Do the actual summon\n  //\n  let sTokenIds = await summonCritter(X, Y, MINION, MAX_HP) // Returns array of summoned tokens\n  let wfsTokenId = sTokenIds[0]\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Apply Watchdog Timer effect to actor to track shape duration\n  //\n  await jez.wait(100)\n  addWatchdogEffect(wfsTokenId, MINION, DURATION, { traceLvl: TL })\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Post a more or less useful message to chat log and exit\n  //\n  msg = `<b>${aToken.name}</b> has summoned <b>${MINION}</b> (with ${MAX_HP}HP) to the field.  \n    Creatures within 10 feet are hit with fire damage from explosion.`\n  postResults(msg);\n  msg = `${MINION} has been summoned to serve ${aToken.name}`\n  postResults(msg)\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Add our Wildfire Spirit to combat tracker immediately after summoner if in combat\n  //\n  const ATOKEN_INIT_VALUE = aToken?.combatant?.data?.initiative\n  if (TL > 1) jez.trace(`${TAG} ${aToken.name} initiative`, ATOKEN_INIT_VALUE);\n  if (ATOKEN_INIT_VALUE) {\n    const WFS_INIT = ATOKEN_INIT_VALUE - 0.001\n    await jez.combatAddRemove('Add', wfsTokenId, { traceLvl: TL })\n    await jez.wait(500)\n    await jez.combatInitiative(wfsTokenId, { formula: WFS_INIT, traceLvl: 0 })\n  }\n  //-------------------------------------------------------------------------------------------------------------------------------\n  if (TL > 0) jez.trace(`${TAG} --- Finished ---`);\n  return true;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Add an effect to the using actor that can perform additional actions on the summoned actor.\n * \n * Expected input is a single token id and the name of the familiar\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function addWatchdogEffect(tokenId, famName, seconds, options = {}) {\n  const FUNCNAME = \"addWatchdogEffect(tokenId)\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  const TL = options.traceLvl ?? 0\n  if (TL === 1) jez.trace(`${TAG} Starting --- `);\n  if (TL > 1) jez.trace(`${TAG} Starting ---`, \"tokenId\", tokenId, \"famName\", famName, 'seconds', seconds, 'options', options);\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Make sure DEL_TOKEN_MACRO exists and is GM execute enabled\n  //\n  const RUNASGM_MACRO = jez.getMacroRunAsGM(\"DeleteTokenMacro\") // This macro will display ui.notification.error\n  if (!RUNASGM_MACRO) return false\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Proceed with adding watchdog\n  //\n  const CE_DESC = `${famName} can remain for up to ${seconds / 3600} hour(s)`\n  let effectData = {\n    label: SPELL_NAME,\n    icon: aItem.img,\n    origin: L_ARG.uuid,\n    disabled: false,\n    duration: {\n      rounds: seconds / 6, startRound: GAME_RND,\n      seconds: seconds, startTime: game.time.worldTime,\n      token: aToken.uuid, stackable: false\n    },\n    flags: {\n      dae: { macroRepeat: \"none\" },\n      convenientDescription: CE_DESC,\n      isConvenient: true,\n      isCustomConvenient : true\n    },\n    changes: [\n      { key: `macro.execute`, mode: jez.ADD, value: `DeleteTokenMacro ${tokenId}`, priority: 20 },\n      // { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `${aActor.uuid}`, priority: 20 },\n    ]\n  };\n  if (TL > 1) jez.trace(`${FNAME} | MidiQOL.socket().executeAsGM(\"createEffects\"`, \"aToken.actor.uuid\",\n    aToken.actor.uuid, \"effectData\", effectData);\n  await MidiQOL.socket().executeAsGM(\"createEffects\",\n    { actorUuid: aToken.actor.uuid, effects: [effectData] });\n  if (TL > 0) jez.trace(`---  Finished --- ${MACRO} ${FNAME} ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Summon the minion and update HP\n * \n * https://github.com/trioderegion/warpgate\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function summonCritter(x, y, summons, MAX_HP) {\n  //jez.log(\"function summonCritter(x,y,summons, number, updates)\",\"x\",x,\"y\",y,\"summons\",summons,\"MAX_HP\",MAX_HP);\n  //let updates1 = { actor: { \"data.attributes.hp\": { value: MAX_HP, max: MAX_HP } } }\n\n  let castMod = jez.getCastMod(aToken)\n  let profMod = jez.getProfMod(aToken)\n  jez.log(\":==> castMod\", castMod)\n  jez.log(\":==> profMod\", profMod)\n\n  // Below based on: https://github.com/trioderegion/warpgate/wiki/Summon-Spiritual-Badger\n  let updates = {\n    actor: {\n      'data.attributes.hp': { value: MAX_HP, max: MAX_HP }\n    },\n    embedded: {\n      Item: {\n        \"Flame Seed\": {\n          'data.damage.parts': [[`1d6 + ${profMod}`, \"fire\"]],\n          'data.attackBonus': `${castMod}[mod] + ${profMod}[prof]`,    // 5[mod] + 3[prof]\n        },\n      }\n    }\n  }\n\n  const OPTIONS = { controllingActor: aActor };   // Hides an open character sheet\n  const CALLBACKS = {\n    pre: async (template) => {\n      preEffects(template);\n      await warpgate.wait(500);\n    },\n    post: async (template, token) => {\n      postEffects(template);\n      await warpgate.wait(500);\n    }\n  };\n  return await warpgate.spawnAt({ x: x, y: y }, summons, updates, CALLBACKS, OPTIONS);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function preEffects(template) {\n  const VFX_FILE = \"jb2a.explosion.02.orange\"\n  new Sequence()\n    .effect()\n    .file(VFX_FILE)\n    .atLocation(template)\n    .center()\n    .scale(1.4)\n    .play()\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function postEffects(template) {\n  const VFX_OPACITY = 1.0\n  const VFX_SCALE = 1.0\n  const VFX_FILE = \"modules/jb2a_patreon/Library/Generic/Smoke/SmokePuff01_*_Regular_Grey_400x400.webm\"\n  new Sequence()\n    .effect()\n    .file(VFX_FILE)\n    .atLocation(template)\n    .center()\n    .scale(VFX_SCALE)\n    .opacity(VFX_OPACITY)\n    .waitUntilFinished(-1000)\n    .effect()\n    .file(VFX_FILE)\n    .atLocation(template)\n    .center()\n    .scale(VFX_SCALE * 1.5)\n    .opacity(VFX_OPACITY * 0.75)\n    .waitUntilFinished(-1000)\n    .effect()\n    .file(VFX_FILE)\n    .atLocation(template)\n    .center()\n    .scale(VFX_SCALE * 2.0)\n    .opacity(VFX_OPACITY * 0.5)\n    .waitUntilFinished(-1000)\n    .effect()\n    .file(VFX_FILE)\n    .atLocation(template)\n    .center()\n    .scale(VFX_SCALE * 2.5)\n    .opacity(VFX_OPACITY * 0.25)\n    .waitUntilFinished(-1000)\n    .play()\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOff(options = {}) {\n  const FUNCNAME = \"doOff(options={})\";\n  const FNAME = FUNCNAME.split(\"(\")[0]\n  const TAG = `${MACRO} ${FNAME} |`\n  const TL = options.traceLvl ?? 0\n  if (TL === 1) jez.trace(`${TAG} --- Starting ---`);\n  if (TL > 1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n  //-------------------------------------------------------------------------------------------------------------------------------\n  // Comments, perhaps\n  //\n  if (TL > 3) jez.trace(`${TAG} | More Detailed Trace Info.`)\n\n  if (TL > 1) jez.trace(`${TAG} --- Finished ---`);\n  return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "autoanimations": {
      "version": 4,
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false
      },
      "override": true,
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": false
      },
      "levels3d": {
        "type": ""
      },
      "macro": {
        "enable": false
      },
      "animType": "t1"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}