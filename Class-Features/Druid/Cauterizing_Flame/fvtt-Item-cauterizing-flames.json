{
  "name": "Cauterizing Flames",
  "type": "feat",
  "img": "modules/jb2a_patreon/Library/Generic/Fire/Flame/Flames03_01_Regular_Orange_10x10ft_Thumb.webp",
  "data": {
    "description": {
      "value": "<p>You gain the ability to turn death into magical flames that can heal or incinerate. When a Small or larger creature dies within 30 feet of you or your wildfire spirit, a harmless spectral flame springs forth in the dead creature’s space and flickers there for 1 minute. When a creature you can see enters that space, you can use your <strong>reaction</strong> to extinguish the spectral flame there and either <strong>heal</strong> the creature or deal fire <strong>damage</strong> to it. The healing or damage equals <strong>2d10 + your WIS mod.</strong></p>\n<p>You can use this reaction a number of times equal to your proficiency bonus, and you regain all expended uses when you finish a long rest.</p>\n<hr style=\"border-top:1px solid var(--color-border-light-primary);border-bottom:1px solid var(--color-border-light-highlight)\" />\n<p><strong>FoundryVTT</strong>: This ability must be triggered manually to place a <strong>Spectral Flame</strong> token which can be manually used to inflict/heal damage.  The flame will time out after one minute if not used. </p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "TCoE p. 40",
    "activation": {
      "type": "reaction",
      "cost": 1,
      "condition": "Creature dies within 30 feet"
    },
    "duration": {
      "value": null,
      "units": "inst"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Druid: Circle of Wildfire 10th",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Cauterizing Flames",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Cauterizing_Flame_Summon.0.2.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Call a token via warpgate which will be placed at the location specified by a crosshair. Two\n * abilities need to be edited to replace a magic word (%YOU%) with teh name of the summoning\n * token and a watchdog timeout effect needs to be added so the token removes itself at the end\n * of its duration.\n *\n * 11/14/23 0.1 Creation of Macro from Major_Image\n * 11/15/23 0.2 Use a character resource by name \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim of the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 5;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//---------------------------------------------------------------------------------------------------\nif (TL > 1) jez.trace(`=== Starting === ${MACRONAME} ===`);\nif (TL > 2) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\nconst L_ARG = args[args.length - 1];\n//---------------------------------------------------------------------------------------------------\n// Set the value for the Active Token (aToken)\nlet aToken;\nif (L_ARG.tokenId) aToken = canvas.tokens.get(L_ARG.tokenId);\nelse aToken = game.actors.get(L_ARG.tokenId);\nlet aActor = aToken.actor;\n//\n// Set the value for the Active Item (aItem)\nlet aItem;\nif (args[0]?.item) aItem = args[0]?.item;\nelse aItem = L_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst MINION = `Spectral Flame`;\nconst DURATION = 60 // Seconds\nconst CLOCK_IMG = \"Icons_JGB/Misc/alarm_clock.png\"\nconst RESOURCE_NAME = L_ARG.item.name\nconst SPELL_NAME = L_ARG.item.name\n//---------------------------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0] === \"off\") await doOff();                   // DAE removal\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ****************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nfunction postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is removed by DAE, set Off\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOff() {\n    if (TL > 1) jez.trace(\"Token to dismiss\", args[1])\n    warpgate.dismiss(args[1], game.scenes.viewed.id)\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********/\nasync function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    await jez.wait(100)\n    if (TL === 1) jez.trace(`--- Starting --- ${MACRONAME} ${FNAME} ---`);\n\n    //---------------------------------------------------------------------------------------------------\n    // Ask if a resource should be consumed \n    //\n    const Q_TITLE = `Consume ${RESOURCE_NAME} Resource?`\n    let qText = `<p>${aToken.name} is using <b>${SPELL_NAME}</b> to summon a spectral flame.  This can \n    only be done as a reaction. The flame must be placed on just vanquished enemy. This typically \n    consumes one charge of <b>Spectral Flame.</b></p>\n    <p>If you want to spend the charge (or use the NPC alternative), click <b>\"Yes\"</b>.</p>\n    <p>If you want to bypass spending the charge (with GM permission) click <b>\"No\"</b>.</p>\n    <p>If you want to cancel the spell click <b>\"Close\"</b> (top right of dialog).</p>`\n    const SPEND_RESOURCE = await Dialog.confirm({ title: Q_TITLE, content: qText, });\n    if (SPEND_RESOURCE === null) return jez.badNews(`${SPELL_NAME} cancelled by player.`, 'i')\n    //---------------------------------------------------------------------------------------------------\n    // Deal with casting resource -- this needs to consider NPC and PC data structures\n    //\n    if (SPEND_RESOURCE) {\n        if (TL > 1) jez.trace(`${TAG} Time to use a resource`)\n        let spendResult = await jez.resourceSpend(aActor.uuid, RESOURCE_NAME, aItem.uuid, { traceLvl: TL, quiet: false })\n        if (!spendResult) return jez.badNews(`${SPELL_NAME} cancelled for lack of ${RESOURCE_NAME}`, 'w')\n    }\n\n    //--------------------------------------------------------------------------------------\n    // Perform the actual summon\n    //\n    let summonedID = await summonSpectralFlame({ traceLvl: TL })\n    if (!summonedID) {  // Something went sideways\n        if (TL > 3) jez.trace(`${FNAME} | aToken`, aToken)\n        if (TL > 3) jez.trace(`${FNAME} | aActor`, aActor)\n        //   jezcon.remove(\"Concentrating\", aToken.actor.uuid, { traceLvl: TL });\n        return false\n    }\n    let summonedUuid = `Scene.${game.scenes.viewed.id}.Token.${summonedID}`\n    //--------------------------------------------------------------------------------------------------\n    // Add an effect to our recently summoned token to delete itself at the end of the spell duration\n    //\n    const CE_DESC = `Summoned ${MINION} will remain for up to a minute`\n    const GAME_RND = game.combat ? game.combat.round : 0;\n    let effectData = {\n        label: aItem.name,\n        icon: CLOCK_IMG,\n        origin: L_ARG.uuid,\n        disabled: false,\n        duration: {\n            rounds: DURATION / 6, startRound: GAME_RND,\n            seconds: DURATION, startTime: game.time.worldTime,\n            token: aToken.uuid, stackable: false\n        },\n        flags: {\n            convenientDescription: CE_DESC\n        },\n        changes: [\n            { key: `macro.execute`, mode: jez.CUSTOM, value: `Dismiss_Tokens ${summonedUuid}`, priority: 20 },\n        ]\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: summonedUuid, effects: [effectData] });\n    //-----------------------------------------------------------------------------------------------\n    // post summary effect message\n    //\n    msg = `${aToken.name} creates a spectral flame.<br><br>\n    See:&nbsp;<a href=\"https://www.dndbeyond.com/classes/druid#:~:text=your%20wildfire%20spirit.-,Cauterizing%20Flames,-10th%2Dlevel%20Circle\"\n    target=\"_blank\" rel=\"noopener\">\n    D&amp;D Beyond Description</a> for details.`\n    postResults(msg)\n    if (TL > 1) jez.trace(`--- Finished --- ${MACRONAME} ${FNAME} ---`);\n    return true;\n}\n/***************************************************************************************************\n * Summon the minion and update\n ***************************************************************************************************/\nasync function summonSpectralFlame(options = {}) {\n    const FUNCNAME = \"summonSpectralFlame(options = {})\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL === 1) jez.log(`${TAG} --- Starting ---`);\n    if (TL > 1) jez.log(`${TAG} --- Starting --- ${FUNCNAME} ---`, \"options\", options);\n    //--------------------------------------------------------------------------------------------------\n    // Nab the data for our soon to be summoned critter.  It will have actions that need to be updated\n    //\n    let summonData = await game.actors.getName(MINION)\n    if (TL > 2) jez.log(`${TAG} summonData`, summonData)\n    //-----------------------------------------------------------------------------------------------\n    //\n    let argObj = {\n        allowedColorsIntro: null,\n        allowedColorsOutro: null,\n        allowedUnits: [\"\", \"ft\", \"any\"],\n        colorIntro: \"*\",\n        colorOutro: \"*\",\n        defaultRange: 30,\n        duration: 1000,                     // Duration of the introVFX\n        introTime: 1000,                    // Amount of time to wait for Intro VFX\n        introVFX: '~Explosion/Explosion_*_${color}_400x400.webm', // default introVFX file\n        name: \"Summoning\",                  // Name of action (message only), typically aItem.name\n        opacity: 1,                         // Opacity for the VFX\n        options: { controllingActor: aActor }, // Aledgedly hides an open character sheet\n        outroVFX: '~Smoke/SmokePuff01_01_Regular_${color}_400x400.webm', // default outroVFX file\n        scale: 0.7,                         // Scale for the VFX\n        snap: -1,                           // Snap value passed to jez.warpCrosshairs\n        source: aToken,  // Coords for source (within center), typically aToken\n        suppressTokenMold: 2000,            // Time (in ms) to suppress TokenMold's renaming setting\n        templateName: `%${MINION}%`,\n        traceLvl: 0,\n        updates: {\n            actor: { name: `${aToken.name}'s ${MINION}` },\n            token: { name: `${aToken.name}'s ${MINION}` },\n            embedded: { Item: {} },\n        },\n        waitForSuppress: 100,               // Time (in ms) to wait of for Suppression to being\n        width: 1                            // Width of token to be summoned\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Push the items for this actor into an array so all of teh descriptions can be scanned for %YOU% which needs uypdated.\n    //\n    const itemArray = Array.from(summonData.data.items)\n    if (TL > 2) jez.log(`${TAG} itemArray`, itemArray)\n    for (let i = 0; i < itemArray.length; i++) {\n        if (TL > 2) jez.log(`${TAG} Item ${i}`, itemArray[i])\n        if (TL > 3) jez.log(`${TAG} Item ${i}`, itemArray[i].data.data.description)\n        let a = jez.replaceSubString(itemArray[i].data.data.description.value, 'ATOKEN.NAME', aToken.name, '%').string\n        argObj.updates.embedded.Item[itemArray[i].data.name] = { data: { description: { value: a } } }\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Build updates data field to replace %YOU% in the attack descriptions\n    //\n    if (TL > 1) jez.trace(`${TAG} argObj.updates ==> `, argObj.updates)\n    //--------------------------------------------------------------------------------------------------\n    // Use the data for our soon to be summoned critter so we can have the right image (img) and use it\n    // to update the img attribute or set basic image to match this item\n    //\n    argObj.img = summonData ? summonData.img : aItem.img\n    //--------------------------------------------------------------------------------------------------\n    // Do the actual summon\n    //\n    return jez.spawnAt(MINION, aToken, aActor, aItem, argObj)\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.sqmOotSsffQmGXSm"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}