{
  "name": "Nature's Wrath",
  "type": "feat",
  "img": "icons/magic/nature/root-vine-entangled-humanoid.webp",
  "data": {
    "description": {
      "value": "<p><span style=\"color: #191813; font-size: 13px;\">You can use your <strong>Channel Divinity</strong> to invoke primeval forces to ensnare a foe. As an <strong>action</strong>, you can cause spectral vines to spring up and reach for a creature within 10 feet of you that you can see. </span></p>\n<p><span style=\"color: #191813; font-size: 13px;\">The creature must succeed on a Strength or Dexterity saving throw (its choice) or be @JournalEntry[CZWEqV2uG9aDWJnD]{restrained}. While restrained by the vines, the creature repeats the saving throw at the end of each of its turns. On a success, it frees itself and the vines vanish.</span></p>\n<hr />\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">FoundryVTT</strong>: This is automated.</p>\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">Setup</strong>: For PCs, the actor must have a resource named&nbsp;<em style=\"box-sizing: border-box; user-select: text;\">Channel Divinity&nbsp;</em>defined on their character sheet (and it has to have a postive value).&nbsp; NPCs need to set this up with limited daily uses (also, its not been tested...)</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 10,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Oath of Ancients Paladin",
    "recharge": {
      "value": null,
      "charged": true
    },
    "attunement": null
  },
  "effects": [
    {
      "_id": "W4ZcRnVY49bAMnuV",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "@attributes.spelldc",
          "priority": "20"
        },
        {
          "key": "data.attributes.movement.all",
          "mode": 0,
          "value": "1",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "rounds": 9999
      },
      "icon": "modules/combat-utility-belt/icons/restrained.svg",
      "label": "Restrained by Nature's Wrath",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "endEveryTurn",
          "specialDuration": [
            "None"
          ],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": [
        "macro.itemMacro",
        "data.attributes.movement.all"
      ]
    }
  ],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "autoanimations": {
      "killAnim": false,
      "animLevel": false,
      "options": {
        "ammo": false,
        "scaleToToken": false,
        "enableCustomExplosion": false,
        "customExplosion": "",
        "staticType": "target",
        "variant": "01",
        "repeat": 1,
        "delay": 250,
        "scale": 1,
        "enableCustom": false,
        "customPath": "",
        "menuType": "generic",
        "opacity": null,
        "unbindAlpha": false,
        "unbindVisibility": false,
        "persistent": false
      },
      "override": false,
      "allSounds": {
        "item": {
          "enableAudio": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      },
      "sourceToken": {
        "enable": false
      },
      "targetToken": {
        "enable": true,
        "animLevel": false,
        "name": "",
        "color": "",
        "enableCustom": false,
        "delayStart": 500,
        "loops": 1,
        "loopDelay": 250,
        "scale": 1,
        "menuType": "",
        "variant": "",
        "opacity": null,
        "persistent": false
      },
      "animType": "static",
      "explodeVariant": "impact",
      "explodeColor": "blue",
      "explodeRadius": 5,
      "explodeLoop": 1,
      "explodeDelay": 0,
      "below": true,
      "autoOverride": {
        "enable": false
      },
      "version": 4,
      "animation": "impact",
      "color": "blue",
      "explosions": {
        "enable": false
      },
      "audio": {
        "a01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        },
        "t01": {
          "enable": false
        }
      },
      "macro": {
        "enable": false
      },
      "preview": false,
      "levels3d": {
        "type": ""
      }
    },
    "core": {
      "sourceId": "Item.o24OVYmdJ3Udv1dq"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Nature's Wrath",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Natures_Wrath.0.5.js\"\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Implement Nature's Wrath\n * \n * Description: You can use your Channel Divinity to invoke primeval forces to ensnare a foe.\n *   As an action, you can cause spectral vines to spring up and reach for a creature within \n *   10 feet of you that you can see. The creature must succeed on a Strength or Dexterity \n *   saving throw (its choice) or be restrained. While restrained by the vines, the creature \n *   repeats the saving throw at the end of each of its turns. On a success, it frees itself \n *   and the vines vanish.\n * \n * This will need an OnUse and a Each execution.\n * \n * 12/21/21 0.1 JGB Creation\n * 12/24/21 0.2 JGB Incorporate ideas from times_up_sample#1.0.1 and making this a DAE thing\n * 12/26/21 0.3 JGB Seemingly working version\n * 10/21/22 0.4 JGB FoundryVTT 9 fix: Swap deleteEmbeddedEntity for deleteEmbeddedDocuments\n * 12/15/22 0.5 JGB Update style and add call to resourceSpend \n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL>0) jez.trace(`${TAG} === Starting ===`);\nif (TL>1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor; \nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst EFFECT_NAME = \"Restrained\"\nconst DEBUFF_NAME = \"Restrained by Nature's Wrath\" // aItem.name || \"Nature's Wraith\";\nconst DEBUFF_ICON = \"modules/combat-utility-belt/icons/restrained.svg\"\nconst SAVE_DC = aActor.data.data.attributes.spelldc;\nconst VFX_NAME = `${MACRO}-${aToken.id}`\nconst SPELL_NAME = `Nature's Wraith`\nconst RESOURCE_NAME = \"Channel Divinity\";\nlet spendResource\n//-------------------------------------------------------------------------------\n// Depending on where invoked call appropriate function to do the work\n//\nif (args[0]?.tag === \"OnUse\") doOnUse({traceLvl:TL});   \t\t\t    // Midi ItemMacro On Use\nif (args[0] === \"off\") await doOff({traceLvl:TL});                   // DAE removal\nif (TL>1) jez.trace(`${TAG} === Finished ===`);\nreturn;\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Check the setup of things.  Post bad message and return false fr bad, true for ok!\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n async function preCheck() {\n    if (args[0].targets.length !== 1)\n        return jez.badNews(`Must target exactly one target.  ${args[0]?.targets?.length} were targeted.`, 'w')\n    return true\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Execute code for a ItemMacro onUse\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nasync function doOnUse(options={}) {\n    const FUNCNAME = \"doOnUse(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    await jez.wait(100)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Make sure exactly one token was targeted\n    //\n    if (!await preCheck()) return(false);\n    let tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    let tActor = tToken?.actor;\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Ask if a resource should be consumed \n    //\n    const Q_TITLE = `Consume Resource?`\n    let qText = `<p>${aToken.name} is using <b>${SPELL_NAME}</b> to attempt to restrain ${aToken.name} This typically\n    consumes a <b>${RESOURCE_NAME}</b> charge.</b></p>\n    <p>If you want to spend the charge (or use the NPC alternative), click <b>\"Yes\"</b>.</p>\n    <p>If you want to bypass spending the charge (with GM permission) click <b>\"No\"</b>.</p>\n    <p>If you want to cancel the spell click <b>\"Close\"</b> (top right of dialog).</p>`\n    spendResource = await Dialog.confirm({ title: Q_TITLE, content: qText, });\n    if (TL > 1) jez.trace(`${TAG} spendResource`, spendResource)\n    if (spendResource === null) return jez.badNews(`${SPELL_NAME} cancelled by player.`, 'i')\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Handle spending of the resource\n    //\n    if (spendResource) {\n        if (TL > 1) jez.trace(`${TAG} Time to use a resource`)\n        let spendResult = await jez.resourceSpend(aActor.uuid, RESOURCE_NAME, aItem.uuid, { traceLvl: TL, quiet: false })\n        if (!spendResult) return jez.badNews(`${SPELL_NAME} cancelled for lack of ${RESOURCE_NAME}`, 'i')\n    }\n    //------------------------------------------------------------------------------------------------------------------------------\n    // Determine target's prefered stat for the save\n    //\n    const TAR_DEX_SAVE_MOD = tToken.actor.data.data.abilities.dex.save;\n    const TAR_STR_SAVE_MOD = tToken.actor.data.data.abilities.str.save;\n    const SAVE_TYPE = (TAR_DEX_SAVE_MOD > TAR_STR_SAVE_MOD) ?  \"dex\" : \"str\";\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Perform save\n    //\n    const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> to remove <b>${DEBUFF_NAME}</b> effect`;\n    if (TL>1) jez.trace(`${TAG} ---- Save Information ---`,\"SAVE_TYPE\",SAVE_TYPE,\"SAVE_DC\",SAVE_DC,\"FLAVOR\",FLAVOR);\n    let save = (await tActor.rollAbilitySave(SAVE_TYPE, { flavor: FLAVOR, chatMessage: true, fastforward: true })).total;\n    if (TL>1) jez.trace(`${TAG} save`,save);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // If save failed add effect\n    //\n    if (save < SAVE_DC) {\n        if (TL > 1) jez.trace(`${TAG} save was failed with a ${save}`);\n        //---------------------------------------------------------------------------------------------------------------------------\n        // Modify the EFFECT_NAME condition to include an Overtime save element and apply\n        //\n        let statMod = jez.getStatMod(aToken, \"str\")\n        let effectData = game.dfreds.effectInterface.findEffectByName(EFFECT_NAME).convertToObject();\n        const OVERTIME = `turn=end,label=Save against ${DEBUFF_NAME},saveDC=${SAVE_DC},saveAbility=${SAVE_TYPE},saveRemove=true,saveMagic=true,rollType=save`\n        await effectData.changes.push(\n            { key: 'flags.midi-qol.OverTime', mode: jez.OVERRIDE, value: OVERTIME, priority: 20 },\n            { key: `macro.itemMacro`, mode: jez.CUSTOM, value: `SAVE_DC ${SAVE_DC}`, priority: 20 },\n        )\n        effectData.name = DEBUFF_NAME\n        game.dfreds.effectInterface.addEffectWith({ effectData: effectData, uuid: tToken.actor.uuid, origin: aItem.uuid });\n        //---------------------------------------------------------------------------------------------------------------------------\n        // Fire Up that VFX\n        //\n        runVFX(tToken)\n    } else {\n        postResults(`${tToken.name} avoided the effect.`);\n        if (TL > 1) jez.trace(`${TAG} save succeeded with a ${save}`);\n        return\n    }\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // Thats all folks\n    //\n    msg = `Maybe say something useful...`\n    postResults(msg);\n    if (TL>0) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n function postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL>1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>2) jez.trace(\"postResults Parameters\",\"msg\",msg)\n    //-------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Perform the code that runs when this macro is removed by DAE, set Off\n * This runs on actor that has the affected removed from it.\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function doOff(options={}) {\n    const FUNCNAME = \"doOff(options={})\";\n    const FNAME = FUNCNAME.split(\"(\")[0] \n    const TAG = `${MACRO} ${FNAME} |`\n    const TL = options.traceLvl ?? 0\n    if (TL===1) jez.trace(`${TAG} --- Starting ---`);\n    if (TL>1) jez.trace(`${TAG} --- Starting --- ${FUNCNAME} ---`,\"options\",options);\n    //-------------------------------------------------------------------------------------------------------------------------------\n    // \n    //\n    if (await Sequencer.EffectManager.endEffects({ name: VFX_NAME })) {\n        if (TL>1) jez.trace(`${TAG} Removed existing VFX ${VFX_NAME} from ${aToken.name}`)\n    }\n    if (TL>1) jez.trace(`${TAG} --- Finished ---`);\n    return;\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Launch the VFX effect on affected Token\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/ \n async function runVFX(token) {\n    //----------------------------------------------------------------------------------------------\n    // Apply new VFX\n    //\n    new Sequence()\n       .effect()\n       .file('modules/jb2a_patreon/Library/1st_Level/Entangle/Entangle_01_Yellow_400x400.webm')\n       .attachTo(token)\n       .scaleToObject(1.2)\n       .opacity(0.7)\n       .persist()\n       .name(`${MACRO}-${token.id}`)    // Give the effect a uniqueish name\n       .fadeIn(1000)           // Fade in for specified time in milliseconds\n       .fadeOut(1000)          // Fade out for specified time in milliseconds\n       .play();   \n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}