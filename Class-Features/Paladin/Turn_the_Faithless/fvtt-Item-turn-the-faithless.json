{
  "name": "Turn the Faithless",
  "type": "feat",
  "img": "icons/magic/holy/angel-winged-humanoid-blue.webp",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\" style=\"box-sizing:border-box;user-select:text;color:#191813;font-size:13px\"><strong style=\"box-sizing:border-box;user-select:text\">Turn the Faithless. </strong>You can use your Channel Divinity to utter ancient words that are painful for fey and fiends to hear. As an action, you present your holy symbol, and each fey or fiend within 30 feet of you that can hear you must make a Wisdom saving throw.</p>\n<p class=\"Core-Styles_Core-Body\" style=\"box-sizing:border-box;user-select:text;color:#191813;font-size:13px\">On a failed save, the creature is <strong>@JournalEntry[MVitPJtF1rOrVVwA]{Turned}</strong> for 1 minute or until it takes damage. </p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 2,
      "width": null,
      "units": "ft",
      "type": "enemy"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "attribute",
      "target": "",
      "amount": 1
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Turn the Faithless",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Turn_the_Faithless.0.4.js\";\n/*******************************************************************************************\n * Source: Unknown\n * Requires: DAE, Callback macros ActorUpdate\n * \n * 12/21/21 0.1 JGB Imported code added headers\n * 12/22/21 0.2 JGB Working on getting the set of targets \n * 12/22/21 0.3 JGB Remove stray existance of Frightened \n * 05/04/22 0.4 Update for Foundry 9.x\n *******************************************************************************************/\nconst DEBUG = true;\nlog(\"---------------------------------------------------------------------------\",\n    \"Starting\", MACRONAME);\n\nconst ActorUpdate = game.macros?.getName(\"ActorUpdate\");\nif (!ActorUpdate) return ui.notifications.error(`Cannot locate ActorUpdate GM Macro`);\nif (!ActorUpdate.data.flags[\"advanced-macros\"].runAsGM) return ui.notifications.error(`ActorUpdate \"Execute as GM\" needs to be checked.`);\n\nconst activeToken = token; // Token is preset in the execution environment to active token\nconst tokenId = args[0].tokenId;\nconst actorD = game.actors.get(args[0].actor._id);\nconst level = actorD.getRollData().classes.paladin.levels;\nconst dc = actorD.getRollData().attributes.spelldc;\nconst itemD = args[0].item;\nconst saveType = \"wis\";\nconst RANGEPAD = 4.9;\nconst TURNEDICON = \"Icons_JGB/Misc/Turned.png\";\nconst allowedUnits = [\"\", \"ft\", \"any\"];\nconst EFFECT = \"Turned\"\nconst faithlessTypes = [\"undead\", \"fey\", \"fiend\"]\nconst CUSTOM=0, MULTIPLY=1, ADD=2, DOWNGRADE=3, UPGRADE=4, OVERRIDE=5; // midi-qol mode values\nconst TURNED_JRNL = `@JournalEntry[${game.journal.getName(\"Turned\").id}]{Turned}`\n\nlet toFarCount = 0;\nlet toFar = \"\";\nlet turnTargets = [];\nlet isNPC = true;\nlet targetType = \"\";\nlet isFaithless = false;\n\n\nlog('Inititial Values Set as follows:',\n    \"actorD\", actorD,\n    \"activeToken\", activeToken,\n    \"tokenId\", tokenId,\n    \"token\", token,     // Preset in the execution environment to active token\n    \"level\", level,\n    \"dc\", dc,\n    \"itemD\", itemD,\n    \"itemD.data.range.value\", itemD.data.range.value,\n    \"itemD.data.range.units\", itemD.data.range.units,\n    \"saveType\", saveType);\nlog(\"rollData\", actorD.getRollData());\n\nlet spellRange = getSpellRange(itemD, allowedUnits) + RANGEPAD;\nlog(\"Values from Item Card\", \"spellRange\", `${spellRange} including ${RANGEPAD} padding`);\n\nlet targetList = getInRangeTokens(activeToken, spellRange);\n\nlog(`Total of ${targetList.length} tokens in range`, targetList);\nif (DEBUG) for (let i = 0; i < targetList.length; i++) log(` ${i + 1} ${targetList[i].name}`);\n\nfor (let targeted of targetList) {\n    let target = canvas.tokens.get(targeted.id);\n    log(\"Targeting\", target.actor.name);\n    //------------------------------------------------------------------------------------------\n    // Need the creature type, but PCs and NPCs store that data differently.  Some important \n    // data hidden in the data structures:\n    //   target.document._actor.data.type contains npc or character \n    // \n    // For NPCs:\n    //   target.document._actor.data.data.details.type.value has the creature type\n    //   target.document._actor.data.data.details.type.subtype has the creature subtype\n    //\n    // For PCs:\n    //   target.document._actor.data.data.details.race has the race, free form\n    //\n    if (targeted.document._actor.data.type === \"npc\") isNPC = true;\n    else isNPC = false;\n    // log(`${targeted.name} is NPC? ${isNPC}`)\n    if (isNPC) targetType = target.document._actor.data.data.details.type.value \n    else targetType = target.document._actor.data.data.details.race.toLowerCase()\n    // log(`targetType`,targetType);\n\n    isFaithless = false;\n    for (let i = 0; i < faithlessTypes.length; i++) {\n        if (targetType.search(faithlessTypes[i]) != -1) {\n            isFaithless = true;\n            break;\n        }\n    }\n    log(`${targeted.name} is faithless?`, isFaithless);\n\n    if (isFaithless) {\n        let resist = [\"Turn Resistance\", \"Turn Defiance\"];\n        let getResistance = target.actor.items.find(i => resist.includes(i.name));\n        let immunity = [\"Turn Immunity\"];\n        let getImmunity = target.actor.items.find(i => immunity.includes(i.name));\n        let save = \"\";\n        getResistance ? save = await target.actor.rollAbilitySave(saveType, { advantage: true, chatMessage: false, fastForward: true }) : save = await target.actor.rollAbilitySave(saveType, { chatMessage: false, fastForward: true });\n        if (getImmunity) {\n            turnTargets.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\">${target.name} immune</div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n        }\n        else {\n            /****************************************************************************************\n            * A turned creature:\n            * - Must spend its turns trying to move as far away from you as it can, and\n            * - Can not willingly move to a space within 30 feet of you.\n            * - Can not take reactions.\n            * - Must use the Dash action or try to escape from an effect that prevents it from \n            *   moving. If it can not move, it uses the Dodge action.\n            * - If true form is concealed by an illusion, shapeshifting, or other \n            *   effect, that form is revealed while it is turned.\n            ***************************************************************************************/\n            if (dc > save.total) {\n                log(\" -- Failed Save --\", `Target name ${target.name}`, target, `save.total ${save.total}`, save);\n                let gameRound = game.combat ? game.combat.round : 0;\n                let effectData = {\n                    label: EFFECT,\n                    icon: TURNEDICON,\n                    origin: args[0].uuid,\n                    disabled: false,\n                    duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n                    flags: { dae: { macroRepeat: \"none\", specialDuration: [\"isDamaged\"] } },\n                    changes: [\n                        { key: `flags.gm-notes.notes`, mode: CUSTOM, value: `Applied by ${activeToken.name}`, priority: 20 },\n                    ]};\n                let effect = target.actor.effects.find(ef => ef.data.label === game.i18n.localize(`${EFFECT}`));\n                if (!effect) await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:target.actor.uuid, effects: [effectData] });\n                turnTargets.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\">${target.name} fails with ${save.total} [${EFFECT}]</div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n\n            } else {\n                console.log(target.name, save.total, `Save`);\n                turnTargets.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\">${target.name} succeeds with ${save.total}</div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n            }\n        }\n    }\n}\nawait wait(800);\nlet turn_list = turnTargets.join('');\nlet turn_results = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${itemD.name} DC ${dc} ${CONFIG.DND5E.abilities[saveType]} Saving Throw:</div><div><div class=\"midi-qol-nobox\">${turn_list}</div></div>`;\nconst chatMessage = await game.messages.get(args[0].itemCardId);\nlet content = await duplicate(chatMessage.data.content);\nconst searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\nconst replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${turn_results}`;\ncontent = await content.replace(searchString, replaceString);\nawait chatMessage.update({ content: content });\nawait ui.chat.scrollBottom();\n\n\npostResults(`Creatures that failed their saving throw are affected by the <b>${TURNED_JRNL}</b> condition.`)\n\nlog(\"---------------------------------------------------------------------------\",\n    \"Finished\", MACRONAME);\nreturn;\n\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************/\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\n\n/****************************************************************************************\n* Functrion is no longer used, keeping just-in-case\n***************************************************************************************/\nasync function cr_lookup(level) {\n    if ((level >= 5) && (level < 8)) { return 0.5; }\n    if ((level >= 8) && (level < 11)) { return 1; }\n    if ((level >= 11) && (level < 14)) { return 2; }\n    if ((level >= 14) && (level < 17)) { return 3; }\n    if ((level >= 17) && (level <= 20)) { return 4; }\n}\n\n/****************************************************************************************\n* Return an array of the tokens that are within range of primeToken\n***************************************************************************************/\nfunction getInRangeTokens(primeToken, range) {\n    let tokenSet = [];\n    let placeables = canvas.tokens.placeables;\n    log(`canvas.tokens.placeables`, canvas.tokens.placeables)\n\n    for (let i = 0; i < placeables.length; i++) {\n        let thisToken = placeables[i];\n        let distance = canvas.grid.measureDistance(primeToken, thisToken).toFixed(1);\n        if (distance > range || activeToken.name === thisToken.name) {\n            log(` Droping ${thisToken.name} at ${distance} feet, from consideration`);\n            if (toFarCount++) { toFar += \", \"; };\n            toFar += thisToken.name;\n            // log(`  To Far #${toFarCount} ${token.name} is ${distance} feet. To Fars: ${toFar}`);\n        } else {\n            log(` Adding ${thisToken.name} at ${distance} feet, to inRangeTokens`);\n            tokenSet.push(thisToken);\n        }\n    };\n    return tokenSet;\n}\n\n/****************************************************************************************\n * Get spell range\n ***************************************************************************************/\n\nfunction getSpellRange(itemD, allowedUnits) {\n    const FUNCNAME = \"getSpellRange(itemD, allowedUnits)\";\n    log(\"---------------------------------------------------------------------------\",\n        \"Starting\", `${MACRONAME} ${FUNCNAME}`);\n\n    let range = itemD.data.range?.value;\n    let unit = itemD.data.range.units;\n    log(\"range\", range, \"unit\", unit);\n    range = range ? range : 30;\n\n    if (allowedUnits.includes(unit)) {\n        log(\"Units are ok\");\n        return (range);\n    } else {\n        log(`Unit ${unit} not in`, allowedUnits);\n        ui.notifications.error(`Unit ${unit} not in allowed units`);\n        return (0);\n    }\n}\n\n/***************************************************************************************\n * Post the results to chat card\n ***************************************************************************************/\n async function postResults(resultsString) {\n    const FUNCNAME = \"postResults(resultsString)\";\n    log(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\");\n    log(`Starting ${MACRONAME} ${FUNCNAME}`,\n        `resultsString`, resultsString);\n    for (let i = 0; i < args.length; i++) log(`  args[${i}]`, args[i]);\n\n    // let chatmsg = await game.messages.get(itemCard.id)\n    let chatmsg = game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatmsg.data.content);\n    log(`chatmsg: `, chatmsg);\n    const searchString = /<div class=\"end-midi-qol-saves-display\">/g;\n    const replaceString = `<div class=\"end-midi-qol-saves-display\">${resultsString}`;\n    content = await content.replace(searchString, replaceString);\n    await chatmsg.update({ content: content });\n    await ui.chat.scrollBottom();\n\n    log(\"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\",\n        `Finished`, `${MACRONAME} ${FUNCNAME}`);\n    return;\n}\n\n/****************************************************************************************\n* DEBUG Logging\n* \n* If passed an odd number of arguments, put the first on a line by itself in the log,\n* otherwise print them to the log seperated by a colon.  \n* \n* If more than two arguments, add numbered continuation lines. \n***************************************************************************************/\nfunction log(...parms) {\n    if (!DEBUG) return;             // If DEBUG is false or null, then simply return\n    let numParms = parms.length;    // Number of parameters received\n    let i = 0;                      // Loop counter\n    let lines = 1;                  // Line counter \n\n    if (numParms % 2) {  // Odd number of arguments\n        console.log(parms[i++])\n        for (i; i < numParms; i = i + 2) console.log(` ${lines++})`, parms[i], \":\", parms[i + 1]);\n    } else {            // Even number of arguments\n        console.log(parms[i], \":\", parms[i + 1]);\n        i = 2;\n        for (i; i < numParms; i = i + 2) console.log(` ${lines++})`, parms[i], \":\", parms[i + 1]);\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}