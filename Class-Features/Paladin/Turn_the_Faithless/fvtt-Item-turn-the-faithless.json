{
  "name": "Turn the Faithless",
  "type": "feat",
  "img": "icons/magic/holy/angel-winged-humanoid-blue.webp",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\" style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">Turn the Faithless.&nbsp;</strong>You can use your <strong>Channel Divinity</strong> to utter ancient words that are painful for fey and fiends to hear.</p>\n<p class=\"Core-Styles_Core-Body\" style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">As an action, you present your holy symbol, and each fey or fiend within 30 feet of you that can hear you must make a Wisdom saving throw.</p>\n<p class=\"Core-Styles_Core-Body\" style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\">On a failed save, the creature is <strong>@JournalEntry[MVitPJtF1rOrVVwA]{Turned}</strong> for 1 minute or until it takes damage.&nbsp;</p>\n<hr />\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">FoundryVTT</strong>: This is automated.</p>\n<p style=\"box-sizing: border-box; user-select: text; color: #191813; font-size: 13px;\"><strong style=\"box-sizing: border-box; user-select: text;\">Setup</strong>: For PCs, the actor must have a resource named&nbsp;<em style=\"box-sizing: border-box; user-select: text;\">Channel Divinity&nbsp;</em>defined on their character sheet (and it has to have a postive value).&nbsp; NPCs need to set this up with limited daily uses (also, its not been tested...)</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 2,
      "width": null,
      "units": "ft",
      "type": "enemy"
    },
    "range": {
      "value": 30,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": null
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "enhancedcombathud": {
      "set1p": false,
      "set2p": false,
      "set3p": false
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Turn the Faithless",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Turn_the_Faithless.0.6.js\";\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Source: Unknown\n * Requires: DAE, Callback macros ActorUpdate\n * \n * 12/21/21 0.1 JGB Imported code added headers\n * 12/22/21 0.2 JGB Working on getting the set of targets \n * 12/22/21 0.3 JGB Remove stray existance of Frightened \n * 05/04/22 0.4 Update for Foundry 9.x\n * 08/02/22 0.5 Add convenientDescription\n * 12/14/22 0.6 Update to use library functions to handle resource usage (NPC side not tested)\n *******************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]       // Trim off the version number and extension\nconst TAG = `${MACRO} |`\nconst TL = 0;                               // Trace Level for this macro\nlet msg = \"\";                               // Global message string\n//-----------------------------------------------------------------------------------------------------------------------------------\nif (TL > 0) jez.trace(`${TAG} === Starting ===`);\nif (TL > 1) for (let i = 0; i < args.length; i++) jez.trace(`  args[${i}]`, args[i]);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set standard variables\n//\nconst L_ARG = args[args.length - 1]; // See https://gitlab.com/tposney/dae#lastarg for contents\nlet aToken = (L_ARG.tokenId) ? canvas.tokens.get(L_ARG.tokenId) : game.actors.get(L_ARG.tokenId)\nlet aActor = aToken.actor;\nlet aItem = (args[0]?.item) ? args[0]?.item : L_ARG.efData?.flags?.dae?.itemData\nconst VERSION = Math.floor(game.VERSION);\nconst GAME_RND = game.combat ? game.combat.round : 0;\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Set Macro specific globals\n//\nconst SPELL_NAME = `Turn the Faithless`\nconst RESOURCE_NAME = \"Channel Divinity\";\n//-----------------------------------------------------------------------------------------------------------------------------------\n// \n//\nconst ActorUpdate = game.macros?.getName(\"ActorUpdate\");\nif (!ActorUpdate) return ui.notifications.error(`Cannot locate ActorUpdate GM Macro`);\nif (!ActorUpdate.data.flags[\"advanced-macros\"].runAsGM) return ui.notifications.error(`ActorUpdate \"Execute as GM\" needs to be checked.`);\n\n// const actorD = game.actors.get(args[0].actor._id);\nconst level = aActor.getRollData().classes.paladin.levels;\nconst SAVE_DC = aActor.getRollData().attributes.spelldc;\nconst SAVE_TYPE = \"wis\";\nconst RANGEPAD = 4.9;\nconst TURNEDICON = \"Icons_JGB/Misc/Turned.png\";\nconst allowedUnits = [\"\", \"ft\", \"any\"];\nconst EFFECT = \"Turned\"\nconst faithlessTypes = [\"undead\", \"fey\", \"fiend\"]\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5; // midi-qol mode values\nconst TURNED_JRNL = `@JournalEntry[${game.journal.getName(\"Turned\").id}]{Turned}`\n\nlet toFarCount = 0;\nlet toFar = \"\";\nlet turnTargets = [];\nlet isNPC = true;\nlet targetType = \"\";\nlet isFaithless = false;\n\nif (TL > 4) jez.trace(`${TAG} Inititial Values Set as follows:`,\n    \"aActor\", aActor, \"aToken\", aToken, \"token\", token, \"level\", level,\n    \"SAVE_DC\", SAVE_DC, \"aItem\", aItem, \"aItem.data.range.value\", aItem.data.range.value,\n    \"aItem.data.range.units\", aItem.data.range.units, \"SAVE_TYPE\", SAVE_TYPE);\nif (TL > 3) jez.trace(`${TAG} rollData`, aActor.getRollData());\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Ask if we're sepending a charge of RESOURCE_NAME \n//\nconst Q_TITLE = `Consume Resource?`\nlet qText = `<p>${aToken.name} is using <b>${SPELL_NAME}</b>. This typically consumes a <b>${RESOURCE_NAME}</b> charge.</b></p>\n<p>If you want to spend the charge (or use the NPC alternative), click <b>\"Yes\"</b>.</p>\n<p>If you want to bypass spending the charge (with GM permission) click <b>\"No\"</b>.</p>\n<p>If you want to cancel the spell click <b>\"Close\"</b> (top right of dialog).</p>`\nspendResource = await Dialog.confirm({ title: Q_TITLE, content: qText, });\nif (TL > 1) jez.trace(`${TAG} spendResource`, spendResource)\nif (spendResource === null) return jez.badNews(`${SPELL_NAME} cancelled by player.`, 'i')\n//-------------------------------------------------------------------------------------------------------------------------------\n// run the VFX\n//\nrunVFX(aToken)\n//-------------------------------------------------------------------------------------------------------------------------------\n// If choice was made to spend a charge, it needs to be decrimented, also make sure we had a charge to spend\n//\nif (spendResource) {\n    if (TL > 1) jez.trace(`${TAG} Time to use a resource`)\n    let spendResult = await jez.resourceSpend(aActor.uuid, RESOURCE_NAME, aItem.uuid, { traceLvl: TL, quiet: false })\n    if (spendResult === false || spendResult === 0) {\n        if (spendResult === false) msg = `${aToken.name} does not have the required resource, '${RESOURCE_NAME}' configured.`\n        if (spendResult === 0) msg = `${aToken.name} doesn't have available charges of '${RESOURCE_NAME}'.`\n        return postResults(msg)\n    }\n}\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Get Spell Range from item card\n//\n// let spellRange = getSpellRange(aItem, allowedUnits) + RANGEPAD;\n// if (TL>3) jez.trace(`${TAG} Values from Item Card`, \"spellRange\", `${spellRange} including ${RANGEPAD} padding`);\nconst ALLOWED_UNITS = [\"\", \"ft\", \"any\"];\nconst SPELL_RANGE = jez.getRange(aItem, ALLOWED_UNITS) ?? 30\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Get in Range tokens list\n//\nlet options = {\n    exclude: \"self\",    // self, friendly, or none (self is default)\n    direction: \"t2o\",       // t2o or o2t (Origin to Target) (t2o is default) \n    chkHear: false,         // Boolean (false is default)\n    chkDeaf: true,          // Boolean (false is default)\n    traceLvl: TL,           // Trace level, integer typically 0 to 5\n}\nlet targetList = await jez.inRangeTargets(aToken, 30, options);\nif (targetList.length === 0) return jez.badNews(`No effectable targets in range`, \"i\")\nif (TL > 1) for (let i = 0; i < targetList.length; i++) jez.trace(`${TAG} Targeting: ${targetList[i].name}`)\n// let targetList = getInRangeTokens(aToken, SPELL_RANGE);\n//-----------------------------------------------------------------------------------------------------------------------------------\n// Loop through potential targets and evaluate\n//\nfor (let targeted of targetList) {\n    let target = canvas.tokens.get(targeted.id);\n    if (TL > 3) jez.trace(`${TAG} Targeting`, target.actor.name);\n    //--------------------------------------------------------------------------------------------------------------------------------\n    // Need the creature type, but PCs and NPCs store that data differently.  Some important \n    // data hidden in the data structures:\n    //   target.document._actor.data.type contains npc or character \n    // \n    // For NPCs:\n    //   target.document._actor.data.data.details.type.value has the creature type\n    //   target.document._actor.data.data.details.type.subtype has the creature subtype\n    //\n    // For PCs:\n    //   target.document._actor.data.data.details.race has the race, free form\n    //\n    if (targeted.document._actor.data.type === \"npc\") isNPC = true;\n    else isNPC = false;\n    if (TL > 3) jez.trace(`${TAG} ${targeted.name} is NPC? ${isNPC}`)\n    if (isNPC) targetType = target.document._actor.data.data.details.type.value\n    else targetType = target.document._actor.data.data.details.race.toLowerCase()\n    if (TL > 3) jez.trace(`${TAG} targetType`, targetType);\n\n    isFaithless = false;\n    for (let i = 0; i < faithlessTypes.length; i++) {\n        if (targetType.search(faithlessTypes[i]) != -1) {\n            isFaithless = true;\n            break;\n        }\n    }\n    if (TL > 2) jez.trace(`${TAG} ${targeted.name} is faithless?`, isFaithless);\n\n    if (isFaithless) {\n        let resist = [\"Turn Resistance\", \"Turn Defiance\"];\n        let getResistance = target.actor.items.find(i => resist.includes(i.name));\n        let immunity = [\"Turn Immunity\"];\n        let getImmunity = target.actor.items.find(i => immunity.includes(i.name));\n        let save = \"\";\n        getResistance ? save = await target.actor.rollAbilitySave(SAVE_TYPE, { advantage: true, chatMessage: false, fastForward: true }) :\n            save = await target.actor.rollAbilitySave(SAVE_TYPE, { chatMessage: false, fastForward: true });\n        if (getImmunity) {\n            turnTargets.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" \n            id=\"${target.id}\">${target.name} immune</div><div><img src=\"${target.data.img}\" width=\"30\" height=\"30\" \n            style=\"border:0px\"></div></div>`);\n        }\n        else {\n            /*****************************************************************************************************************************\n            * A turned creature:\n            * - Must spend its turns trying to move as far away from you as it can, and\n            * - Can not willingly move to a space within 30 feet of you.\n            * - Can not take reactions.\n            * - Must use the Dash action or try to escape from an effect that prevents it from \n            *   moving. If it can not move, it uses the Dodge action.\n            * - If true form is concealed by an illusion, shapeshifting, or other \n            *   effect, that form is revealed while it is turned.\n            *******************************************************************************************************************************/\n            if (SAVE_DC > save.total) {\n                if (TL > 2) jez.trace(`${TAG} -- Failed Save --`, `Target name ${target.name}`, target, `save.total ${save.total}`, save);\n                const CE_DESC = `Must move & dash away from ${aToken.name}, can not move with 30 ft. If can not move, must dodge.`\n                let gameRound = game.combat ? game.combat.round : 0;\n                let effectData = {\n                    label: EFFECT,\n                    icon: TURNEDICON,\n                    origin: args[0].uuid,\n                    disabled: false,\n                    duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n                    flags: {\n                        dae: { macroRepeat: \"none\", specialDuration: [\"isDamaged\"] },\n                        convenientDescription: CE_DESC\n                    },\n                    changes: [\n                        { key: `flags.gm-notes.notes`, mode: CUSTOM, value: `Applied by ${aToken.name}`, priority: 20 },\n                        { key: `macro.CE`, mode: jez.CUSTOM, value: `Reactions - None`, priority: 20 }\n                    ]\n                };\n                let effect = target.actor.effects.find(ef => ef.data.label === game.i18n.localize(`${EFFECT}`));\n                if (!effect) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.actor.uuid, effects: [effectData] });\n                turnTargets.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" \n                    id=\"${target.id}\">${target.name} fails with ${save.total} [${EFFECT}]</div><div><img src=\"${target.data.img}\" \n                    width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n\n            } else {\n                if (TL > 0) jez.trace(`${TAG} ${target.name}, save total ${save.total} saved`);\n                turnTargets.push(`<div class=\"midi-qol-flex-container\"><div class=\"midi-qol-target-npc midi-qol-target-name\" \n                    id=\"${target.id}\">${target.name} succeeds with ${save.total}</div><div><img src=\"${target.data.img}\" \n                    width=\"30\" height=\"30\" style=\"border:0px\"></div></div>`);\n            }\n        }\n    }\n}\nawait jez.wait(800);\nlet turn_list = turnTargets.join('');\nlet turn_results = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${aItem.name} DC ${SAVE_DC} ${CONFIG.DND5E.abilities[SAVE_TYPE]} \n    Saving Throw:</div><div><div class=\"midi-qol-nobox\">${turn_list}</div></div>`;\nconst chatMessage = await game.messages.get(args[0].itemCardId);\nlet content = await duplicate(chatMessage.data.content);\nconst searchString = /<div class=\"midi-qol-hits-display\">[\\s\\S]*<div class=\"end-midi-qol-hits-display\">/g;\nconst replaceString = `<div class=\"midi-qol-hits-display\"><div class=\"end-midi-qol-hits-display\">${turn_results}`;\ncontent = await content.replace(searchString, replaceString);\nawait chatMessage.update({ content: content });\nawait ui.chat.scrollBottom();\n\n\npostResults(`Creatures that failed their saving throw are affected by the <b>${TURNED_JRNL}</b> condition.`)\n\nif (TL > 3) jez.trace(`${TAG} --- Finished ---`);\nreturn;\n\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***********************************************************************************************************************************\n * Post results to the chat card\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\nfunction postResults(msg) {\n    const FUNCNAME = \"postResults(msg)\";\n    const FNAME = FUNCNAME.split(\"(\")[0]\n    const TAG = `${MACRO} ${FNAME} |`\n    if (TL > 1) jez.trace(`${TAG}--- Starting ---`);\n    if (TL > 2) jez.trace(\"postResults Parameters\", \"msg\", msg)\n    //-----------------------------------------------------------------------------------------------------------------------------------\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n    if (TL > 1) jez.trace(`${TAG}--- Finished ---`);\n}\n/*********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*\n * Launch the VFX effects\n *********1*********2*********3*********4*********5*********6*********7*********8*********9*********0*********1*********2*********3*/\n async function runVFX(token) {\n    new Sequence()\n        .effect()\n        .file(\"modules/jb2a_patreon/Library/TMFX/OutPulse/Circle/OutPulse_04_Circle_Normal_500.webm\")\n        .attachTo(token)\n        .scale(2.5)\n        .repeats(3,1000,2000)\n        .opacity(1)\n        .play();\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.WWMeFSFUjHhAOgKZ"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.280",
      "systemVersion": "1.6.2"
    }
  }
}