{
  "name": "Healing Light",
  "type": "feat",
  "img": "icons/magic/light/beam-strike-orange-gold.webp",
  "data": {
    "description": {
      "value": "<p>At 1st level, you gain the ability to channel celestial energy to heal wounds. You have a pool of d6s that you spend to fuel this healing. The number of dice in the pool equals 1 + your warlock level.</p>\n<p>As a bonus action, you can heal one creature you can see within 60 feet of you, spending dice from the pool. The maximum number of dice you can spend at once equals your Charisma modifier (minimum of one die). Roll the dice you spend, add them together, and restore a number of hit points equal toÂ the total.</p>\n<p>Your pool regains all expended dice when you finish a long rest.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Xanathar's Guide to Everything",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Celestial Warlock",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Healing Light",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Healing_Light.js\"\n/*****************************************************************************************\n * Adding some headers and such to the macro that I inherited.  This macro does check for\n * possession and attunement of HEAL_ITEM, if it finds that, it adds @mod to the heal.\n * \n * 03/10/22 Update to Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nconst lastArg = args[args.length - 1];\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (lastArg.tokenId) aToken = canvas.tokens.get(lastArg.tokenId); \n    else aToken = game.actors.get(lastArg.tokenId);\nlet aActor = aToken.actor;\nconst HEAL_ITEM = \"Blood Staff\"\n//----------------------------------------------------------------------------------------\n// Must target exactly one token\n//\nif (args[0].targets.length !== 1) return ui.notifications.warn(`Please select a target.`);\nlet tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n//----------------------------------------------------------------------------------------\n// Check to see if actor has the HEAL_ITEM, attunment and set the castMod to be used\n//\nlet healItem = hasItem(HEAL_ITEM)\nlet healAttuned = false\nif (healItem && healItem.data.data.attunement === 2) healAttuned = true\nlet castStat = aToken.actor.data.data.attributes.spellcasting\nlet castMod = 0\nif (healAttuned) castMod = Math.max(aToken.actor.data.data.abilities[castStat].mod, 0)\njez.log(`Healing modifier (${castStat.toUpperCase()}) is ${castMod}`)\n//---------------------------------------------------------------------------------------------\n// Remove healing from the item and resource costs. Right now this uses Primary Resources, \n// adjust to fit your needs.\nconst aItem = args[0].item;\nconst RES_TYPE = \"primary\";                     // Resource Type\nconst GET_DATA = await aActor.getRollData();\nconst MAIN_RES = GET_DATA.resources[RES_TYPE];\nconst CUR_RES = MAIN_RES.value;\nconst MAX_RES = MAIN_RES.max;\nconst CHR_BONUS = GET_DATA.abilities.cha.mod;\nconst FIN_MAX = Math.min(CHR_BONUS, MAX_RES);    // Final maximum\nconst DAM_TYPE = \"healing\";\nconst TAR_HP_OBJ = \"tToken.actor.data.data.attributes.hp\"\nconst MIN_HEAL = Math.clamped(CUR_RES, 0, TAR_HP_OBJ.max - TAR_HP_OBJ.value);\nconst CONTENT = `<div style=\"vertical-align:top;display:flex;\"><img src=\"${tToken.data.img}\" \n    style=\"border:none;\" height=\"30\" width=\"30\"> <span style=\"margin-left:10px;line-height:2.1em;\">\n    ${tToken.data.name} <b>HP:</b> ${TAR_HP_OBJ.value} / \n    ${TAR_HP_OBJ.max}</span></div><hr><form class=\"flexcol\"><div class=\"form-group\">\n    <label for=\"num\"><b>[${CUR_RES}/${MAX_RES}]</b> Dice to spend:</span></label>\n    <input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${MAX_RES}\" value=\"${MIN_HEAL}\">\n    </input></div></form>`;\nif (CUR_RES === 0) return ui.notifications.warn(`You are out of the required resources.`);\nnew Dialog({\n    title: aItem.name,\n    content: CONTENT,\n    buttons: {\n        heal: {\n            icon: '<i class=\"fas fa-check\"></i>', label: 'Heal', callback: async (html) => {\n                let number = Math.floor(Number(html.find('#num')[0].value));\n                if (number < 1 || number > FIN_MAX) {\n                    return ui.notifications.warn(\n                        `Invalid number of charges entered = ${number}. Aborting action.`);\n                } else {\n                    runVFX(tToken, aToken)\n                    let healDamage = new Roll(`${number}d6 + ${castMod}`).evaluate({ async: false });\n                    game.dice3d?.showForRoll(healDamage);   // Show 3D die on screen\n                    await new MidiQOL.DamageOnlyWorkflow(aActor, aToken, healDamage.total, DAM_TYPE, [tToken],\n                        healDamage, { flavor: `(${CONFIG.DND5E.healingTypes[DAM_TYPE]})`, \n                        itemCardId: args[0].itemCardId, useOther: false });\n                    let total = Number(CUR_RES - number);\n                    let resType = RES_TYPE === \"primary\" ? \"data.resources.primary.value\" : \n                        RES_TYPE === \"secondary\" ? \"data.resources.secondary.value\" : \n                        \"data.resources.tertiary.value\";\n                    let resUpdate = {};\n                    resUpdate[resType] = total;\n                    await aToken.actor.update(resUpdate);\n                    replaceHitsWithHeals();\n                    if (healAttuned) postResults(`Healing augmented by ${HEAL_ITEM}.`);\n                }\n            }\n        }\n    },\n    default: \"heal\"\n}).render(true);\njez.log(`============== Finishing === ${MACRONAME} =================`);\n/***************************************************************************************\n* Function to determine if passed actor has a specific item, returning a item or false\n*\n* Parameters\n*  - itemName: A string naming the item to be found in actor's inventory\n*  - actor: Optional actor to be searched, defaults to actor launching this macro\n***************************************************************************************/\nfunction hasItem(itemName, actor) {\n    const FUNCNAME = \"hasItem\";\n    actor = actor ? actor : canvas.tokens.get(args[0].tokenId).actor;\n    jez.log(\"-------hasItem(itemName, actor)------\", \"Starting\", `${MACRONAME} ${FUNCNAME}`,\n    \"itemName\", itemName, `actor ${actor.name}`, actor);\n    // If actor was not passed, pick up the actor invoking this macro\n    let item = actor.items.find(item => item.data.name == itemName)\n    if (item == null || item == undefined) {\n        jez.log(`${actor.name} does not have ${itemName}, ${FUNCNAME} returning false`);\n         return(false);\n    }\n    jez.log(\"Item found:\", item)\n    jez.log(`${actor.name} has ${itemName}, ${FUNCNAME} returning true`);\n    return(item);\n}\n/***************************************************************************************\n * Replace first \" hits\" with \" Heals\" on chat card\n ***************************************************************************************/\n async function replaceHitsWithHeals() {\n    const FUNCNAME = \"replaceHitsWithHeals()\";\n    jez.log(\"- - - - Starting ${MACRONAME} ${FUNCNAME} - - - - - - - - - - - - - - - - -\");\n    let chatmsg = game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatmsg.data.content);\n    const searchString = / hits/g;\n    const replaceString = `<p style=\"color:Green;\"> Heals</p>`;\n    content = await content.replace(searchString, replaceString);\n    await chatmsg.update({ content: content });\n    await ui.chat.scrollBottom();\n    jez.log(\"- - - - Finished ${MACRONAME} ${FUNCNAME} - - - - - - - - - - - - - - - -\");\n    return;\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(msg);\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Play a VFX beam from the drained target to the caster\n ***************************************************************************************************/\n async function runVFX(token1, token2) {\n    const VFX_BEAM = \"jb2a.energy_strands.range.multiple.blue.01\"\n    const VFX_CLOUD = \"jb2a.energy_strands.complete.blueorange.01\"\n    new Sequence()\n        .effect()\n            .atLocation(token2)\n            .reachTowards(token1)\n            .scale(1)\n            .repeats(3,1500)\n            .file(VFX_BEAM)\n            .waitUntilFinished(-2000) \n        .effect()\n            .file(VFX_CLOUD)\n            .repeats(2,2000)\n            .atLocation(token1)\n            .scale(0.3)\n            .opacity(1)\n        .play();\n    }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.7aBe7O9ik2bycZ97"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    },
    "enhancedcombathud": {
      "set1s": false,
      "set2s": false,
      "set3s": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "gm-notes": {},
    "autoanimations": {
      "killAnim": false,
      "below": true,
      "override": true,
      "targetToken": {
        "enable": false
      },
      "sourceToken": {
        "enable": false
      },
      "allSounds": {
        "item": {
          "enableAudio": false,
          "file": "Evocation%20Spell%20-%20Light%20of%20the%20Nephilim%20-%20Ravi%20Nidamarthy.mp3",
          "delay": 0,
          "volume": 0.25
        }
      },
      "autoOverride": {
        "enable": false
      },
      "version": 3,
      "animType": "static",
      "animation": "impact",
      "color": "orange",
      "explosions": {
        "enable": false
      },
      "options": {
        "staticType": "target",
        "staticOptions": "explosion",
        "variant": "01",
        "repeat": 1,
        "delay": 250,
        "scale": 1,
        "enableCustom": false,
        "customPath": ""
      },
      "audio": {
        "a01": {
          "enable": false,
          "file": "Evocation%20Spell%20-%20Light%20of%20the%20Nephilim%20-%20Ravi%20Nidamarthy.mp3",
          "delay": 0,
          "volume": 0.25
        },
        "e01": {
          "enable": false,
          "file": "",
          "delay": 0,
          "volume": 0.25
        }
      }
    }
  }
}