{
  "name": "Maneuver - Disarming Attack",
  "type": "feat",
  "img": "Icons_JGB/Misc/tactics.png",
  "data": {
    "description": {
      "value": "<p>When the actor hits with a melee weapon Attack, it can choose to apply a maneuver to that attack. The attack deals an additional 1d10 damage, and the actor chooses one of the following effects.</p>\n<p>The target must succeed on a Strength saving throw or drop an object it is holding of the master-at-arms's choice. The object lands at its feet.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": "Preceded by successful attack"
    },
    "duration": {
      "value": 0,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Maneuver - Disarming Attack",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Battlemaster_Manuever.0.2.js\"\n/*****************************************************************************************\n * Derived from Divine Smite.  Reads the item name to determine the type of manuever. \n * Supported manuevers are listed in the below description.\n *\n *   When the actor hits with a melee weapon Attack, it can choose to apply a maneuver to \n *   that attack. The attack deals an additional 1d10 damage, and the actor chooses one of\n *   the following effects.\n *   \n *   Disarming Attack. The target must succeed on a Strength saving throw or drop an\n *   object it is holding of the master-at-arms's choice. The object lands at its feet.\n * \n *   Distracting Strike. The next attack roll against the target by an attacker other than \n *   the actor has advantage if that attack is made before the start of the actor's next \n *   turn.\n * \n *   Trip Attack. If the target is Large or smaller, it must succeed on a Strength \n *   saving throw or fall prone.\n *  \n * 01/22/22 0.1 JGB Creation\n * 05/02/22 0.2 JGB Update for Foundry 9.x\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nconst LAST_ARG = args[args.length - 1];\njez.log(\"---------------------------------------------------------------------------\",\n    \"Starting\", `${MACRONAME} or ${MACRO}`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nlet chatMessage = game.messages.get(args[args.length - 1].itemCardId);\nlet numDice = 1;\nlet gameRound = game.combat ? game.combat.round : 0;\nlet msg = \"\";\nlet aToken;         // Acting token, token for creature that invoked the macro\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nlet aActor;         // Acting actor, creature that invoked the macro\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nlet aItem;          // Active Item information, item invoking this macro\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\n//---------------------------------------------------------------------------------------\n// Search message history for preceding attack\n//\nlet msgHistory = Object.values(MidiQOL.Workflow.workflows).filter(i => \n    i.actor.id === aActor.id && i.workflowType === \"Workflow\" && i.item?.name != aItem.name);\nif (msgHistory.length === 0) {\n    msg = `${aToken.name} must successfully attack before using ${aItem.name}`\n    jez.addMessage(chatMessage, { color: \"purple\", fSize: 14, msg: msg, tag: \"hits\" })\n    return ui.notifications.error(msg);\n}\nlet lastAttack = msgHistory[msgHistory.length - 1];\njez.log(\"Last Attack\", lastAttack)\nconst DAMAGE_TYPE = lastAttack.defaultDamageType\njez.log(\"DAMAGE_TYPE\", DAMAGE_TYPE)\nif(!DAMAGE_TYPE) {\n    msg = `${aToken.name} need to have hit before using ${aItem.name}`\n    jez.addMessage(chatMessage, { color: \"purple\", fSize: 14, msg: msg, tag: \"hits\" })\n    return ui.notifications.error(msg);\n}\nlet tToken = canvas.tokens.get(lastAttack?.damageList[0]?.tokenId);\nlet tActor = tToken?.actor;\n//---------------------------------------------------------------------------------------\n// Roll the extra damage die and apply it.\n//\nlet damageRoll = new Roll(`${numDice}d8`).evaluate({ async: false });\nawait game.dice3d?.showForRoll(damageRoll);\nawait new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageRoll.total, DAMAGE_TYPE, [tToken], damageRoll,\n    { flavor: `(${CONFIG.DND5E.damageTypes[DAMAGE_TYPE]})`, itemCardId: LAST_ARG.itemCardId, itemData: aItem, useOther: false });\n//---------------------------------------------------------------------------------------\n// Maneuver save DC = 8 + your proficiency bonus + your Strength or Dexterity modifier \n// Attacker's (your choice)\n//\nconst SAVE_DC = 8 + aActor.data.data.attributes.prof +\n    Math.max(aActor.data.data.abilities.str.mod, aActor.data.data.abilities.dex.mod)\n//---------------------------------------------------------------------------------------\n// Add the additional manuever effect\n// Determine the effect by looking for keywords in the aItem.name\nif(aItem.name.toLowerCase().includes(\"disarming\")) doDisarming()\nif(aItem.name.toLowerCase().includes(\"distracting\")) doDistracting()\nif(aItem.name.toLowerCase().includes(\"trip\")) doTrip()\n\njez.log(\"---------------------------------------------------------------------------\",\n    `Finished`, `${MACRONAME}`);\nreturn;\n\n/***************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************/\n\n//---------------------------------------------------------------------------------------\n// Trip Attack. When you hit a creature with a weapon attack, you can expend one \n// superiority die to attempt to knock the target down. You add the superiority die to \n// the attackâ€™s damage roll, and if the target is Large or smaller, it must make a \n// Strength saving throw. On a failed save, you knock the target prone.\n//\nasync function doTrip() {\n    const CONDITION = \"Prone\";\n    //-----------------------------------------------------------------------------------\n    // If target is larger than \"large\" (i.e. huge or grg) they are immune to this trip \n    //\n    jez.log(\"tActor\", tActor)\n    let tSizeStr = tActor.data.data.traits.size\n    jez.log(\"tSizeStr\", tSizeStr)\n    if (tSizeStr === \"huge\" || tSizeStr === \"grg\") {\n        msg = `${tToken.name} is too large (${tSizeStr}) to be tripped.`\n        jez.log(msg);\n        jez.addMessage(chatMessage, { color: \"saddlebrown\", fSize: 14, msg: msg, tag: \"saves\" })\n        return(false)\n    }\n    //-----------------------------------------------------------------------------------\n    // End if target is already affected by CONDITION\n    //\n  //if (aActor.effects.find(ef => ef.data.label === CONDITION)) {\n    let oldEffect = aActor.effects.find(ef => ef.data.label === CONDITION)\n    if (tActor.effects.find(ef => ef.data.label === CONDITION)) {\n        let msg = `${tToken.name} already prone, can not be tripped.`;\n        jez.log(msg);\n        jez.addMessage(chatMessage, { color: \"darkbrown\", fSize: 14, msg: msg, tag: \"saves\" })\n        return;\n    }\n    //-----------------------------------------------------------------------------------\n    // Strength saving throw to avoid a knockdown. \n    //\n    const SAVE_TYPE = \"str\"\n    const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> to avoid \n                    being knocked prone.`;\n    let save = (await tActor.rollAbilitySave(SAVE_TYPE, { FLAVOR, chatMessage: true, fastforward: true }));\n\n    //-----------------------------------------------------------------------------------\n    // Apply condition to the target as appropriate\n    // \n    if (save.total < SAVE_DC) {\n        let effectData = {\n            label: CONDITION,\n            icon: \"modules/combat-utility-belt/icons/prone.svg\",\n            origin: aActor.uuid,\n            disabled: false,\n            duration: { rounds: 99, startRound: gameRound },\n            changes: [\n                { key: `flags.midi-qol.disadvantage.attack.all`, mode: jez.ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.mwak`, mode: jez.ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.advantage.attack.msak`, mode: jez.ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.disadvantage.attack.rwak`, mode: jez.ADD, value: 1, priority: 20 },\n                { key: `flags.midi-qol.grants.disadvantage.attack.rsak`, mode: jez.ADD, value: 1, priority: 20 }\n            ]\n        };\n        await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:tActor.uuid, effects: [effectData] });\n        msg = `${tToken.name} has been knocked prone by ${aToken.name}`\n        jez.log(msg);\n        jez.addMessage(chatMessage, { color: \"saddlebrown\", fSize: 14, msg: msg, tag: \"saves\" })\n    } else {\n        msg = `${tToken.name} has not been knocked down.`\n        jez.log(msg);\n        jez.addMessage(chatMessage, { color: \"saddlebrown\", fSize: 14, msg: msg, tag: \"saves\" })\n    }\n}\n//---------------------------------------------------------------------------------------\n// Distracting Strike. The next attack roll against the target by an attacker other than \n// the master-at-arms has advantage if that attack is made before the start of the \n// master-at-arms's next turn.\n//\nasync function doDistracting() {\n    let mqFlag = \"flags.midi-qol.grants.advantage.attack.all\";\n    let mqExpire = \"isAttacked\";\n    jez.log(`${mqFlag}, ${mqExpire}`);\n    msg = ` Add debuff to ${tToken.name}`;\n    jez.log(msg);\n    let effectData = {\n        label: \"Grant Advantage\",\n        icon: aItem.img,\n        origin: aActor.uuid,\n        disabled: false,\n        duration: { turns: 1, startRound: gameRound },\n        flags: { dae: { macroRepeat: \"none\", specialDuration: [mqExpire] } },\n        changes: [{\n            key: mqFlag,\n            value: 1,\n            mode: jez.ADD,\n            priority: 20\n        }]\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\",{actorUuid:tActor.uuid, effects: [effectData] });\n    msg = `${tToken.name} is granting advantage to the next attack within a round, not from ${aToken.name}.`\n    jez.log(msg);\n    jez.addMessage(chatMessage, { color: \"darkblue\", fSize: 14, msg: msg, tag: \"saves\" })\n}\n//---------------------------------------------------------------------------------------\n// Disarming Attack. The target must succeed on a DC 17 Strength saving throw or drop an\n// object it is holding of the master-at-arms's choice. The object lands at its feet.\n//\nasync function doDisarming() {\n    const SAVE_TYPE = \"str\"\n    const FLAVOR = `${CONFIG.DND5E.abilities[SAVE_TYPE]} <b>DC${SAVE_DC}</b> to hold to weapon`;\n    let save = (await tActor.rollAbilitySave(SAVE_TYPE,{FLAVOR,chatMessage:true,fastforward:true}));\n    if (save.total < SAVE_DC) {\n        msg = `${tToken.name} has been disarmed, dropping the item ${aToken.name} specified.\n    That item is now on the ground at ${tToken.name}'s feet.`\n        jez.log(msg);\n        jez.addMessage(chatMessage, { color: \"saddlebrown\", fSize: 14, msg: msg, tag: \"saves\" })\n    } else {\n        msg = `${tToken.name} has not been disarmed.`\n        jez.log(msg);\n        jez.addMessage(chatMessage, { color: \"saddlebrown\", fSize: 14, msg: msg, tag: \"saves\" })\n    }\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}