{
  "name": "Interception",
  "type": "feat",
  "img": "icons/skills/melee/weapons-crossed-daggers-orange.webp",
  "data": {
    "description": {
      "value": "<p class=\"Core-Styles_Core-Body\"><span style=\"color:#191813;font-size:13px\">When a creature <span style=\"text-decoration:underline\">you can see </span>hits a target, <span style=\"text-decoration:underline\">other than you,</span> <strong>within 5 feet of you</strong> with an attack, you can use your <strong>reaction</strong> to reduce the damage the target takes by 1d10 + your proficiency bonus (to a minimum of 0 damage). You must be wielding a shield or a simple or martial weapon to use this reaction.</span></p>\n<hr />\n<p class=\"Core-Styles_Core-Body\"><strong>FoundryVTT:</strong> When the activation conditions are met, this ability can be used as follows:</p>\n<ol>\n<li class=\"Core-Styles_Core-Body\">Target the token within 5 feet that you are protecting,</li>\n<li class=\"Core-Styles_Core-Body\">Activate this item (click it),</li>\n<li class=\"Core-Styles_Core-Body\">GM will need to enter the amount of damage the protectee suffered,</li>\n<li class=\"Core-Styles_Core-Body\">Protectee will be <em>healed </em>by the amount that was blocked.</li>\n</ol>\n<p>The amount <em>healed</em> is supposed to have not have happened, so things like concentration may need to be tidied up after the fact.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 1,
      "condition": "Manual Reaction see Description"
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [
        [
          "1d10 + @prof",
          "midi-none"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Oath of the Ancients",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [
    {
      "_id": "A63H8qGFz48sDtkA",
      "changes": [],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/equipment/shield/heater-crystal-blue.webp",
      "label": "Interception",
      "origin": "Item.hpadR1zXX5u4U0Ug",
      "transfer": true,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": true,
          "aura": "Allies",
          "radius": 5,
          "alignment": "",
          "type": "",
          "ignoreSelf": true,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "flags.dae"
    }
  ],
  "sort": 0,
  "flags": {
    "ddbimporter": {
      "id": 262,
      "data": {
        "id": 262,
        "name": "Fighting Style",
        "prerequisite": null,
        "description": "<p class=\"Core-Styles_Core-Body\">At 2nd level, you adopt a style of fighting as your specialty. Choose one of the following options. You can’t take a Fighting Style option more than once, even if you later get to choose again.</p>",
        "requiredLevel": 2,
        "displayOrder": 5
      },
      "featureId": 262,
      "requiredLevel": 2,
      "prerequisite": null,
      "class": "Oath of the Ancients",
      "classId": 41,
      "subClass": "Oath of the Ancients"
    },
    "core": {
      "sourceId": "Compendium.My-Shared-DDB.classfeatures.qOLX1hwxr902wimM"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "betterCurses": {
      "isCurse": false,
      "curseName": "",
      "formula": "",
      "mwak": false,
      "rwak": false,
      "msak": false,
      "rsak": false
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Interception",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Fighting_Style_Interception\"\n/*****************************************************************************************\n * This is my attempt to implement something useful as a parttial automation of Fighting\n * Style: Inteception. Following is RAW:\n * \n *   When a creature you can see hits a target, other than you, within 5 feet of you with \n *   an attack, you can use your reaction to reduce the damage the target takes by 1d10 \n *   + your proficiency bonus (to a minimum of 0 damage). You must be wielding a shield \n *   or a simple or martial weapon to use this reaction.\n * \n * There are a number of conditions in that description that make it hard to automate. My\n * implementation aims to provide an \"item\" that can be used to do what is effectively a \n * reactionary heal. This will not always be correct, but it ains to be better than nothing.\n * \n * User of the item targets the token to be protected by the item and fires the ability, then:\n *  1. Health of target token is checked and amount below max health calculated.\n *  2. Roll the 1d10 + @prof representing maximum damage blocked.\n *  3. Pop Dialog asking GM how much damage can be blocked by this intecept\n *  4. Heal the target for the minium of 1, 2, and 3 numbers.\n *  5. Add an appropriate message to the chat log.\n * \n * 02/11/22 0.1 Creation of Macro\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\nconst LAST_ARG = args[args.length - 1];\nlet tToken = null\nlet healthDeficit = 0\nlet blockAmount = 0\nlet msg = \"\";\nlet aToken = canvas.tokens.get(LAST_ARG.tokenId);\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif (!preCheck())  {await jez.wait(250); return;}\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nawait doOnUse();          // Midi ItemMacro On Use\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n async function postResults(msg) {\n    let chatMsg = game.messages.get(args[args.length - 1].itemCardId);\n    jez.addMessage(chatMsg, { color: \"Blue\", fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    //----------------------------------------------------------------------------------------------\n    // Step 1. Health of target is checked and amount below max health calculated. Exiting if zero.\n    //\n    let CurrentHP = tToken.actor.data.data.attributes.hp\n    healthDeficit = CurrentHP.max - CurrentHP.value\n    if (healthDeficit === 0 ) {\n        msg = `${tToken.name} is still at maximum health.`;\n        postResults(msg);\n        return(false);\n    }\n    //----------------------------------------------------------------------------------------------\n    // Step 2. Obtain the block Amount from the item's roll passed in the environment\n    //\n    blockAmount = LAST_ARG.damageTotal\n     //----------------------------------------------------------------------------------------------\n     // Step 3. Pop Dialog asking GM how much damage can be blocked by this intecept\n     //\n     let template = `<div><label>Enter the amount of damage done to ${tToken.name} in the single \n     attack that triggered ${aToken.name}'s use of Interception ability. This is the maximum damage\n     that can be negated.  (${tToken.name} is currently ${healthDeficit} below maximum health.)</label>\n<div class=\"form-group\" style=\"font-size: 14px; padding: 5px; \n    border: 2px solid silver; margin: 5px;\">\n    <input name=\"TEXT_SUPPLIED\" style=\"width:350px\" value=${healthDeficit}></div>`\n     let d = new Dialog({\n         title: `How much damage can ${aToken.name} Intercept?`,\n         content: template,\n         buttons: {\n             done: {\n                 label: \"Intercept\",\n                 callback: (html) => {\n                     callBackFunc(html);\n                 }\n             },\n             cancel: {\n                 label: \"Cancel\",\n                 callback: (html) => {\n                     msg = `Hopefully, ${aToken.name} didn't really want to Intercept because the GM \n                            Canceled the action.`;\n                     postResults(msg);\n                     return(false)\n                 }\n             }\n         },\n         default: \"done\"\n     })\n     d.render(true)\n     return\n }\n/***************************************************************************************************\n * Callback triggered via the dialog\n ***************************************************************************************************/\n async function callBackFunc(html) {\n    const TEXT_SUPPLIED = html.find(\"[name=TEXT_SUPPLIED]\")[0].value;\n    if (TEXT_SUPPLIED === \"\") {\n        msg = `An empty string was supplied as maximum damage that can be restored.  This is treated\n        as a zero, so no health will be restored to ${tToken.name}.`;\n        postResults(msg);\n        return;\n    }\n    let damageDone = parseInt(TEXT_SUPPLIED)\n    jez.log(\"damageDone\",damageDone)\n    if (isNaN(damageDone)) {\n        msg = `Bad!<br><br>Bad GM!<br><br>The text entered \"${TEXT_SUPPLIED}\" could not be parsed to \n        extract a leading integer.`;\n        postResults(msg);\n        return;\n    }\n    runVFX()\n    //----------------------------------------------------------------------------------------------\n    // Step 4. Heal the target for the minium of 1, 2, and 3 numbers.\n    //\n    //jez.log(\"damageDone\",damageDone)\n    let healAmount = Math.min(damageDone, healthDeficit, blockAmount)\n    //jez.log(\"healAmount\",healAmount)\n    let healDamage = new Roll(`${healAmount}`).evaluate({ async: false });\n    //jez.log(\"healDamage\",healDamage);\n    await new MidiQOL.DamageOnlyWorkflow(aToken.actor, aToken, healAmount, \"healing\", [tToken],\n        healDamage, { flavor: `(flavor message...)`, \n        itemCardId: args[0].itemCardId, useOther: false });\n    //----------------------------------------------------------------------------------------------\n    // Step 5. Add an appropriate message to the chat log.\n    //\n    msg = `<b>${aToken.name}</b> prevents ${healAmount} damage to <b>${tToken.name}</b>`\n    await postResults(msg);\n    await jez.wait(250)\n    await replaceHitsWithProtects();\n    return;\n}\n/***************************************************************************************************\n * Run VFX on protected Token\n ***************************************************************************************************/\n async function runVFX() {\n    new Sequence()\n        .effect()\n            //.file(\"jb2a.icon.shield.green\")\n            .file(\"modules/JB2A_DnD5e/Library/Generic/UI/IconShield_01_Regular_Green_200x200.webm\")\n            .attachTo(tToken)\n            .scaleIn(0.3, 500)\n            .scaleToObject(1.5)\n            .scaleOut(0.3, 500)\n            .opacity(1.0)\n        .play();\n}\n/***************************************************************************************\n * Replace \" hits\" with \" Protects\" on chat card\n ***************************************************************************************/\n async function replaceHitsWithProtects() {\n    let chatmsg = game.messages.get(args[0].itemCardId);\n    let content = await duplicate(chatmsg.data.content);\n    const searchString = / hits/g;\n    const replaceString = `<p style=\"color:Blue;\"> Protects</p>`;\n    content = await content.replace(searchString, replaceString);\n    await chatmsg.update({ content: content });\n    await ui.chat.scrollBottom();\n    return;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "travels-in-barovia",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}