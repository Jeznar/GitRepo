{
  "name": "Witch's Touch",
  "type": "feat",
  "img": "icons/magic/unholy/hand-light-pink.webp",
  "data": {
    "description": {
      "value": "<h4 id=\"occultist-12-class-features-tradition-of-the-witch-witchs-touch\">Starting at 6th level, whenever you cast a spell with a range of touch (including through your familiar), you can add one of the following modifiers to the spell:</h4>\n<ul>\n<li><strong>Bolster</strong> -- It grants one affected target temporary hit points equal to your castng modifier. Only one creature can have these temporary hit points at a time.</li>\n<li><strong>Wither</strong> -- It deals additional damage equal to your casting modifier to one affected creature.</li>\n<li><strong>Curse</strong> -- Subtracts 1d4 from the target's next attack roll or saving throw before the start of your next turn.</li>\n<li>\n<div>\n<div><strong>Bless</strong> -- Add 1d4 to target's next attack roll or saving throw before</div>\n<div>the start of your next turn.</div>\n</div>\n</li>\n</ul>\n<p>You can also confer these effects to another spell with a range longer than touch by making its range touch, or confer these effects as an action without casting a spell by touching a target (making a melee spell attack to do if the target is an unwilling creature). If you make the range of a curse spell touch, you no longer need the material component for the spell.</p>\n<hr />\n<p><strong>FoundryVTT:&nbsp;</strong>Limitation of only one bless at a time is not automated.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": "6+ Level Witch Made a Touch Attack"
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "touch",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [],
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Witch's Touch",
          "type": "script",
          "author": "ZjFlOWYxZjM5ZTZj",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const MACRONAME = \"Witch_Touch.0.2.js\"\n/*****************************************************************************************\n * Implementation macro for Occultist's Witch's Touch.  This macro powers an item that \n * is to be used as a followup to an Occultist taking an action that should trigger the \n * Witch's Touch.  Here's Kibble's description:\n * \n *   Starting at 6th level, whenever you cast a spell with a range of touch (including \n *   through your familiar), you can add one of the following modifiers to the spell\n * \n *    o Bolster -- It grants one affected target temporary hit points equal to your Wisdom \n *      modifier. Only one creature can have these temporary hit points at a time.\n *    o Wither -- It deals additional damage equal to your Wisdom modifier to one affected \n *      creature.\n *    o Curse -- It adds or subtracts 1d4 from the target's next attack roll or saving  \n *      throw before the start of your next turn.\n * \n *   You can also confer these effects to another spell with a range longer than touch by \n *   making its range touch, or confer these effects as an action without casting a spell \n *   by touching a target (making a melee spell attack to do if the target is an unwilling \n *   creature). If you make the range of a curse spell touch, you no longer need the \n *   material component for the spell.\n * \n * I added the word title and split the Curse option into Curse and Bless.\n * \n * 02/13/22 0.1 Creation of Macro\n * 08/02/22 0.2 Add convenientDescription\n *****************************************************************************************/\nconst MACRO = MACRONAME.split(\".\")[0]     // Trim of the version number and extension\njez.log(`============== Starting === ${MACRONAME} =================`);\nfor (let i = 0; i < args.length; i++) jez.log(`  args[${i}]`, args[i]);\nconst LAST_ARG = args[args.length - 1];\nlet aActor;         // Acting actor, creature that invoked the macro\nlet aToken;         // Acting token, token for creature that invoked the macro\nlet aItem;          // Active Item information, item invoking this macro\nlet tToken;\nlet tActor;\nif (LAST_ARG.tokenId) aActor = canvas.tokens.get(LAST_ARG.tokenId).actor; else aActor = game.actors.get(LAST_ARG.actorId);\nif (LAST_ARG.tokenId) aToken = canvas.tokens.get(LAST_ARG.tokenId); else aToken = game.actors.get(LAST_ARG.tokenId);\nif (args[0]?.item) aItem = args[0]?.item; else aItem = LAST_ARG.efData?.flags?.dae?.itemData;\nconst CAST_MOD = jez.getCastMod(aToken)\nconst CUSTOM = 0, MULTIPLY = 1, ADD = 2, DOWNGRADE = 3, UPGRADE = 4, OVERRIDE = 5;\nlet msg = \"\";\nconst GAME_RND = game.combat ? game.combat.round : 0; // Added missing initilization -JGB\nconst BUFF_BOLSTER = `Witch Touch's Bolster`\nconst BUFF_CURSE = `Witch Touch's Curse`\nconst BUFF_BLESS = `Witch Touch's Bless`\n//----------------------------------------------------------------------------------\n// Run the preCheck function to make sure things are setup as best I can check them\n//\nif ((args[0]?.tag === \"OnUse\") && !preCheck()) return;\n//----------------------------------------------------------------------------------\n// Run the main procedures, choosing based on how the macro was invoked\n//\nif (args[0]?.tag === \"OnUse\") await doOnUse();          // Midi ItemMacro On Use\njez.log(`============== Finishing === ${MACRONAME} =================`);\nreturn;\n/***************************************************************************************************\n *    END_OF_MAIN_MACRO_BODY\n *                                END_OF_MAIN_MACRO_BODY\n *                                                             END_OF_MAIN_MACRO_BODY\n ***************************************************************************************************\n * Check the setup of things.  Setting the global errorMsg and returning true for ok!\n ***************************************************************************************************/\nfunction preCheck() {\n    if (args[0].targets.length !== 1) {     // If not exactly one target, return\n        msg = `Must target exactly one target.  ${args[0].targets.length} were targeted.`\n        postResults(msg);\n        return (false);\n    }\n    return(true)\n}\n/***************************************************************************************************\n * Post results to the chat card\n ***************************************************************************************************/\n function postResults(msg) {\n    jez.log(`Message: ${msg}`);\n    let chatMsg = game.messages.get(LAST_ARG.itemCardId);\n    jez.addMessage(chatMsg, { color: jez.randomDarkColor(), fSize: 14, msg: msg, tag: \"saves\" });\n}\n/***************************************************************************************************\n * Perform the code that runs when this macro is invoked as an ItemMacro \"OnUse\"\n ***************************************************************************************************/\n async function doOnUse() {\n    const FUNCNAME = \"doOnUse()\";\n    tToken = canvas.tokens.get(args[0]?.targets[0]?.id); // First Targeted Token, if any\n    tActor = tToken?.actor;\n    let optionArray;\n    jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    jez.log(`First Targeted Token (tToken) of ${args[0].targets?.length}, ${tToken?.name}`, tToken);\n    jez.log(`First Targeted Actor (tActor) ${tActor?.name}`, tActor)\n\n    const queryTitle = \"Select Witch's Touch Effect\"\n     const queryText = `Bolster can only be applied to one target at time.<br>Curse and Bless expire at \n        the end of your next turn.`\n     if (await isBolstered()) {\n         optionArray = [\n             `Wither -- Deal ${CAST_MOD} damage to target.`,\n             `Curse -- Subtract 1d4 from target's next attack or save.`,\n             `Bless -- Add 1d4 to target's next attack or save.`\n         ];\n     } else {\n         optionArray = [\n             `Bolster -- Grant one creatire ${CAST_MOD} temp HP.`,\n             `Wither -- Deal ${CAST_MOD} damage to target.`,\n             `Curse -- Subtract 1d4 from target's next attack or save.`,\n             `Bless -- Add 1d4 to target's next attack or save.`\n         ];\n     }\n    jez.pickRadioListArray(queryTitle, queryText, pickEffectCallBack, optionArray);\n    jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n    return (true);\n}\n\n/***************************************************************************************************\n * Process the callback from dialog and fork to correct function to apply effect\n ***************************************************************************************************/\nfunction pickEffectCallBack(selection) {\n    jez.log(\"pickRadioCallBack\", selection)\n    if (!selection) return(false)\n    const action = selection.split(\" \")[0]     // Grab the first word from the selection\n\n    switch(action) {\n        case \"Bolster\":\n            applyBolster();\n            break;\n        case \"Wither\":\n            applyWither();\n            break;\n        case \"Curse\":\n            applyCurse();\n            break;\n        case \"Bless\":\n            applyBless();\n            break;\n        default:\n            msg = `No valid selection made: ${action}.`\n            postResults(msg);\n            return (false);\n      }\n}\n/***************************************************************************************************\n * \n ***************************************************************************************************/\nfunction applyBolster() {\n    //----------------------------------------------------------------------------------------------\n    // Launch the VFX on the target Token\n    //\n    let intro = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/EvocationRuneIntro_01_Regular_Blue_400x400.webm\"\n    let loop  = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/EvocationRuneLoop_01_Regular_Blue_400x400.webm\"\n    let outro = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/EvocationRuneOutro_01_Regular_Blue_400x400.webm\"\n    runVFX(tToken, intro, loop, outro, 0.4, 1)\n    //----------------------------------------------------------------------------------------------\n    // Check out existing temp HP so we don't downgrade them\n    //\n    let oldTempHp = tToken.actor.data.data.attributes.hp.temp;\n    jez.log(\"oldTempHp\",oldTempHp)\n    if (CAST_MOD <= oldTempHp) {\n        msg = `${tToken.name} already had ${oldTempHp} temporary hit points, this spell has no effect.`\n        postResults(msg);\n        return(false);\n    }\n    //----------------------------------------------------------------------------------------------\n    // Define the effect that will be applied\n    //\n    const CE_DESC = `Has ${CAST_MOD} temp HP from ${aToken.name}'s bolstering touch.`\n    let effectData = [\n        {\n            label: BUFF_BOLSTER,\n            icon: aItem.img,\n            origin: args[0].uuid,\n            disabled: false,\n            // duration: { rounds: 9999, startRound: GAME_RND, startTime: game.time.worldTime },\n            flags: { \n                dae: { specialDuration: [\"isDamaged\", \"newDay\", \"longRest\", \"shortRest\"] }, \n                convenientDescription: CE_DESC,\n                core: { statusId: true },\n            },\n            changes: [\n                { key: `data.attributes.hp.temp`, mode: UPGRADE, value: CAST_MOD, priority: 20 },\n            ]\n        }];\n    jez.log(\"effectData\",effectData)\n    MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: effectData });\n    //----------------------------------------------------------------------------------------------\n    // Set the flag to point at bolstered actor\n    //\n    DAE.setFlag(aToken.actor, MACRONAME, tToken.id);    \n\n    // tToken.actor.update({ 'data.attributes.hp.temp' : CAST_MOD })\n    jez.log(\"msg 1\", msg)\n\n    msg = `<b>${tToken.name}</b> has been bolstered by Witch's Touch, he/she/it now has <b>${CAST_MOD}</b> \n    temporary hit points.`\n    jez.log(\"msg 2\", msg)\n\n    if (oldTempHp) {\n        msg = msg + `<br><br><b>${tToken.name}</b> had ${oldTempHp} temporary hit points, gained ${CAST_MOD-oldTempHp}.`\n        jez.log(\"msg 3\", msg)\n        jez.log(\"Had oldTempHp\", oldTempHp)\n    } else jez.log(\"no oldTempHP\")\n    jez.log(\"msg 4\", msg)\n    postResults(msg);\n    return (true);\n}\n/***************************************************************************************************\n *\n ***************************************************************************************************/\nasync function applyWither() {\n    //----------------------------------------------------------------------------------------------\n    // Launch the VFX on the target Token\n    //\n    let intro = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/NecromancyRuneIntro_01_Regular_Green_400x400.webm\"\n    let loop  = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/NecromancyRuneLoop_01_Regular_Green_400x400.webm\"\n    let outro = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/NecromancyRuneOutro_01_Regular_Green_400x400.webm\"\n    runVFX(tToken, intro, loop, outro, 0.4, 1)\n    //----------------------------------------------------------------------------------------------\n    // Apply Damage to the target\n    //\n    await applyDamage(tToken, CAST_MOD)\n    //postResults(msg);\n    return (false);\n    //----------------------------------------------------------------------------------------------\n    //\n    async function applyDamage(token1, amount) {\n        const FUNCNAME = \"applyDamage(token1, amount)\"\n        jez.log(`-------------- Starting --- ${MACRONAME} ${FUNCNAME} -----------------`);\n        const DAMAGE_TYPE = \"necrotic\"\n        let hpVal = token1.actor.data.data.attributes.hp.value;\n        let damageDone = Math.min(hpVal, amount)\n        let damageRollObj = new Roll(`${damageDone}`).evaluate({ async: false });\n        await new MidiQOL.DamageOnlyWorkflow(aActor, aToken, damageRollObj.total, DAMAGE_TYPE, [token1], damageRollObj,\n            {\n                flavor: `${tToken.name} suffers from ${DAMAGE_TYPE} damage`,\n                itemCardId: LAST_ARG.itemCardId,\n                useOther: false\n            }\n        );\n        jez.log(`-------------- Finished --- ${MACRONAME} ${FUNCNAME} -----------------`);\n        return (damageDone)\n    }\n}\n/***************************************************************************************************\n * \n ***************************************************************************************************/\n function applyCurse() {\n    //----------------------------------------------------------------------------------------------\n    // Launch the VFX on the target Token\n    //\n    let intro = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/EnchantmentRuneIntro_01_Regular_Red_400x400.webm\"\n    let loop  = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/EnchantmentRuneLoop_01_Regular_Red_400x400.webm\"\n    let outro = \"modules/jb2a_patreon/Library/Generic/Magic_Signs/Runes/EnchantmentRuneOutro_01_Regular_Red_400x400.webm\"\n    runVFX(tToken, intro, loop, outro, 0.4, 1)\n    //----------------------------------------------------------------------------------------------\n    // Define Effect Data\n    //\n    const CE_DESC = `Cursed: subtract 1d4 from next attack roll or saving throw before the start of ${aToken.name}'s next turn.`\n    let effectData = [\n        {\n            label: BUFF_CURSE,\n            icon: aItem.img,\n            origin: args[0].uuid,\n            disabled: false,\n            // duration: { rounds: 9999, startRound: GAME_RND, startTime: game.time.worldTime },\n            flags: { \n                dae: { specialDuration: [\"1Attack\", \"isSave\", \"turnStartSource\", \"newDay\", \"longRest\", \"shortRest\"] }, \n                convenientDescription: CE_DESC,\n                core: { statusId: true },\n            },\n            changes: [\n                { key: `data.bonuses.All-Attacks`, mode: ADD, value: `-1d4[${BUFF_CURSE}]`, priority: 20 },\n                { key: `data.bonuses.abilities.save`, mode: ADD, value: `-1d4[${BUFF_CURSE}]`, priority: 20 },\n            ]\n        }];\n    //----------------------------------------------------------------------------------------------\n    // Apply the effect\n    //\n    MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: effectData });\n    //----------------------------------------------------------------------------------------------\n    // Post results message\n    //\n    msg = `<b>${aToken.name}</b> has applied ${BUFF_CURSE}.<br><br><b>${tToken.name}</b> makes next attack or save \n    with a 1d4 penalty before the beginning of ${aToken.name}'s next turn`\n    postResults(msg);\n    return (true);\n}\n/***************************************************************************************************\n * \n ***************************************************************************************************/\n function applyBless() {\n    //----------------------------------------------------------------------------------------------\n    // Launch the VFX on the target Token\n    //\n    let intro = \"jb2a.magic_signs.rune.abjuration.intro.yellow\"\n    let loop  = \"jb2a.magic_signs.rune.abjuration.loop.yellow\"\n    let outro = \"jb2a.magic_signs.rune.abjuration.outro.yellow\"\n    runVFX(tToken, intro, loop, outro, 0.4, 1)\n    //----------------------------------------------------------------------------------------------\n    // Define Effect Data\n    //\n    const CE_DESC = `Blessed: add 1d4 to next attack roll or saving throw before the start of ${aToken.name}'s next turn.`\n    let effectData = [\n        {\n            label: BUFF_BLESS,\n            icon: aItem.img,\n            origin: args[0].uuid,\n            disabled: false,\n            // duration: { rounds: 9999, startRound: GAME_RND, startTime: game.time.worldTime },\n            flags: { \n                dae: { specialDuration: [\"1Attack\", \"isSave\", \"turnStartSource\", \"newDay\", \"longRest\", \"shortRest\"] } , \n                convenientDescription: CE_DESC, \n                core: { statusId: true },\n            },\n            changes: [\n                { key: `data.bonuses.All-Attacks`, mode: ADD, value: `+1d4[${BUFF_BLESS}]`, priority: 20 },\n                { key: `data.bonuses.abilities.save`, mode: ADD, value: `+1d4[${BUFF_BLESS}]`, priority: 20 },\n            ]\n        }];\n    //----------------------------------------------------------------------------------------------\n    // Apply the effect\n    //\n    MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tToken.actor.uuid, effects: effectData });\n    //----------------------------------------------------------------------------------------------\n    // Post results message\n    //\n    msg = `<b>${aToken.name}</b> has applied ${BUFF_BLESS}.<br><br><b>${tToken.name}</b> makes next attack or save \n    with a 1d4 bonus before the beginning of ${aToken.name}'s next turn`\n    postResults(msg);\n    return (true);\n}\n/***************************************************************************************************\n * Is the previously bolstered actor still bolstered? Return boolean with true = yes, bolstered\n ***************************************************************************************************/\n async function isBolstered() {\n    //----------------------------------------------------------------------------------------------\n    // Get flag value, if none return(false) as no bolster is outstanding\n    //\n    let oldBolsteredTokenId = await DAE.getFlag(aToken.actor, MACRONAME);\n    jez.log(\"==> oldBolsteredTokenId\", oldBolsteredTokenId)\n    if (!oldBolsteredTokenId) return(false)     // No flag set, nothing is bolstered\n    //----------------------------------------------------------------------------------------------\n    // Translate the flag value (actor ID) in to an Actor5e object\n    //\n    //let oldBolsteredActor = game.actors.get(oldBolsteredActorId)\n    let oldBolsteredToken    = canvas.tokens.placeables.find(ef => ef.id === oldBolsteredTokenId)\n    if (!oldBolsteredToken) return(false)     // Can't find the Token, nothing is bolstered\n    jez.log(`==> oldBolsteredToken, ${oldBolsteredToken.name}`, oldBolsteredToken)\n    //----------------------------------------------------------------------------------------------\n    // Search the Actor5e object for a Bolstered buff effect\n    //\n    let effect = await oldBolsteredToken.actor.effects.find(i => i.data.label === BUFF_BOLSTER);\n    jez.log(`==> ${BUFF_BOLSTER} found?`, effect)\n    if (effect) {\n        jez.log(`==> ${BUFF_BOLSTER} was found on ${oldBolsteredToken.name}.`,oldBolsteredToken)\n        return (true);\n    }\n    else jez.log(`==> ${BUFF_BOLSTER} not found on ${oldBolsteredToken.name}.`,oldBolsteredToken)\n    return (false);\n}\n\n/***************************************************************************************************\n * Run a three phase VFX at the anchor (likely a token)\n ***************************************************************************************************/\nasync function runVFX(anchor, intro, loop, outro, scale, opacity) {\n    new Sequence()\n        .effect()\n            .file(intro)\n            .atLocation(anchor) \n            .scale(scale)\n            .opacity(opacity)\n            .waitUntilFinished(-500) \n        .effect()\n            .file(loop)\n            .atLocation(anchor)\n            .scale(scale)\n            .opacity(opacity)\n            //.persist()\n            .duration(4000)\n            .waitUntilFinished(-500) \n        .effect()\n            .file(outro)\n            .atLocation(anchor)\n            .scale(scale)\n            .opacity(opacity)\n        .play();\n }",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "effectActivation": false
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false
    },
    "core": {
      "sourceId": "Item.rjpwoF38pKThPUh3"
    },
    "exportSource": {
      "world": "travels-in-barovia-ce",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.2"
    }
  }
}